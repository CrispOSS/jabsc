
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 11 15:10:13 CET 2015
//----------------------------------------------------

package bnfc.abs;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 11 15:10:13 CET 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\273\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\003\005\000\002\004\003" +
    "\000\002\005\002\000\002\005\004\000\002\006\011\000" +
    "\002\007\004\000\002\007\006\000\002\007\004\000\002" +
    "\007\006\000\002\010\002\000\002\010\005\000\002\011" +
    "\005\000\002\011\006\000\002\011\006\000\002\012\002" +
    "\000\002\012\005\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\006\000\002" +
    "\015\003\000\002\015\005\000\002\016\003\000\002\016" +
    "\005\000\002\017\003\000\002\020\003\000\002\021\003" +
    "\000\002\021\005\000\002\022\003\000\002\023\003\000" +
    "\002\024\004\000\002\024\005\000\002\025\002\000\002" +
    "\025\004\000\002\026\007\000\002\026\012\000\002\026" +
    "\005\000\002\026\007\000\002\026\012\000\002\026\013" +
    "\000\002\026\016\000\002\026\010\000\002\026\012\000" +
    "\002\026\012\000\002\026\015\000\002\026\014\000\002" +
    "\026\017\000\002\027\003\000\002\027\006\000\002\030" +
    "\003\000\002\030\004\000\002\031\002\000\002\031\003" +
    "\000\002\031\005\000\002\032\003\000\002\032\005\000" +
    "\002\033\003\000\002\033\005\000\002\034\003\000\002" +
    "\034\003\000\002\035\007\000\002\036\002\000\002\036" +
    "\005\000\002\037\005\000\002\037\007\000\002\037\010" +
    "\000\002\040\002\000\002\040\004\000\002\041\005\000" +
    "\002\042\003\000\002\042\002\000\002\043\002\000\002" +
    "\043\003\000\002\043\005\000\002\044\004\000\002\045" +
    "\002\000\002\045\004\000\002\046\004\000\002\046\005" +
    "\000\002\046\007\000\002\046\005\000\002\046\006\000" +
    "\002\046\010\000\002\046\005\000\002\046\007\000\002" +
    "\046\007\000\002\046\011\000\002\046\004\000\002\046" +
    "\004\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\011\000\002\046\005\000\002\047\005\000" +
    "\002\050\002\000\002\050\004\000\002\051\004\000\002" +
    "\051\002\000\002\052\004\000\002\052\006\000\002\052" +
    "\003\000\002\052\005\000\002\053\003\000\002\053\003" +
    "\000\002\054\002\000\002\054\003\000\002\054\005\000" +
    "\002\055\005\000\002\055\003\000\002\055\012\000\002" +
    "\055\010\000\002\055\007\000\002\056\005\000\002\056" +
    "\003\000\002\057\005\000\002\057\005\000\002\057\003" +
    "\000\002\060\005\000\002\060\005\000\002\060\005\000" +
    "\002\060\005\000\002\060\003\000\002\061\005\000\002" +
    "\061\005\000\002\061\003\000\002\062\005\000\002\062" +
    "\005\000\002\062\005\000\002\062\003\000\002\063\004" +
    "\000\002\063\004\000\002\063\003\000\002\064\006\000" +
    "\002\064\007\000\002\064\006\000\002\064\007\000\002" +
    "\064\003\000\002\064\005\000\002\064\004\000\002\064" +
    "\003\000\002\064\006\000\002\064\003\000\002\064\005" +
    "\000\002\065\005\000\002\066\004\000\002\066\005\000" +
    "\002\067\002\000\002\067\003\000\002\067\005\000\002" +
    "\070\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\006\000\002\070\003\000\002\071\003\000\002\071\003" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\003\000\002\071\003\000\002\072\007\000\002" +
    "\072\010\000\002\072\010\000\002\072\010\000\002\072" +
    "\010\000\002\072\010\000\002\072\005\000\002\072\010" +
    "\000\002\073\002\000\002\073\005\000\002\073\007\000" +
    "\002\074\002\000\002\074\004\000\002\075\004\000\002" +
    "\076\002\000\002\076\004\000\002\077\004\000\002\100" +
    "\002\000\002\100\003\000\002\100\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a4\000\006\002\ufffb\074\ufffb\001\002\000\004\002" +
    "\u01a6\001\002\000\006\002\ufffc\074\006\001\002\000\004" +
    "\115\013\001\002\000\006\002\ufffa\074\ufffa\001\002\000" +
    "\070\004\uffe4\005\uffe4\006\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\014\uffe4\015\uffe4\017\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\040\uffe4\041\uffe4\055\uffe4\070\uffe4\102\uffe4\104" +
    "\uffe4\116\uffe4\001\002\000\004\005\016\001\002\000\070" +
    "\004\uffe2\005\uffe2\006\uffe2\010\uffe2\011\uffe2\012\014\014" +
    "\uffe2\015\uffe2\017\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\040\uffe2\041\uffe2\055\uffe2\070\uffe2\102\uffe2\104\uffe2" +
    "\116\uffe2\001\002\000\070\004\uffe3\005\uffe3\006\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\014\uffe3\015\uffe3\017\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\040\uffe3\041\uffe3\055\uffe3" +
    "\070\uffe3\102\uffe3\104\uffe3\116\uffe3\001\002\000\004\115" +
    "\013\001\002\000\070\004\uffe1\005\uffe1\006\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\014\uffe1\015\uffe1\017\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\040\uffe1\041\uffe1\055\uffe1\070" +
    "\uffe1\102\uffe1\104\uffe1\116\uffe1\001\002\000\034\002\ufff4" +
    "\017\ufff4\037\ufff4\052\ufff4\053\ufff4\054\ufff4\056\ufff4\057" +
    "\ufff4\061\ufff4\067\ufff4\071\ufff4\074\ufff4\111\ufff4\001\002" +
    "\000\034\002\uffef\017\uffef\037\uffef\052\uffef\053\uffef\054" +
    "\uffef\056\uffef\057\021\061\uffef\067\uffef\071\uffef\074\uffef" +
    "\111\uffef\001\002\000\032\002\uffdc\017\uffdc\037\uffdc\052" +
    "\uffdc\053\uffdc\054\uffdc\056\uffdc\061\037\067\043\071\uffdc" +
    "\074\uffdc\111\uffdc\001\002\000\010\006\025\115\030\116" +
    "\027\001\002\000\004\005\023\001\002\000\034\002\ufff3" +
    "\017\ufff3\037\ufff3\052\ufff3\053\ufff3\054\ufff3\056\ufff3\057" +
    "\ufff3\061\ufff3\067\ufff3\071\ufff3\074\ufff3\111\ufff3\001\002" +
    "\000\006\005\ufff8\063\035\001\002\000\006\005\ufff6\063" +
    "\033\001\002\000\010\004\031\005\ufffe\063\ufffe\001\002" +
    "\000\010\004\000\005\000\063\000\001\002\000\010\004" +
    "\uffff\005\uffff\063\uffff\001\002\000\006\115\030\116\027" +
    "\001\002\000\006\005\ufffd\063\ufffd\001\002\000\004\115" +
    "\013\001\002\000\004\005\ufff5\001\002\000\004\115\013" +
    "\001\002\000\004\005\ufff7\001\002\000\010\006\uffed\115" +
    "\uffed\116\uffed\001\002\000\026\002\uffb6\017\073\037\066" +
    "\052\uff52\053\072\054\074\056\070\071\uff52\074\uffb6\111" +
    "\071\001\002\000\004\005\062\001\002\000\010\006\046" +
    "\115\050\116\027\001\002\000\010\006\uffec\115\uffec\116" +
    "\uffec\001\002\000\006\115\030\116\027\001\002\000\004" +
    "\063\057\001\002\000\004\063\055\001\002\000\006\115" +
    "\uffe0\116\uffe0\001\002\000\010\004\uffff\012\uffdf\063\uffff" +
    "\001\002\000\004\012\052\001\002\000\006\115\054\116" +
    "\uffde\001\002\000\006\115\uffdd\116\uffdd\001\002\000\004" +
    "\012\uffdf\001\002\000\004\115\013\001\002\000\004\005" +
    "\ufff0\001\002\000\004\115\013\001\002\000\004\005\ufff1" +
    "\001\002\000\004\005\ufff2\001\002\000\032\002\uffee\017" +
    "\uffee\037\uffee\052\uffee\053\uffee\054\uffee\056\uffee\061\uffee" +
    "\067\uffee\071\uffee\074\uffee\111\uffee\001\002\000\026\002" +
    "\uffdb\017\uffdb\037\uffdb\052\uffdb\053\uffdb\054\uffdb\056\uffdb" +
    "\071\uffdb\074\uffdb\111\uffdb\001\002\000\006\052\u016b\071" +
    "\u016a\001\002\000\014\002\uffb7\007\uffb7\020\uffb7\074\uffb7" +
    "\115\uffb7\001\002\000\040\014\134\033\141\036\136\043" +
    "\130\044\127\050\120\065\132\072\137\076\135\105\125" +
    "\106\123\113\124\114\121\115\126\116\150\001\002\000" +
    "\006\002\ufff9\074\ufff9\001\002\000\004\115\u0146\001\002" +
    "\000\004\115\u0158\001\002\000\004\115\u0142\001\002\000" +
    "\072\007\uffb1\014\uffb1\017\uffb1\020\uffb1\033\uffb1\036\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\050\uffb1\065\uffb1\072" +
    "\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\103\uffb1" +
    "\105\uffb1\106\uffb1\107\uffb1\110\uffb1\112\uffb1\113\uffb1\114" +
    "\uffb1\115\uffb1\116\uffb1\001\002\000\006\007\075\115\013" +
    "\001\002\000\016\004\uffeb\005\uffeb\011\uffeb\014\uffeb\015" +
    "\uffeb\116\uffeb\001\002\000\004\116\106\001\002\000\020" +
    "\004\uffea\005\uffea\010\100\011\uffea\014\uffea\015\uffea\116" +
    "\uffea\001\002\000\006\007\075\115\013\001\002\000\006" +
    "\004\104\011\uffe8\001\002\000\004\011\103\001\002\000" +
    "\016\004\uffe9\005\uffe9\011\uffe9\014\uffe9\015\uffe9\116\uffe9" +
    "\001\002\000\006\007\075\115\013\001\002\000\004\011" +
    "\uffe7\001\002\000\006\010\107\014\110\001\002\000\004" +
    "\115\303\001\002\000\010\007\075\015\uffb5\115\013\001" +
    "\002\000\004\116\301\001\002\000\004\015\116\001\002" +
    "\000\006\004\114\015\uffb4\001\002\000\010\007\075\015" +
    "\uffb5\115\013\001\002\000\004\015\uffb3\001\002\000\004" +
    "\013\117\001\002\000\042\014\134\033\141\036\136\043" +
    "\130\044\127\047\122\050\120\065\132\072\137\076\135" +
    "\105\125\106\123\113\124\114\121\115\126\116\150\001" +
    "\002\000\040\014\134\033\141\036\136\043\130\044\127" +
    "\050\120\065\132\072\137\076\135\105\125\106\123\113" +
    "\124\114\121\115\126\116\150\001\002\000\070\004\uff5d" +
    "\005\uff5d\006\uff5d\010\uff5d\011\uff5d\012\uff5d\015\uff5d\017" +
    "\uff5d\021\uff5d\023\uff5d\024\uff5d\025\uff5d\026\uff5d\027\uff5d" +
    "\030\uff5d\031\uff5d\032\uff5d\033\uff5d\034\uff5d\035\uff5d\040" +
    "\uff5d\041\uff5d\042\uff5d\055\uff5d\070\uff5d\102\uff5d\104\uff5d" +
    "\001\002\000\004\005\uffc2\001\002\000\070\004\uff5f\005" +
    "\uff5f\006\uff5f\010\uff5f\011\uff5f\012\uff5f\015\uff5f\017\uff5f" +
    "\021\uff5f\023\uff5f\024\uff5f\025\uff5f\026\uff5f\027\uff5f\030" +
    "\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f\035\uff5f\040\uff5f" +
    "\041\uff5f\042\uff5f\055\uff5f\070\uff5f\102\uff5f\104\uff5f\001" +
    "\002\000\070\004\uff5e\005\uff5e\006\uff5e\010\uff5e\011\uff5e" +
    "\012\uff5e\015\uff5e\017\uff5e\021\uff5e\023\uff5e\024\uff5e\025" +
    "\uff5e\026\uff5e\027\uff5e\030\uff5e\031\uff5e\032\uff5e\033\uff5e" +
    "\034\uff5e\035\uff5e\040\uff5e\041\uff5e\042\uff5e\055\uff5e\070" +
    "\uff5e\102\uff5e\104\uff5e\001\002\000\066\004\uff60\005\uff60" +
    "\006\uff60\010\uff60\011\uff60\012\252\015\uff60\017\uff60\023" +
    "\uff60\024\uff60\025\uff60\026\uff60\027\uff60\030\uff60\031\uff60" +
    "\032\uff60\033\uff60\034\uff60\035\uff60\040\uff60\041\uff60\042" +
    "\uff60\055\uff60\070\uff60\102\uff60\104\uff60\001\002\000\070" +
    "\004\uffe3\005\uffe3\006\uffe3\010\uffe3\011\uffe3\012\uffe3\014" +
    "\uffe3\015\uffe3\017\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\040\uffe3\041\uffe3\055\uffe3\070\uffe3\102\uffe3\104\uffe3" +
    "\116\uffe3\001\002\000\070\004\uff5b\005\uff5b\006\uff5b\010" +
    "\uff5b\011\uff5b\012\uff5b\015\uff5b\017\uff5b\021\uff5b\023\uff5b" +
    "\024\uff5b\025\uff5b\026\uff5b\027\uff5b\030\uff5b\031\uff5b\032" +
    "\uff5b\033\uff5b\034\uff5b\035\uff5b\040\uff5b\041\uff5b\042\uff5b" +
    "\055\uff5b\070\uff5b\102\uff5b\104\uff5b\001\002\000\070\004" +
    "\uff5c\005\uff5c\006\uff5c\010\uff5c\011\uff5c\012\uff5c\015\uff5c" +
    "\017\uff5c\021\uff5c\023\uff5c\024\uff5c\025\uff5c\026\uff5c\027" +
    "\uff5c\030\uff5c\031\uff5c\032\uff5c\033\uff5c\034\uff5c\035\uff5c" +
    "\040\uff5c\041\uff5c\042\uff5c\055\uff5c\070\uff5c\102\uff5c\104" +
    "\uff5c\001\002\000\004\116\243\001\002\000\040\014\134" +
    "\033\141\036\136\043\130\044\127\050\120\065\132\072" +
    "\137\076\135\105\125\106\123\113\124\114\121\115\126" +
    "\116\150\001\002\000\066\004\uff70\005\uff70\006\uff70\010" +
    "\uff70\011\uff70\012\uff70\014\233\015\uff70\017\uff70\023\uff70" +
    "\024\uff70\025\uff70\026\uff70\027\uff70\030\uff70\031\uff70\032" +
    "\uff70\033\uff70\034\uff70\035\uff70\040\uff70\041\uff70\055\uff70" +
    "\070\uff70\102\uff70\104\uff70\001\002\000\040\014\134\033" +
    "\141\036\136\043\130\044\127\050\120\065\132\072\137" +
    "\076\135\105\125\106\123\113\124\114\121\115\126\116" +
    "\150\001\002\000\070\004\uff61\005\uff61\006\uff61\010\uff61" +
    "\011\uff61\012\uff61\015\uff61\017\uff61\021\uff61\023\uff61\024" +
    "\uff61\025\uff61\026\uff61\027\uff61\030\uff61\031\uff61\032\uff61" +
    "\033\uff61\034\uff61\035\uff61\040\uff61\041\uff61\042\uff61\055" +
    "\uff61\070\uff61\102\uff61\104\uff61\001\002\000\032\014\134" +
    "\033\141\036\136\043\130\044\127\076\135\105\125\106" +
    "\123\113\124\114\121\115\126\116\150\001\002\000\004" +
    "\014\221\001\002\000\006\005\uffc1\024\211\001\002\000" +
    "\032\014\134\033\141\036\136\043\130\044\127\076\135" +
    "\105\125\106\123\113\124\114\121\115\126\116\150\001" +
    "\002\000\064\004\uff78\005\uff78\006\uff78\010\uff78\011\uff78" +
    "\012\uff78\015\uff78\017\uff78\023\uff78\024\uff78\025\uff78\026" +
    "\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78" +
    "\035\uff78\040\uff78\041\uff78\055\uff78\070\uff78\102\uff78\104" +
    "\uff78\001\002\000\064\004\uff7b\005\uff7b\006\uff7b\010\uff7b" +
    "\011\uff7b\012\uff7b\015\uff7b\017\uff7b\023\uff7b\024\uff7b\025" +
    "\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b" +
    "\034\uff7b\035\uff7b\040\uff7b\041\uff7b\055\uff7b\070\uff7b\102" +
    "\uff7b\104\uff7b\001\002\000\064\004\uff6e\005\uff6e\006\uff6e" +
    "\010\uff6e\011\uff6e\012\uff6e\015\uff6e\017\uff6e\023\uff6e\024" +
    "\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e" +
    "\033\uff6e\034\uff6e\035\uff6e\040\uff6e\041\uff6e\055\uff6e\070" +
    "\uff6e\102\uff6e\104\uff6e\001\002\000\064\004\uff7f\005\uff7f" +
    "\006\171\010\uff7f\011\uff7f\012\uff7f\015\uff7f\017\uff7f\023" +
    "\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f" +
    "\032\uff7f\033\uff7f\034\173\035\172\040\uff7f\041\uff7f\055" +
    "\uff7f\070\uff7f\102\uff7f\104\uff7f\001\002\000\056\004\uff82" +
    "\005\uff82\010\uff82\011\uff82\012\uff82\015\uff82\017\uff82\023" +
    "\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82" +
    "\032\166\033\167\040\uff82\041\uff82\055\uff82\070\uff82\102" +
    "\uff82\104\uff82\001\002\000\004\005\217\001\002\000\070" +
    "\004\uff73\005\uff73\006\uff73\010\uff73\011\uff73\012\uff73\014" +
    "\205\015\uff73\017\uff73\023\uff73\024\uff73\025\uff73\026\uff73" +
    "\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034\uff73\035" +
    "\uff73\037\204\040\uff73\041\uff73\055\uff73\070\uff73\102\uff73" +
    "\104\uff73\001\002\000\052\004\uff87\005\uff87\010\161\011" +
    "\164\012\uff87\015\uff87\017\uff87\023\uff87\024\uff87\025\uff87" +
    "\026\uff87\027\uff87\030\163\031\162\040\uff87\041\uff87\055" +
    "\uff87\070\uff87\102\uff87\104\uff87\001\002\000\042\004\uff8a" +
    "\005\uff8a\012\uff8a\015\uff8a\017\uff8a\023\uff8a\024\uff8a\025" +
    "\uff8a\026\157\027\156\040\uff8a\041\uff8a\055\uff8a\070\uff8a" +
    "\102\uff8a\104\uff8a\001\002\000\036\004\uff8f\005\uff8f\012" +
    "\uff8f\015\uff8f\017\uff8f\023\uff8f\024\uff8f\025\154\040\uff8f" +
    "\041\uff8f\055\uff8f\070\uff8f\102\uff8f\104\uff8f\001\002\000" +
    "\032\014\134\033\141\036\136\043\130\044\127\076\135" +
    "\105\125\106\123\113\124\114\121\115\126\116\150\001" +
    "\002\000\042\004\uff8b\005\uff8b\012\uff8b\015\uff8b\017\uff8b" +
    "\023\uff8b\024\uff8b\025\uff8b\026\157\027\156\040\uff8b\041" +
    "\uff8b\055\uff8b\070\uff8b\102\uff8b\104\uff8b\001\002\000\032" +
    "\014\134\033\141\036\136\043\130\044\127\076\135\105" +
    "\125\106\123\113\124\114\121\115\126\116\150\001\002" +
    "\000\032\014\134\033\141\036\136\043\130\044\127\076" +
    "\135\105\125\106\123\113\124\114\121\115\126\116\150" +
    "\001\002\000\052\004\uff89\005\uff89\010\161\011\164\012" +
    "\uff89\015\uff89\017\uff89\023\uff89\024\uff89\025\uff89\026\uff89" +
    "\027\uff89\030\163\031\162\040\uff89\041\uff89\055\uff89\070" +
    "\uff89\102\uff89\104\uff89\001\002\000\032\014\134\033\141" +
    "\036\136\043\130\044\127\076\135\105\125\106\123\113" +
    "\124\114\121\115\126\116\150\001\002\000\032\014\134" +
    "\033\141\036\136\043\130\044\127\076\135\105\125\106" +
    "\123\113\124\114\121\115\126\116\150\001\002\000\032" +
    "\014\134\033\141\036\136\043\130\044\127\076\135\105" +
    "\125\106\123\113\124\114\121\115\126\116\150\001\002" +
    "\000\032\014\134\033\141\036\136\043\130\044\127\076" +
    "\135\105\125\106\123\113\124\114\121\115\126\116\150" +
    "\001\002\000\056\004\uff84\005\uff84\010\uff84\011\uff84\012" +
    "\uff84\015\uff84\017\uff84\023\uff84\024\uff84\025\uff84\026\uff84" +
    "\027\uff84\030\uff84\031\uff84\032\166\033\167\040\uff84\041" +
    "\uff84\055\uff84\070\uff84\102\uff84\104\uff84\001\002\000\032" +
    "\014\134\033\141\036\136\043\130\044\127\076\135\105" +
    "\125\106\123\113\124\114\121\115\126\116\150\001\002" +
    "\000\032\014\134\033\141\036\136\043\130\044\127\076" +
    "\135\105\125\106\123\113\124\114\121\115\126\116\150" +
    "\001\002\000\064\004\uff80\005\uff80\006\171\010\uff80\011" +
    "\uff80\012\uff80\015\uff80\017\uff80\023\uff80\024\uff80\025\uff80" +
    "\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034" +
    "\173\035\172\040\uff80\041\uff80\055\uff80\070\uff80\102\uff80" +
    "\104\uff80\001\002\000\032\014\134\033\141\036\136\043" +
    "\130\044\127\076\135\105\125\106\123\113\124\114\121" +
    "\115\126\116\150\001\002\000\032\014\134\033\141\036" +
    "\136\043\130\044\127\076\135\105\125\106\123\113\124" +
    "\114\121\115\126\116\150\001\002\000\032\014\134\033" +
    "\141\036\136\043\130\044\127\076\135\105\125\106\123" +
    "\113\124\114\121\115\126\116\150\001\002\000\064\004" +
    "\uff7d\005\uff7d\006\uff7d\010\uff7d\011\uff7d\012\uff7d\015\uff7d" +
    "\017\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030" +
    "\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\040\uff7d" +
    "\041\uff7d\055\uff7d\070\uff7d\102\uff7d\104\uff7d\001\002\000" +
    "\064\004\uff7c\005\uff7c\006\uff7c\010\uff7c\011\uff7c\012\uff7c" +
    "\015\uff7c\017\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c\027" +
    "\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c" +
    "\040\uff7c\041\uff7c\055\uff7c\070\uff7c\102\uff7c\104\uff7c\001" +
    "\002\000\064\004\uff7e\005\uff7e\006\uff7e\010\uff7e\011\uff7e" +
    "\012\uff7e\015\uff7e\017\uff7e\023\uff7e\024\uff7e\025\uff7e\026" +
    "\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e" +
    "\035\uff7e\040\uff7e\041\uff7e\055\uff7e\070\uff7e\102\uff7e\104" +
    "\uff7e\001\002\000\064\004\uff81\005\uff81\006\171\010\uff81" +
    "\011\uff81\012\uff81\015\uff81\017\uff81\023\uff81\024\uff81\025" +
    "\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033\uff81" +
    "\034\173\035\172\040\uff81\041\uff81\055\uff81\070\uff81\102" +
    "\uff81\104\uff81\001\002\000\056\004\uff85\005\uff85\010\uff85" +
    "\011\uff85\012\uff85\015\uff85\017\uff85\023\uff85\024\uff85\025" +
    "\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032\166\033\167" +
    "\040\uff85\041\uff85\055\uff85\070\uff85\102\uff85\104\uff85\001" +
    "\002\000\056\004\uff83\005\uff83\010\uff83\011\uff83\012\uff83" +
    "\015\uff83\017\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027" +
    "\uff83\030\uff83\031\uff83\032\166\033\167\040\uff83\041\uff83" +
    "\055\uff83\070\uff83\102\uff83\104\uff83\001\002\000\056\004" +
    "\uff86\005\uff86\010\uff86\011\uff86\012\uff86\015\uff86\017\uff86" +
    "\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031" +
    "\uff86\032\166\033\167\040\uff86\041\uff86\055\uff86\070\uff86" +
    "\102\uff86\104\uff86\001\002\000\052\004\uff88\005\uff88\010" +
    "\161\011\164\012\uff88\015\uff88\017\uff88\023\uff88\024\uff88" +
    "\025\uff88\026\uff88\027\uff88\030\163\031\162\040\uff88\041" +
    "\uff88\055\uff88\070\uff88\102\uff88\104\uff88\001\002\000\042" +
    "\014\134\033\141\036\136\040\uff93\043\130\044\127\050" +
    "\120\065\132\072\137\076\135\105\125\106\123\113\124" +
    "\114\121\115\126\116\150\001\002\000\042\014\134\015" +
    "\uff93\033\141\036\136\043\130\044\127\050\120\065\132" +
    "\072\137\076\135\105\125\106\123\113\124\114\121\115" +
    "\126\116\150\001\002\000\004\015\214\001\002\000\012" +
    "\004\210\015\uff92\024\211\040\uff92\001\002\000\044\014" +
    "\134\015\uff93\033\141\036\136\040\uff93\043\130\044\127" +
    "\050\120\065\132\072\137\076\135\105\125\106\123\113" +
    "\124\114\121\115\126\116\150\001\002\000\032\014\134" +
    "\033\141\036\136\043\130\044\127\076\135\105\125\106" +
    "\123\113\124\114\121\115\126\116\150\001\002\000\036" +
    "\004\uff90\005\uff90\012\uff90\015\uff90\017\uff90\023\uff90\024" +
    "\uff90\025\154\040\uff90\041\uff90\055\uff90\070\uff90\102\uff90" +
    "\104\uff90\001\002\000\006\015\uff91\040\uff91\001\002\000" +
    "\064\004\uff77\005\uff77\006\uff77\010\uff77\011\uff77\012\uff77" +
    "\015\uff77\017\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027" +
    "\uff77\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77" +
    "\040\uff77\041\uff77\055\uff77\070\uff77\102\uff77\104\uff77\001" +
    "\002\000\004\040\216\001\002\000\064\004\uff75\005\uff75" +
    "\006\uff75\010\uff75\011\uff75\012\uff75\015\uff75\017\uff75\023" +
    "\uff75\024\uff75\025\uff75\026\uff75\027\uff75\030\uff75\031\uff75" +
    "\032\uff75\033\uff75\034\uff75\035\uff75\040\uff75\041\uff75\055" +
    "\uff75\070\uff75\102\uff75\104\uff75\001\002\000\026\002\uffd5" +
    "\017\uffd5\037\uffd5\052\uffd5\053\uffd5\054\uffd5\056\uffd5\071" +
    "\uffd5\074\uffd5\111\uffd5\001\002\000\064\004\uff79\005\uff79" +
    "\006\uff79\010\uff79\011\uff79\012\uff79\015\uff79\017\uff79\023" +
    "\uff79\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79" +
    "\032\uff79\033\uff79\034\uff79\035\uff79\040\uff79\041\uff79\055" +
    "\uff79\070\uff79\102\uff79\104\uff79\001\002\000\006\007\075" +
    "\115\013\001\002\000\004\015\223\001\002\000\004\013" +
    "\224\001\002\000\040\014\134\033\141\036\136\043\130" +
    "\044\127\050\120\065\132\072\137\076\135\105\125\106" +
    "\123\113\124\114\121\115\126\116\150\001\002\000\006" +
    "\024\211\070\226\001\002\000\040\014\134\033\141\036" +
    "\136\043\130\044\127\050\120\065\132\072\137\076\135" +
    "\105\125\106\123\113\124\114\121\115\126\116\150\001" +
    "\002\000\034\004\uff8e\005\uff8e\012\uff8e\015\uff8e\017\uff8e" +
    "\023\uff8e\024\211\040\uff8e\041\uff8e\055\uff8e\070\uff8e\102" +
    "\uff8e\104\uff8e\001\002\000\064\004\uff7a\005\uff7a\006\uff7a" +
    "\010\uff7a\011\uff7a\012\uff7a\015\uff7a\017\uff7a\023\uff7a\024" +
    "\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a" +
    "\033\uff7a\034\uff7a\035\uff7a\040\uff7a\041\uff7a\055\uff7a\070" +
    "\uff7a\102\uff7a\104\uff7a\001\002\000\006\015\232\024\211" +
    "\001\002\000\064\004\uff6d\005\uff6d\006\uff6d\010\uff6d\011" +
    "\uff6d\012\uff6d\015\uff6d\017\uff6d\023\uff6d\024\uff6d\025\uff6d" +
    "\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034" +
    "\uff6d\035\uff6d\040\uff6d\041\uff6d\055\uff6d\070\uff6d\102\uff6d" +
    "\104\uff6d\001\002\000\042\014\134\015\uff93\033\141\036" +
    "\136\043\130\044\127\050\120\065\132\072\137\076\135" +
    "\105\125\106\123\113\124\114\121\115\126\116\150\001" +
    "\002\000\004\015\235\001\002\000\064\004\uff6f\005\uff6f" +
    "\006\uff6f\010\uff6f\011\uff6f\012\uff6f\015\uff6f\017\uff6f\023" +
    "\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f" +
    "\032\uff6f\033\uff6f\034\uff6f\035\uff6f\040\uff6f\041\uff6f\055" +
    "\uff6f\070\uff6f\102\uff6f\104\uff6f\001\002\000\006\024\211" +
    "\104\237\001\002\000\040\014\134\033\141\036\136\043" +
    "\130\044\127\050\120\065\132\072\137\076\135\105\125" +
    "\106\123\113\124\114\121\115\126\116\150\001\002\000" +
    "\006\024\211\055\241\001\002\000\040\014\134\033\141" +
    "\036\136\043\130\044\127\050\120\065\132\072\137\076" +
    "\135\105\125\106\123\113\124\114\121\115\126\116\150" +
    "\001\002\000\034\004\uff8d\005\uff8d\012\uff8d\015\uff8d\017" +
    "\uff8d\023\uff8d\024\211\040\uff8d\041\uff8d\055\uff8d\070\uff8d" +
    "\102\uff8d\104\uff8d\001\002\000\070\004\uff71\005\uff71\006" +
    "\uff71\010\uff71\011\uff71\012\uff71\014\245\015\uff71\017\uff71" +
    "\023\uff71\024\uff71\025\uff71\026\uff71\027\uff71\030\uff71\031" +
    "\uff71\032\uff71\033\uff71\034\uff71\035\uff71\037\244\040\uff71" +
    "\041\uff71\055\uff71\070\uff71\102\uff71\104\uff71\001\002\000" +
    "\042\014\134\033\141\036\136\040\uff93\043\130\044\127" +
    "\050\120\065\132\072\137\076\135\105\125\106\123\113" +
    "\124\114\121\115\126\116\150\001\002\000\042\014\134" +
    "\015\uff93\033\141\036\136\043\130\044\127\050\120\065" +
    "\132\072\137\076\135\105\125\106\123\113\124\114\121" +
    "\115\126\116\150\001\002\000\004\015\247\001\002\000" +
    "\064\004\uff76\005\uff76\006\uff76\010\uff76\011\uff76\012\uff76" +
    "\015\uff76\017\uff76\023\uff76\024\uff76\025\uff76\026\uff76\027" +
    "\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035\uff76" +
    "\040\uff76\041\uff76\055\uff76\070\uff76\102\uff76\104\uff76\001" +
    "\002\000\004\040\251\001\002\000\064\004\uff74\005\uff74" +
    "\006\uff74\010\uff74\011\uff74\012\uff74\015\uff74\017\uff74\023" +
    "\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74" +
    "\032\uff74\033\uff74\034\uff74\035\uff74\040\uff74\041\uff74\055" +
    "\uff74\070\uff74\102\uff74\104\uff74\001\002\000\004\116\253" +
    "\001\002\000\064\004\uff72\005\uff72\006\uff72\010\uff72\011" +
    "\uff72\012\uff72\015\uff72\017\uff72\023\uff72\024\uff72\025\uff72" +
    "\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033\uff72\034" +
    "\uff72\035\uff72\040\uff72\041\uff72\055\uff72\070\uff72\102\uff72" +
    "\104\uff72\001\002\000\006\017\255\024\211\001\002\000" +
    "\026\007\260\043\130\044\127\076\135\105\265\106\123" +
    "\113\124\114\121\115\261\116\263\001\002\000\004\020" +
    "\300\001\002\000\010\004\uff65\015\uff65\021\uff65\001\002" +
    "\000\010\004\uff62\015\uff62\021\uff62\001\002\000\012\004" +
    "\uff64\014\272\015\uff64\021\uff64\001\002\000\004\021\270" +
    "\001\002\000\010\004\uff66\015\uff66\021\uff66\001\002\000" +
    "\004\005\266\001\002\000\012\004\uff60\015\uff60\021\uff60" +
    "\040\uff60\001\002\000\030\007\260\020\uff6b\043\130\044" +
    "\127\076\135\105\265\106\123\113\124\114\121\115\261" +
    "\116\263\001\002\000\004\020\uff6a\001\002\000\040\014" +
    "\134\033\141\036\136\043\130\044\127\050\120\065\132" +
    "\072\137\076\135\105\125\106\123\113\124\114\121\115" +
    "\126\116\150\001\002\000\006\005\uff6c\024\211\001\002" +
    "\000\030\007\260\015\uff69\043\130\044\127\076\135\105" +
    "\265\106\123\113\124\114\121\115\261\116\263\001\002" +
    "\000\006\004\276\015\uff68\001\002\000\004\015\275\001" +
    "\002\000\010\004\uff63\015\uff63\021\uff63\001\002\000\030" +
    "\007\260\015\uff69\043\130\044\127\076\135\105\265\106" +
    "\123\113\124\114\121\115\261\116\263\001\002\000\004" +
    "\015\uff67\001\002\000\034\004\uff8c\005\uff8c\012\uff8c\015" +
    "\uff8c\017\uff8c\023\uff8c\024\uff8c\040\uff8c\041\uff8c\055\uff8c" +
    "\070\uff8c\102\uff8c\104\uff8c\001\002\000\006\004\uffb2\015" +
    "\uffb2\001\002\000\004\011\306\001\002\000\006\004\304" +
    "\011\uffc6\001\002\000\004\115\303\001\002\000\004\011" +
    "\uffc5\001\002\000\004\014\307\001\002\000\010\007\075" +
    "\015\uffb5\115\013\001\002\000\004\015\311\001\002\000" +
    "\004\013\312\001\002\000\042\014\134\033\141\036\136" +
    "\043\130\044\127\047\122\050\120\065\132\072\137\076" +
    "\135\105\125\106\123\113\124\114\121\115\126\116\150" +
    "\001\002\000\004\005\314\001\002\000\026\002\uffd4\017" +
    "\uffd4\037\uffd4\052\uffd4\053\uffd4\054\uffd4\056\uffd4\071\uffd4" +
    "\074\uffd4\111\uffd4\001\002\000\072\007\075\014\134\017" +
    "\320\020\317\033\141\036\136\043\130\044\127\045\327" +
    "\046\326\050\120\065\316\072\137\075\341\076\135\077" +
    "\337\100\333\101\332\103\331\105\330\106\123\107\325" +
    "\110\323\112\321\113\124\114\121\115\126\116\334\001" +
    "\002\000\040\014\u013c\033\141\036\136\043\130\044\127" +
    "\050\120\065\132\072\137\076\135\105\125\106\123\113" +
    "\124\114\121\115\126\116\150\001\002\000\016\002\uffb8" +
    "\007\uffb8\017\uffb8\020\uffb8\074\uffb8\115\uffb8\001\002\000" +
    "\072\007\uffb1\014\uffb1\017\uffb1\020\uffb1\033\uffb1\036\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\050\uffb1\065\uffb1\072" +
    "\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\103\uffb1" +
    "\105\uffb1\106\uffb1\107\uffb1\110\uffb1\112\uffb1\113\uffb1\114" +
    "\uffb1\115\uffb1\116\uffb1\001\002\000\004\014\u0136\001\002" +
    "\000\004\005\uff94\001\002\000\070\007\075\014\134\017" +
    "\320\033\141\036\136\043\130\044\127\045\327\046\326" +
    "\050\120\065\316\072\137\075\341\076\135\077\337\100" +
    "\333\101\332\103\331\105\330\106\123\107\325\110\323" +
    "\112\321\113\124\114\121\115\126\116\334\001\002\000" +
    "\072\007\uffb0\014\uffb0\017\uffb0\020\uffb0\033\uffb0\036\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\046\uffb0\050\uffb0\065\uffb0\072" +
    "\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\103\uffb0" +
    "\105\uffb0\106\uffb0\107\uffb0\110\uffb0\112\uffb0\113\uffb0\114" +
    "\uffb0\115\uffb0\116\uffb0\001\002\000\040\014\134\033\141" +
    "\036\136\043\130\044\127\050\120\065\132\072\137\076" +
    "\135\105\125\106\123\113\124\114\121\115\126\116\150" +
    "\001\002\000\040\014\134\033\141\036\136\043\130\044" +
    "\127\050\120\065\132\072\137\076\135\105\u011d\106\123" +
    "\113\124\114\121\115\126\116\u0120\001\002\000\040\014" +
    "\134\033\141\036\136\043\130\044\127\050\120\065\132" +
    "\072\137\076\135\105\125\106\123\113\124\114\121\115" +
    "\126\116\150\001\002\000\044\005\uff60\006\uff60\010\uff60" +
    "\011\uff60\012\u0116\024\uff60\025\uff60\026\uff60\027\uff60\030" +
    "\uff60\031\uff60\032\uff60\033\uff60\034\uff60\035\uff60\041\351" +
    "\102\uff60\001\002\000\004\005\u0115\001\002\000\004\005" +
    "\u0114\001\002\000\042\014\134\033\141\036\136\043\130" +
    "\044\127\050\120\065\132\072\137\075\341\076\135\105" +
    "\346\106\123\113\124\114\121\115\126\116\150\001\002" +
    "\000\052\005\uff73\006\uff73\010\uff73\011\uff73\012\uff73\013" +
    "\u010f\014\205\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73" +
    "\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\037\204\041" +
    "\uff73\102\uff73\001\002\000\014\005\uff95\012\u0101\024\211" +
    "\041\377\102\u0100\001\002\000\004\005\376\001\002\000" +
    "\040\014\134\033\141\036\136\043\130\044\127\050\120" +
    "\065\132\072\137\076\135\105\125\106\123\113\124\114" +
    "\121\115\126\116\150\001\002\000\050\005\uff70\006\uff70" +
    "\010\100\011\uff70\012\uff70\014\233\024\uff70\025\uff70\026" +
    "\uff70\027\uff70\030\uff70\031\uff70\032\uff70\033\uff70\034\uff70" +
    "\035\uff70\041\uff70\102\uff70\116\uffea\001\002\000\010\007" +
    "\075\073\364\115\013\001\002\000\004\116\343\001\002" +
    "\000\006\005\344\013\345\001\002\000\076\007\uffa9\014" +
    "\uffa9\017\uffa9\020\uffa9\033\uffa9\036\uffa9\043\uffa9\044\uffa9" +
    "\045\uffa9\046\uffa9\050\uffa9\051\uffa9\055\uffa9\065\uffa9\072" +
    "\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9\101\uffa9\103\uffa9" +
    "\105\uffa9\106\uffa9\107\uffa9\110\uffa9\112\uffa9\113\uffa9\114" +
    "\uffa9\115\uffa9\116\uffa9\001\002\000\042\014\134\033\141" +
    "\036\136\043\130\044\127\050\120\065\132\072\137\075" +
    "\341\076\135\105\346\106\123\113\124\114\121\115\126" +
    "\116\150\001\002\000\044\005\uff60\006\uff60\010\uff60\011" +
    "\uff60\012\352\024\uff60\025\uff60\026\uff60\027\uff60\030\uff60" +
    "\031\uff60\032\uff60\033\uff60\034\uff60\035\uff60\041\351\102" +
    "\uff60\001\002\000\004\005\350\001\002\000\076\007\uffa8" +
    "\014\uffa8\017\uffa8\020\uffa8\033\uffa8\036\uffa8\043\uffa8\044" +
    "\uffa8\045\uffa8\046\uffa8\050\uffa8\051\uffa8\055\uffa8\065\uffa8" +
    "\072\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\101\uffa8\103" +
    "\uffa8\105\uffa8\106\uffa8\107\uffa8\110\uffa8\112\uffa8\113\uffa8" +
    "\114\uffa8\115\uffa8\116\uffa8\001\002\000\004\116\357\001" +
    "\002\000\004\116\353\001\002\000\046\005\uff72\006\uff72" +
    "\010\uff72\011\uff72\012\uff72\014\354\024\uff72\025\uff72\026" +
    "\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033\uff72\034\uff72" +
    "\035\uff72\041\uff72\102\uff72\001\002\000\042\014\134\015" +
    "\uff93\033\141\036\136\043\130\044\127\050\120\065\132" +
    "\072\137\076\135\105\125\106\123\113\124\114\121\115" +
    "\126\116\150\001\002\000\004\015\356\001\002\000\004" +
    "\005\uff57\001\002\000\004\014\360\001\002\000\042\014" +
    "\134\015\uff93\033\141\036\136\043\130\044\127\050\120" +
    "\065\132\072\137\076\135\105\125\106\123\113\124\114" +
    "\121\115\126\116\150\001\002\000\004\015\362\001\002" +
    "\000\004\005\uff55\001\002\000\004\014\371\001\002\000" +
    "\006\007\075\115\013\001\002\000\004\014\366\001\002" +
    "\000\042\014\134\015\uff93\033\141\036\136\043\130\044" +
    "\127\050\120\065\132\072\137\076\135\105\125\106\123" +
    "\113\124\114\121\115\126\116\150\001\002\000\004\015" +
    "\370\001\002\000\004\005\uff59\001\002\000\042\014\134" +
    "\015\uff93\033\141\036\136\043\130\044\127\050\120\065" +
    "\132\072\137\076\135\105\125\106\123\113\124\114\121" +
    "\115\126\116\150\001\002\000\004\015\373\001\002\000" +
    "\004\005\uff5a\001\002\000\006\005\375\024\211\001\002" +
    "\000\076\007\uff9f\014\uff9f\017\uff9f\020\uff9f\033\uff9f\036" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\050\uff9f\051\uff9f" +
    "\055\uff9f\065\uff9f\072\uff9f\075\uff9f\076\uff9f\077\uff9f\100" +
    "\uff9f\101\uff9f\103\uff9f\105\uff9f\106\uff9f\107\uff9f\110\uff9f" +
    "\112\uff9f\113\uff9f\114\uff9f\115\uff9f\116\uff9f\001\002\000" +
    "\076\007\uffaf\014\uffaf\017\uffaf\020\uffaf\033\uffaf\036\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\050\uffaf\051\uffaf\055" +
    "\uffaf\065\uffaf\072\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf" +
    "\101\uffaf\103\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf\112" +
    "\uffaf\113\uffaf\114\uffaf\115\uffaf\116\uffaf\001\002\000\004" +
    "\116\u010b\001\002\000\006\007\075\115\013\001\002\000" +
    "\006\064\u0103\116\u0102\001\002\000\004\014\u0104\001\002" +
    "\000\004\005\uff54\001\002\000\042\014\134\015\uff93\033" +
    "\141\036\136\043\130\044\127\050\120\065\132\072\137" +
    "\076\135\105\125\106\123\113\124\114\121\115\126\116" +
    "\150\001\002\000\004\015\u0106\001\002\000\004\005\uff58" +
    "\001\002\000\004\014\u0108\001\002\000\042\014\134\015" +
    "\uff93\033\141\036\136\043\130\044\127\050\120\065\132" +
    "\072\137\076\135\105\125\106\123\113\124\114\121\115" +
    "\126\116\150\001\002\000\004\015\u010a\001\002\000\004" +
    "\005\uff53\001\002\000\004\014\u010c\001\002\000\042\014" +
    "\134\015\uff93\033\141\036\136\043\130\044\127\050\120" +
    "\065\132\072\137\076\135\105\125\106\123\113\124\114" +
    "\121\115\126\116\150\001\002\000\004\015\u010e\001\002" +
    "\000\004\005\uff56\001\002\000\042\014\134\033\141\036" +
    "\136\043\130\044\127\050\120\065\132\072\137\075\341" +
    "\076\135\105\346\106\123\113\124\114\121\115\126\116" +
    "\150\001\002\000\004\005\u0111\001\002\000\076\007\uffab" +
    "\014\uffab\017\uffab\020\uffab\033\uffab\036\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\050\uffab\051\uffab\055\uffab\065\uffab" +
    "\072\uffab\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab\103" +
    "\uffab\105\uffab\106\uffab\107\uffab\110\uffab\112\uffab\113\uffab" +
    "\114\uffab\115\uffab\116\uffab\001\002\000\004\005\u0113\001" +
    "\002\000\076\007\uffac\014\uffac\017\uffac\020\uffac\033\uffac" +
    "\036\uffac\043\uffac\044\uffac\045\uffac\046\uffac\050\uffac\051" +
    "\uffac\055\uffac\065\uffac\072\uffac\075\uffac\076\uffac\077\uffac" +
    "\100\uffac\101\uffac\103\uffac\105\uffac\106\uffac\107\uffac\110" +
    "\uffac\112\uffac\113\uffac\114\uffac\115\uffac\116\uffac\001\002" +
    "\000\076\007\uffa4\014\uffa4\017\uffa4\020\uffa4\033\uffa4\036" +
    "\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\050\uffa4\051\uffa4" +
    "\055\uffa4\065\uffa4\072\uffa4\075\uffa4\076\uffa4\077\uffa4\100" +
    "\uffa4\101\uffa4\103\uffa4\105\uffa4\106\uffa4\107\uffa4\110\uffa4" +
    "\112\uffa4\113\uffa4\114\uffa4\115\uffa4\116\uffa4\001\002\000" +
    "\076\007\uffa5\014\uffa5\017\uffa5\020\uffa5\033\uffa5\036\uffa5" +
    "\043\uffa5\044\uffa5\045\uffa5\046\uffa5\050\uffa5\051\uffa5\055" +
    "\uffa5\065\uffa5\072\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5" +
    "\101\uffa5\103\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5\112" +
    "\uffa5\113\uffa5\114\uffa5\115\uffa5\116\uffa5\001\002\000\004" +
    "\116\u0117\001\002\000\050\005\uff72\006\uff72\010\uff72\011" +
    "\uff72\012\uff72\013\u0118\014\354\024\uff72\025\uff72\026\uff72" +
    "\027\uff72\030\uff72\031\uff72\032\uff72\033\uff72\034\uff72\035" +
    "\uff72\041\uff72\102\uff72\001\002\000\042\014\134\033\141" +
    "\036\136\043\130\044\127\050\120\065\132\072\137\075" +
    "\341\076\135\105\346\106\123\113\124\114\121\115\126" +
    "\116\150\001\002\000\004\005\u011a\001\002\000\076\007" +
    "\uffaa\014\uffaa\017\uffaa\020\uffaa\033\uffaa\036\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\050\uffaa\051\uffaa\055\uffaa\065" +
    "\uffaa\072\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa" +
    "\103\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa\112\uffaa\113" +
    "\uffaa\114\uffaa\115\uffaa\116\uffaa\001\002\000\006\005\u011c" +
    "\024\211\001\002\000\076\007\uffa3\014\uffa3\017\uffa3\020" +
    "\uffa3\033\uffa3\036\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\050\uffa3\051\uffa3\055\uffa3\065\uffa3\072\uffa3\075\uffa3\076" +
    "\uffa3\077\uffa3\100\uffa3\101\uffa3\103\uffa3\105\uffa3\106\uffa3" +
    "\107\uffa3\110\uffa3\112\uffa3\113\uffa3\114\uffa3\115\uffa3\116" +
    "\uffa3\001\002\000\042\005\uff60\006\uff60\010\uff60\011\uff60" +
    "\012\u0125\023\uff60\024\uff60\025\uff60\026\uff60\027\uff60\030" +
    "\uff60\031\uff60\032\uff60\033\uff60\034\uff60\035\uff60\001\002" +
    "\000\006\005\u0122\023\u0123\001\002\000\010\005\uff97\023" +
    "\uff97\024\211\001\002\000\046\005\uff73\006\uff73\010\uff73" +
    "\011\uff73\014\205\022\u0121\023\uff73\024\uff73\025\uff73\026" +
    "\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034\uff73" +
    "\035\uff73\037\204\001\002\000\006\005\uff99\023\uff99\001" +
    "\002\000\076\007\uffa2\014\uffa2\017\uffa2\020\uffa2\033\uffa2" +
    "\036\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\050\uffa2\051" +
    "\uffa2\055\uffa2\065\uffa2\072\uffa2\075\uffa2\076\uffa2\077\uffa2" +
    "\100\uffa2\101\uffa2\103\uffa2\105\uffa2\106\uffa2\107\uffa2\110" +
    "\uffa2\112\uffa2\113\uffa2\114\uffa2\115\uffa2\116\uffa2\001\002" +
    "\000\040\014\134\033\141\036\136\043\130\044\127\050" +
    "\120\065\132\072\137\076\135\105\u011d\106\123\113\124" +
    "\114\121\115\126\116\u0120\001\002\000\006\005\uff96\023" +
    "\u0123\001\002\000\004\116\u0126\001\002\000\042\005\uff72" +
    "\006\uff72\010\uff72\011\uff72\022\u0127\023\uff72\024\uff72\025" +
    "\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033\uff72" +
    "\034\uff72\035\uff72\001\002\000\006\005\uff98\023\uff98\001" +
    "\002\000\006\005\u0129\024\211\001\002\000\076\007\uffa1" +
    "\014\uffa1\017\uffa1\020\uffa1\033\uffa1\036\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\050\uffa1\051\uffa1\055\uffa1\065\uffa1" +
    "\072\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101\uffa1\103" +
    "\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1\112\uffa1\113\uffa1" +
    "\114\uffa1\115\uffa1\116\uffa1\001\002\000\004\051\u012b\001" +
    "\002\000\004\017\u012c\001\002\000\030\007\uff9d\020\uff9d" +
    "\043\uff9d\044\uff9d\076\uff9d\105\uff9d\106\uff9d\113\uff9d\114" +
    "\uff9d\115\uff9d\116\uff9d\001\002\000\030\007\260\020\u0130" +
    "\043\130\044\127\076\135\105\265\106\123\113\124\114" +
    "\121\115\261\116\263\001\002\000\030\007\uff9c\020\uff9c" +
    "\043\uff9c\044\uff9c\076\uff9c\105\uff9c\106\uff9c\113\uff9c\114" +
    "\uff9c\115\uff9c\116\uff9c\001\002\000\004\021\u0134\001\002" +
    "\000\100\007\uff9a\014\uff9a\017\uff9a\020\uff9a\033\uff9a\036" +
    "\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\050\uff9a\051\uff9a" +
    "\055\uff9a\062\u0131\065\uff9a\072\uff9a\075\uff9a\076\uff9a\077" +
    "\uff9a\100\uff9a\101\uff9a\103\uff9a\105\uff9a\106\uff9a\107\uff9a" +
    "\110\uff9a\112\uff9a\113\uff9a\114\uff9a\115\uff9a\116\uff9a\001" +
    "\002\000\070\007\075\014\134\017\320\033\141\036\136" +
    "\043\130\044\127\045\327\046\326\050\120\065\316\072" +
    "\137\075\341\076\135\077\337\100\333\101\332\103\331" +
    "\105\330\106\123\107\325\110\323\112\321\113\124\114" +
    "\121\115\126\116\334\001\002\000\076\007\uffa0\014\uffa0" +
    "\017\uffa0\020\uffa0\033\uffa0\036\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\046\uffa0\050\uffa0\051\uffa0\055\uffa0\065\uffa0\072\uffa0" +
    "\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0\103\uffa0\105" +
    "\uffa0\106\uffa0\107\uffa0\110\uffa0\112\uffa0\113\uffa0\114\uffa0" +
    "\115\uffa0\116\uffa0\001\002\000\076\007\uff9b\014\uff9b\017" +
    "\uff9b\020\uff9b\033\uff9b\036\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\050\uff9b\051\uff9b\055\uff9b\065\uff9b\072\uff9b\075" +
    "\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b\103\uff9b\105\uff9b" +
    "\106\uff9b\107\uff9b\110\uff9b\112\uff9b\113\uff9b\114\uff9b\115" +
    "\uff9b\116\uff9b\001\002\000\070\007\075\014\134\017\320" +
    "\033\141\036\136\043\130\044\127\045\327\046\326\050" +
    "\120\065\316\072\137\075\341\076\135\077\337\100\333" +
    "\101\332\103\331\105\330\106\123\107\325\110\323\112" +
    "\321\113\124\114\121\115\126\116\334\001\002\000\030" +
    "\007\uff9e\020\uff9e\043\uff9e\044\uff9e\076\uff9e\105\uff9e\106" +
    "\uff9e\113\uff9e\114\uff9e\115\uff9e\116\uff9e\001\002\000\040" +
    "\014\134\033\141\036\136\043\130\044\127\050\120\065" +
    "\132\072\137\076\135\105\125\106\123\113\124\114\121" +
    "\115\126\116\150\001\002\000\006\015\u0138\024\211\001" +
    "\002\000\070\007\075\014\134\017\320\033\141\036\136" +
    "\043\130\044\127\045\327\046\326\050\120\065\316\072" +
    "\137\075\341\076\135\077\337\100\333\101\332\103\331" +
    "\105\330\106\123\107\325\110\323\112\321\113\124\114" +
    "\121\115\126\116\334\001\002\000\076\007\uffad\014\uffad" +
    "\017\uffad\020\uffad\033\uffad\036\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\050\uffad\051\uffad\055\uffad\065\uffad\072\uffad" +
    "\075\uffad\076\uffad\077\uffad\100\uffad\101\uffad\103\uffad\105" +
    "\uffad\106\uffad\107\uffad\110\uffad\112\uffad\113\uffad\114\uffad" +
    "\115\uffad\116\uffad\001\002\000\072\007\075\014\134\017" +
    "\320\020\u013b\033\141\036\136\043\130\044\127\045\327" +
    "\046\326\050\120\065\316\072\137\075\341\076\135\077" +
    "\337\100\333\101\332\103\331\105\330\106\123\107\325" +
    "\110\323\112\321\113\124\114\121\115\126\116\334\001" +
    "\002\000\076\007\uffae\014\uffae\017\uffae\020\uffae\033\uffae" +
    "\036\uffae\043\uffae\044\uffae\045\uffae\046\uffae\050\uffae\051" +
    "\uffae\055\uffae\065\uffae\072\uffae\075\uffae\076\uffae\077\uffae" +
    "\100\uffae\101\uffae\103\uffae\105\uffae\106\uffae\107\uffae\110" +
    "\uffae\112\uffae\113\uffae\114\uffae\115\uffae\116\uffae\001\002" +
    "\000\040\014\134\033\141\036\136\043\130\044\127\050" +
    "\120\065\132\072\137\076\135\105\125\106\123\113\124" +
    "\114\121\115\126\116\150\001\002\000\006\015\u013e\024" +
    "\211\001\002\000\122\006\uff6d\007\075\010\uff6d\011\uff6d" +
    "\014\134\017\320\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030" +
    "\uff6d\031\uff6d\032\uff6d\033\141\034\uff6d\035\uff6d\036\136" +
    "\043\130\044\127\045\327\046\326\050\120\065\316\072" +
    "\137\075\341\076\135\077\337\100\333\101\332\103\331" +
    "\104\uff6d\105\330\106\123\107\325\110\323\112\321\113" +
    "\124\114\121\115\126\116\334\001\002\000\076\007\uffa7" +
    "\014\uffa7\017\uffa7\020\uffa7\033\uffa7\036\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\050\uffa7\051\uffa7\055\u0140\065\uffa7" +
    "\072\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7\103" +
    "\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7\112\uffa7\113\uffa7" +
    "\114\uffa7\115\uffa7\116\uffa7\001\002\000\070\007\075\014" +
    "\134\017\320\033\141\036\136\043\130\044\127\045\327" +
    "\046\326\050\120\065\316\072\137\075\341\076\135\077" +
    "\337\100\333\101\332\103\331\105\330\106\123\107\325" +
    "\110\323\112\321\113\124\114\121\115\126\116\334\001" +
    "\002\000\076\007\uffa6\014\uffa6\017\uffa6\020\uffa6\033\uffa6" +
    "\036\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\050\uffa6\051" +
    "\uffa6\055\uffa6\065\uffa6\072\uffa6\075\uffa6\076\uffa6\077\uffa6" +
    "\100\uffa6\101\uffa6\103\uffa6\105\uffa6\106\uffa6\107\uffa6\110" +
    "\uffa6\112\uffa6\113\uffa6\114\uffa6\115\uffa6\116\uffa6\001\002" +
    "\000\006\010\u0143\013\u0144\001\002\000\004\115\303\001" +
    "\002\000\004\115\u0146\001\002\000\006\005\uffc4\016\u0151" +
    "\001\002\000\010\005\uffcd\014\u0149\016\uffcd\001\002\000" +
    "\004\005\u0148\001\002\000\026\002\uffd7\017\uffd7\037\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\056\uffd7\071\uffd7\074\uffd7\111" +
    "\uffd7\001\002\000\010\007\075\015\uffc9\115\013\001\002" +
    "\000\004\015\u0150\001\002\000\010\004\uffcb\015\uffcb\116" +
    "\u014f\001\002\000\006\004\u014d\015\uffc8\001\002\000\010" +
    "\007\075\015\uffc9\115\013\001\002\000\004\015\uffc7\001" +
    "\002\000\006\004\uffca\015\uffca\001\002\000\006\005\uffcc" +
    "\016\uffcc\001\002\000\004\115\u0146\001\002\000\004\005" +
    "\uffc3\001\002\000\004\011\u0154\001\002\000\004\013\u0155" +
    "\001\002\000\004\115\u0146\001\002\000\004\005\u0157\001" +
    "\002\000\026\002\uffd6\017\uffd6\037\uffd6\052\uffd6\053\uffd6" +
    "\054\uffd6\056\uffd6\071\uffd6\074\uffd6\111\uffd6\001\002\000" +
    "\006\010\u0159\013\u015a\001\002\000\004\115\303\001\002" +
    "\000\006\007\075\115\013\001\002\000\004\005\u015c\001" +
    "\002\000\026\002\uffda\017\uffda\037\uffda\052\uffda\053\uffda" +
    "\054\uffda\056\uffda\071\uffda\074\uffda\111\uffda\001\002\000" +
    "\004\011\u015e\001\002\000\004\013\u015f\001\002\000\006" +
    "\007\075\115\013\001\002\000\004\005\u0161\001\002\000" +
    "\026\002\uffd9\017\uffd9\037\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\056\uffd9\071\uffd9\074\uffd9\111\uffd9\001\002\000\004\005" +
    "\u0163\001\002\000\026\002\uffd8\017\uffd8\037\uffd8\052\uffd8" +
    "\053\uffd8\054\uffd8\056\uffd8\071\uffd8\074\uffd8\111\uffd8\001" +
    "\002\000\006\024\211\040\u0169\001\002\000\040\006\uff6e" +
    "\010\uff6e\011\uff6e\024\uff6e\025\uff6e\026\uff6e\027\uff6e\030" +
    "\uff6e\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\040\uff6e" +
    "\042\u0166\001\002\000\020\043\130\044\127\076\135\105" +
    "\265\106\123\113\124\114\121\001\002\000\004\040\u0168" +
    "\001\002\000\006\052\uff50\071\uff50\001\002\000\006\052" +
    "\uff51\071\uff51\001\002\000\004\115\u0196\001\002\000\004" +
    "\115\u016c\001\002\000\010\014\u016d\017\u016f\066\u016e\001" +
    "\002\000\010\007\075\015\uffb5\115\013\001\002\000\004" +
    "\115\013\001\002\000\012\007\uffba\017\uffba\020\uffba\115" +
    "\uffba\001\002\000\012\007\075\017\073\020\uffb6\115\013" +
    "\001\002\000\004\116\u0176\001\002\000\010\007\uffba\020" +
    "\uffba\115\uffba\001\002\000\012\007\uffb9\017\uffb9\020\uffb9" +
    "\115\uffb9\001\002\000\010\007\075\020\u0175\115\013\001" +
    "\002\000\026\002\uffd1\017\uffd1\037\uffd1\052\uffd1\053\uffd1" +
    "\054\uffd1\056\uffd1\071\uffd1\074\uffd1\111\uffd1\001\002\000" +
    "\010\005\u0177\013\u0179\014\u0178\001\002\000\012\007\uffbd" +
    "\017\uffbd\020\uffbd\115\uffbd\001\002\000\010\007\075\015" +
    "\uffb5\115\013\001\002\000\040\014\134\033\141\036\136" +
    "\043\130\044\127\050\120\065\132\072\137\076\135\105" +
    "\125\106\123\113\124\114\121\115\126\116\150\001\002" +
    "\000\006\005\u017b\024\211\001\002\000\012\007\uffbc\017" +
    "\uffbc\020\uffbc\115\uffbc\001\002\000\004\015\u017d\001\002" +
    "\000\004\017\073\001\002\000\012\007\uffbb\017\uffbb\020" +
    "\uffbb\115\uffbb\001\002\000\004\017\u0183\001\002\000\006" +
    "\004\u0181\017\uffe6\001\002\000\004\115\013\001\002\000" +
    "\004\017\uffe5\001\002\000\012\007\uffba\017\uffba\020\uffba" +
    "\115\uffba\001\002\000\012\007\075\017\073\020\uffb6\115" +
    "\013\001\002\000\010\007\uffba\020\uffba\115\uffba\001\002" +
    "\000\010\007\075\020\u0187\115\013\001\002\000\026\002" +
    "\uffcf\017\uffcf\037\uffcf\052\uffcf\053\uffcf\054\uffcf\056\uffcf" +
    "\071\uffcf\074\uffcf\111\uffcf\001\002\000\004\015\u0189\001" +
    "\002\000\006\017\u018b\066\u018a\001\002\000\004\115\013" +
    "\001\002\000\012\007\uffba\017\uffba\020\uffba\115\uffba\001" +
    "\002\000\012\007\075\017\073\020\uffb6\115\013\001\002" +
    "\000\010\007\uffba\020\uffba\115\uffba\001\002\000\010\007" +
    "\075\020\u018f\115\013\001\002\000\026\002\uffd0\017\uffd0" +
    "\037\uffd0\052\uffd0\053\uffd0\054\uffd0\056\uffd0\071\uffd0\074" +
    "\uffd0\111\uffd0\001\002\000\004\017\u0191\001\002\000\012" +
    "\007\uffba\017\uffba\020\uffba\115\uffba\001\002\000\012\007" +
    "\075\017\073\020\uffb6\115\013\001\002\000\010\007\uffba" +
    "\020\uffba\115\uffba\001\002\000\010\007\075\020\u0195\115" +
    "\013\001\002\000\026\002\uffce\017\uffce\037\uffce\052\uffce" +
    "\053\uffce\054\uffce\056\uffce\071\uffce\074\uffce\111\uffce\001" +
    "\002\000\006\017\u0198\060\u0197\001\002\000\004\115\013" +
    "\001\002\000\010\007\uffbf\020\uffbf\115\uffbf\001\002\000" +
    "\010\007\075\020\u019c\115\013\001\002\000\004\005\u01a1" +
    "\001\002\000\004\116\u019d\001\002\000\026\002\uffd3\017" +
    "\uffd3\037\uffd3\052\uffd3\053\uffd3\054\uffd3\056\uffd3\071\uffd3" +
    "\074\uffd3\111\uffd3\001\002\000\004\014\u019e\001\002\000" +
    "\010\007\075\015\uffb5\115\013\001\002\000\004\015\u01a0" +
    "\001\002\000\004\005\uffc0\001\002\000\010\007\uffbe\020" +
    "\uffbe\115\uffbe\001\002\000\004\017\u01a3\001\002\000\010" +
    "\007\uffbf\020\uffbf\115\uffbf\001\002\000\010\007\075\020" +
    "\u01a5\115\013\001\002\000\026\002\uffd2\017\uffd2\037\uffd2" +
    "\052\uffd2\053\uffd2\054\uffd2\056\uffd2\071\uffd2\074\uffd2\111" +
    "\uffd2\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a4\000\006\004\003\005\004\001\001\000\002\001" +
    "\001\000\004\006\006\001\001\000\010\017\010\020\011" +
    "\021\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\011\021\014\001\001\000\002\001\001\000\004\010" +
    "\016\001\001\000\006\007\021\012\017\001\001\000\010" +
    "\011\040\013\041\025\037\001\001\000\006\002\025\003" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\025\003\031\001\001" +
    "\000\002\001\001\000\010\017\033\020\011\021\007\001" +
    "\001\000\002\001\001\000\010\017\035\020\011\021\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\062\041\064\042\066\073\063\001\001\000\002\001\001" +
    "\000\014\002\025\003\044\022\043\023\050\024\046\001" +
    "\001\000\002\001\001\000\004\002\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\050\024\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\055\020" +
    "\011\021\007\001\001\000\002\001\001\000\010\017\057" +
    "\020\011\021\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\017\132\020\011\021\007\022" +
    "\130\023\050\024\046\055\u0163\056\152\057\151\060\150" +
    "\061\145\062\144\063\142\064\141\071\u0164\001\001\000" +
    "\002\001\001\000\004\027\u0161\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\314\001\001\000\012\014" +
    "\075\017\076\020\011\021\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\100\015" +
    "\101\017\076\020\011\021\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\100\015" +
    "\104\017\076\020\011\021\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\301\001\001\000\016\014" +
    "\110\017\076\020\011\021\007\043\111\044\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\110\017\076\020\011\021\007\043\114\044\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\017" +
    "\132\020\011\021\007\022\130\023\050\024\046\034\146" +
    "\055\137\056\152\057\151\060\150\061\145\062\144\063" +
    "\142\064\141\071\143\001\001\000\040\017\132\020\011" +
    "\021\007\022\130\023\050\024\046\055\253\056\152\057" +
    "\151\060\150\061\145\062\144\063\142\064\141\071\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\017\132\020\011\021\007\022\130\023\050\024\046" +
    "\055\235\056\152\057\151\060\150\061\145\062\144\063" +
    "\142\064\141\071\143\001\001\000\002\001\001\000\040" +
    "\017\132\020\011\021\007\022\130\023\050\024\046\055" +
    "\230\056\152\057\151\060\150\061\145\062\144\063\142" +
    "\064\141\071\143\001\001\000\002\001\001\000\024\017" +
    "\132\020\011\021\007\022\130\023\050\024\046\063\227" +
    "\064\141\071\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\017\132\020\011\021\007\022\130\023\050" +
    "\024\046\063\217\064\141\071\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\017\132\020\011\021\007\022\130\023\050\024\046\057" +
    "\154\060\150\061\145\062\144\063\142\064\141\071\143" +
    "\001\001\000\002\001\001\000\032\017\132\020\011\021" +
    "\007\022\130\023\050\024\046\060\202\061\145\062\144" +
    "\063\142\064\141\071\143\001\001\000\032\017\132\020" +
    "\011\021\007\022\130\023\050\024\046\060\157\061\145" +
    "\062\144\063\142\064\141\071\143\001\001\000\002\001" +
    "\001\000\030\017\132\020\011\021\007\022\130\023\050" +
    "\024\046\061\201\062\144\063\142\064\141\071\143\001" +
    "\001\000\030\017\132\020\011\021\007\022\130\023\050" +
    "\024\046\061\200\062\144\063\142\064\141\071\143\001" +
    "\001\000\030\017\132\020\011\021\007\022\130\023\050" +
    "\024\046\061\177\062\144\063\142\064\141\071\143\001" +
    "\001\000\030\017\132\020\011\021\007\022\130\023\050" +
    "\024\046\061\164\062\144\063\142\064\141\071\143\001" +
    "\001\000\002\001\001\000\026\017\132\020\011\021\007" +
    "\022\130\023\050\024\046\062\176\063\142\064\141\071" +
    "\143\001\001\000\026\017\132\020\011\021\007\022\130" +
    "\023\050\024\046\062\167\063\142\064\141\071\143\001" +
    "\001\000\002\001\001\000\024\017\132\020\011\021\007" +
    "\022\130\023\050\024\046\063\175\064\141\071\143\001" +
    "\001\000\024\017\132\020\011\021\007\022\130\023\050" +
    "\024\046\063\174\064\141\071\143\001\001\000\024\017" +
    "\132\020\011\021\007\022\130\023\050\024\046\063\173" +
    "\064\141\071\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\017\132\020\011\021\007\022\130\023\050\024\046" +
    "\054\214\055\206\056\152\057\151\060\150\061\145\062" +
    "\144\063\142\064\141\071\143\001\001\000\042\017\132" +
    "\020\011\021\007\022\130\023\050\024\046\054\205\055" +
    "\206\056\152\057\151\060\150\061\145\062\144\063\142" +
    "\064\141\071\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\017\132\020\011\021\007\022\130\023\050" +
    "\024\046\054\212\055\206\056\152\057\151\060\150\061" +
    "\145\062\144\063\142\064\141\071\143\001\001\000\036" +
    "\017\132\020\011\021\007\022\130\023\050\024\046\056" +
    "\211\057\151\060\150\061\145\062\144\063\142\064\141" +
    "\071\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\014\110\017\076\020" +
    "\011\021\007\044\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\017\132\020\011\021\007\022\130\023" +
    "\050\024\046\055\224\056\152\057\151\060\150\061\145" +
    "\062\144\063\142\064\141\071\143\001\001\000\002\001" +
    "\001\000\040\017\132\020\011\021\007\022\130\023\050" +
    "\024\046\055\226\056\152\057\151\060\150\061\145\062" +
    "\144\063\142\064\141\071\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\017\132\020\011\021\007\022\130\023\050\024\046" +
    "\054\233\055\206\056\152\057\151\060\150\061\145\062" +
    "\144\063\142\064\141\071\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\017\132\020" +
    "\011\021\007\022\130\023\050\024\046\055\237\056\152" +
    "\057\151\060\150\061\145\062\144\063\142\064\141\071" +
    "\143\001\001\000\002\001\001\000\040\017\132\020\011" +
    "\021\007\022\130\023\050\024\046\055\241\056\152\057" +
    "\151\060\150\061\145\062\144\063\142\064\141\071\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\017" +
    "\132\020\011\021\007\022\130\023\050\024\046\054\247" +
    "\055\206\056\152\057\151\060\150\061\145\062\144\063" +
    "\142\064\141\071\143\001\001\000\042\017\132\020\011" +
    "\021\007\022\130\023\050\024\046\054\245\055\206\056" +
    "\152\057\151\060\150\061\145\062\144\063\142\064\141" +
    "\071\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\065\263\066\255\070" +
    "\261\071\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\065\263\066\266\070\261\071\256\001\001\000\002\001" +
    "\001\000\040\017\132\020\011\021\007\022\130\023\050" +
    "\024\046\055\270\056\152\057\151\060\150\061\145\062" +
    "\144\063\142\064\141\071\143\001\001\000\002\001\001" +
    "\000\010\067\273\070\272\071\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\067\276" +
    "\070\272\071\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\110\017\076\020\011\021\007\043\307" +
    "\044\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\017\132\020\011\021\007\022\130\023\050\024\046" +
    "\034\312\055\137\056\152\057\151\060\150\061\145\062" +
    "\144\063\142\064\141\071\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\014\341\017\337\020\011\021" +
    "\007\022\130\023\050\024\046\046\323\053\335\055\334" +
    "\056\152\057\151\060\150\061\145\062\144\063\142\064" +
    "\141\071\143\072\321\001\001\000\040\017\132\020\011" +
    "\021\007\022\130\023\050\024\046\055\235\056\152\057" +
    "\151\060\150\061\145\062\144\063\142\064\141\071\143" +
    "\001\001\000\002\001\001\000\004\045\u0139\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\014\341\017\337" +
    "\020\011\021\007\022\130\023\050\024\046\046\u0129\053" +
    "\335\055\334\056\152\057\151\060\150\061\145\062\144" +
    "\063\142\064\141\071\143\072\321\001\001\000\002\001" +
    "\001\000\040\017\132\020\011\021\007\022\130\023\050" +
    "\024\046\055\u0127\056\152\057\151\060\150\061\145\062" +
    "\144\063\142\064\141\071\143\001\001\000\042\017\132" +
    "\020\011\021\007\022\130\023\050\024\046\052\u011d\055" +
    "\u011e\056\152\057\151\060\150\061\145\062\144\063\142" +
    "\064\141\071\143\001\001\000\040\017\132\020\011\021" +
    "\007\022\130\023\050\024\046\055\u011a\056\152\057\151" +
    "\060\150\061\145\062\144\063\142\064\141\071\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\017\132\020\011\021\007\022\130\023\050\024" +
    "\046\053\u0111\055\334\056\152\057\151\060\150\061\145" +
    "\062\144\063\142\064\141\071\143\072\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\017\132\020\011\021\007\022\130\023\050\024\046\055" +
    "\373\056\152\057\151\060\150\061\145\062\144\063\142" +
    "\064\141\071\143\001\001\000\002\001\001\000\012\014" +
    "\362\017\076\020\011\021\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\017\132\020" +
    "\011\021\007\022\130\023\050\024\046\053\346\055\334" +
    "\056\152\057\151\060\150\061\145\062\144\063\142\064" +
    "\141\071\143\072\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\017\132\020\011\021\007" +
    "\022\130\023\050\024\046\054\354\055\206\056\152\057" +
    "\151\060\150\061\145\062\144\063\142\064\141\071\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\017\132\020\011\021\007\022\130\023\050" +
    "\024\046\054\360\055\206\056\152\057\151\060\150\061" +
    "\145\062\144\063\142\064\141\071\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\364\017\076\020\011\021\007\001\001\000\002\001\001" +
    "\000\042\017\132\020\011\021\007\022\130\023\050\024" +
    "\046\054\366\055\206\056\152\057\151\060\150\061\145" +
    "\062\144\063\142\064\141\071\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\017\132\020\011\021\007" +
    "\022\130\023\050\024\046\054\371\055\206\056\152\057" +
    "\151\060\150\061\145\062\144\063\142\064\141\071\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\u0106\017\076\020\011\021\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\017\132\020\011\021\007\022\130\023\050\024\046\054" +
    "\u0104\055\206\056\152\057\151\060\150\061\145\062\144" +
    "\063\142\064\141\071\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\017\132\020\011" +
    "\021\007\022\130\023\050\024\046\054\u0108\055\206\056" +
    "\152\057\151\060\150\061\145\062\144\063\142\064\141" +
    "\071\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\017\132\020\011\021\007\022\130" +
    "\023\050\024\046\054\u010c\055\206\056\152\057\151\060" +
    "\150\061\145\062\144\063\142\064\141\071\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\017\132\020" +
    "\011\021\007\022\130\023\050\024\046\053\u010f\055\334" +
    "\056\152\057\151\060\150\061\145\062\144\063\142\064" +
    "\141\071\143\072\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\017\132\020\011\021\007\022\130\023\050\024" +
    "\046\053\u0118\055\334\056\152\057\151\060\150\061\145" +
    "\062\144\063\142\064\141\071\143\072\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\017\132\020\011\021\007\022\130\023\050\024" +
    "\046\052\u0123\055\u011e\056\152\057\151\060\150\061\145" +
    "\062\144\063\142\064\141\071\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\u012c\001\001\000\010\047\u012d" +
    "\070\u012e\071\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\u0131\001\001\000\050\014\341\017\337" +
    "\020\011\021\007\022\130\023\050\024\046\046\u0132\053" +
    "\335\055\334\056\152\057\151\060\150\061\145\062\144" +
    "\063\142\064\141\071\143\072\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\014\341\017\337\020\011" +
    "\021\007\022\130\023\050\024\046\046\u0134\053\335\055" +
    "\334\056\152\057\151\060\150\061\145\062\144\063\142" +
    "\064\141\071\143\072\321\001\001\000\002\001\001\000" +
    "\040\017\132\020\011\021\007\022\130\023\050\024\046" +
    "\055\u0136\056\152\057\151\060\150\061\145\062\144\063" +
    "\142\064\141\071\143\001\001\000\002\001\001\000\050" +
    "\014\341\017\337\020\011\021\007\022\130\023\050\024" +
    "\046\046\u0138\053\335\055\334\056\152\057\151\060\150" +
    "\061\145\062\144\063\142\064\141\071\143\072\321\001" +
    "\001\000\002\001\001\000\050\014\341\017\337\020\011" +
    "\021\007\022\130\023\050\024\046\046\323\053\335\055" +
    "\334\056\152\057\151\060\150\061\145\062\144\063\142" +
    "\064\141\071\143\072\321\001\001\000\002\001\001\000" +
    "\040\017\132\020\011\021\007\022\130\023\050\024\046" +
    "\055\u013c\056\152\057\151\060\150\061\145\062\144\063" +
    "\142\064\141\071\143\001\001\000\002\001\001\000\050" +
    "\014\341\017\337\020\011\021\007\022\130\023\050\024" +
    "\046\046\u013e\053\335\055\334\056\152\057\151\060\150" +
    "\061\145\062\144\063\142\064\141\071\143\072\321\001" +
    "\001\000\002\001\001\000\050\014\341\017\337\020\011" +
    "\021\007\022\130\023\050\024\046\046\u0140\053\335\055" +
    "\334\056\152\057\151\060\150\061\145\062\144\063\142" +
    "\064\141\071\143\072\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u0152\001\001\000\006\027\u0144" +
    "\033\u0146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\014\u014a\017\076" +
    "\020\011\021\007\030\u014b\031\u0149\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\u014a" +
    "\017\076\020\011\021\007\030\u014b\031\u014d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\u0144\033\u0151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\u0144\033\u0155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u015c\001\001\000\012\014\u015a\017\076\020\011" +
    "\021\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\u015f\017\076" +
    "\020\011\021\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\071\u0166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\110\017" +
    "\076\020\011\021\007\043\u0187\044\112\001\001\000\012" +
    "\016\u017e\017\u017f\020\011\021\007\001\001\000\004\040" +
    "\u016f\001\001\000\020\014\u0170\017\076\020\011\021\007" +
    "\037\u0172\041\064\042\u0171\001\001\000\002\001\001\000" +
    "\004\040\u0173\001\001\000\002\001\001\000\014\014\u0170" +
    "\017\076\020\011\021\007\037\u0172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\110" +
    "\017\076\020\011\021\007\043\u017b\044\112\001\001\000" +
    "\040\017\132\020\011\021\007\022\130\023\050\024\046" +
    "\055\u0179\056\152\057\151\060\150\061\145\062\144\063" +
    "\142\064\141\071\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\u017d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\u0181\017\u017f\020\011\021\007\001\001\000\002\001" +
    "\001\000\004\040\u0183\001\001\000\020\014\u0170\017\076" +
    "\020\011\021\007\037\u0172\041\064\042\u0184\001\001\000" +
    "\004\040\u0185\001\001\000\014\014\u0170\017\076\020\011" +
    "\021\007\037\u0172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\u018f\017\u017f\020\011" +
    "\021\007\001\001\000\004\040\u018b\001\001\000\020\014" +
    "\u0170\017\076\020\011\021\007\037\u0172\041\064\042\u018c" +
    "\001\001\000\004\040\u018d\001\001\000\014\014\u0170\017" +
    "\076\020\011\021\007\037\u0172\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u0191\001\001\000\020\014" +
    "\u0170\017\076\020\011\021\007\037\u0172\041\064\042\u0192" +
    "\001\001\000\004\040\u0193\001\001\000\014\014\u0170\017" +
    "\076\020\011\021\007\037\u0172\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\u01a1\017\u017f\020\011\021" +
    "\007\001\001\000\004\036\u0198\001\001\000\014\014\u019a" +
    "\017\076\020\011\021\007\035\u0199\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\110\017\076\020\011\021\007\043\u019e\044" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\u01a3\001\001\000" +
    "\014\014\u019a\017\076\020\011\021\007\035\u0199\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public bnfc.abs.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (bnfc.abs.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ListAnnType ::= AnnType _SYMB_0 ListAnnType 
            {
              bnfc.abs.Absyn.ListAnnType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.AnnType p_1 = (bnfc.abs.Absyn.AnnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListAnnType p_3 = (bnfc.abs.Absyn.ListAnnType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnnType",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ListAnnType ::= AnnType 
            {
              bnfc.abs.Absyn.ListAnnType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.AnnType p_1 = (bnfc.abs.Absyn.AnnType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListAnnType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnnType",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ListAnnType ::= 
            {
              bnfc.abs.Absyn.ListAnnType RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListAnnType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnnType",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // AnnType ::= ListAnn Type 
            {
              bnfc.abs.Absyn.AnnType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListAnn p_1 = (bnfc.abs.Absyn.ListAnn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Type p_2 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.AnnTyp(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AnnType",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ListAnnDecl ::= ListAnnDecl AnnDecl 
            {
              bnfc.abs.Absyn.ListAnnDecl RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListAnnDecl p_1 = (bnfc.abs.Absyn.ListAnnDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.AnnDecl p_2 = (bnfc.abs.Absyn.AnnDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnnDecl",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ListAnnDecl ::= 
            {
              bnfc.abs.Absyn.ListAnnDecl RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListAnnDecl(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnnDecl",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // AnnDecl ::= ListAnn Decl 
            {
              bnfc.abs.Absyn.AnnDecl RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListAnn p_1 = (bnfc.abs.Absyn.ListAnn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Decl p_2 = (bnfc.abs.Absyn.Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.AnnDec(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AnnDecl",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ListAnn ::= ListAnn Ann 
            {
              bnfc.abs.Absyn.ListAnn RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListAnn p_1 = (bnfc.abs.Absyn.ListAnn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Ann p_2 = (bnfc.abs.Absyn.Ann)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnn",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ListAnn ::= 
            {
              bnfc.abs.Absyn.ListAnn RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListAnn(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnn",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Ann ::= _SYMB_27 Literal _SYMB_30 Literal _SYMB_28 
            {
              bnfc.abs.Absyn.Ann RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.Literal p_2 = (bnfc.abs.Absyn.Literal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Literal p_4 = (bnfc.abs.Absyn.Literal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.MappedAnn(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ann",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Ann ::= _SYMB_27 PureExp _SYMB_28 
            {
              bnfc.abs.Absyn.Ann RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SimpleAnn(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ann",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Ann ::= 
            {
              bnfc.abs.Absyn.Ann RESULT =null;
		 RESULT = new bnfc.abs.Absyn.NoAnn(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ann",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // EffExp ::= PureExp _SYMB_62 Type _SYMB_8 ListPureExp _SYMB_9 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.Type p_3 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_5 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.Spawns(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // EffExp ::= PureExp _SYMB_6 _SYMB_48 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new bnfc.abs.Absyn.Get(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EffExp ::= _SYMB_65 _SYMB_29 LIdent _SYMB_8 ListPureExp _SYMB_9 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_5 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ThisAsyncMethCall(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EffExp ::= PureExp _SYMB_29 LIdent _SYMB_8 ListPureExp _SYMB_9 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_5 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.AsyncMethCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EffExp ::= _SYMB_65 _SYMB_6 LIdent _SYMB_8 ListPureExp _SYMB_9 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_5 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ThisSyncMethCall(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EffExp ::= PureExp _SYMB_6 LIdent _SYMB_8 ListPureExp _SYMB_9 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_5 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SyncMethCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EffExp ::= _SYMB_57 _SYMB_55 Type _SYMB_8 ListPureExp _SYMB_9 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.Type p_3 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_5 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.NewLocal(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EffExp ::= _SYMB_57 Type _SYMB_8 ListPureExp _SYMB_9 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.Type p_2 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_4 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.New(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Literal ::= _SYMB_32 
            {
              bnfc.abs.Absyn.Literal RESULT =null;
		 RESULT = new bnfc.abs.Absyn.LTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Literal ::= _SYMB_31 
            {
              bnfc.abs.Absyn.Literal RESULT =null;
		 RESULT = new bnfc.abs.Absyn.LFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Literal ::= _INTEGER_ 
            {
              bnfc.abs.Absyn.Literal RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Long p_1 = (Long)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.LInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Literal ::= _STRING_ 
            {
              bnfc.abs.Absyn.Literal RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.LStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Literal ::= _SYMB_66 
            {
              bnfc.abs.Absyn.Literal RESULT =null;
		 RESULT = new bnfc.abs.Absyn.LThisDC(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Literal ::= _SYMB_65 
            {
              bnfc.abs.Absyn.Literal RESULT =null;
		 RESULT = new bnfc.abs.Absyn.LThis(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Literal ::= _SYMB_58 
            {
              bnfc.abs.Absyn.Literal RESULT =null;
		 RESULT = new bnfc.abs.Absyn.LNull(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Pattern ::= _SYMB_3 
            {
              bnfc.abs.Absyn.Pattern RESULT =null;
		 RESULT = new bnfc.abs.Absyn.PUnderscore(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Pattern ::= UIdent _SYMB_8 ListPattern _SYMB_9 
            {
              bnfc.abs.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPattern p_3 = (bnfc.abs.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.PParamConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Pattern ::= UIdent 
            {
              bnfc.abs.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.PSinglConstr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Pattern ::= Literal 
            {
              bnfc.abs.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Literal p_1 = (bnfc.abs.Absyn.Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.PLit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Pattern ::= LIdent 
            {
              bnfc.abs.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.PIdent(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ListPattern ::= Pattern _SYMB_0 ListPattern 
            {
              bnfc.abs.Absyn.ListPattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.Pattern p_1 = (bnfc.abs.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListPattern p_3 = (bnfc.abs.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ListPattern ::= Pattern 
            {
              bnfc.abs.Absyn.ListPattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Pattern p_1 = (bnfc.abs.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ListPattern ::= 
            {
              bnfc.abs.Absyn.ListPattern RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ListCaseBranch ::= CaseBranch _SYMB_1 ListCaseBranch 
            {
              bnfc.abs.Absyn.ListCaseBranch RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.CaseBranch p_1 = (bnfc.abs.Absyn.CaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListCaseBranch p_3 = (bnfc.abs.Absyn.ListCaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCaseBranch",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ListCaseBranch ::= CaseBranch _SYMB_1 
            {
              bnfc.abs.Absyn.ListCaseBranch RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.CaseBranch p_1 = (bnfc.abs.Absyn.CaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ListCaseBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCaseBranch",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CaseBranch ::= Pattern _SYMB_13 PureExp 
            {
              bnfc.abs.Absyn.CaseBranch RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.Pattern p_1 = (bnfc.abs.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.CaseBranc(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseBranch",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PureExp7 ::= _SYMB_8 PureExp _SYMB_9 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PureExp7 ::= Literal 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Literal p_1 = (bnfc.abs.Absyn.Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ELit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PureExp7 ::= QType _SYMB_8 ListPureExp _SYMB_9 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.QType p_1 = (bnfc.abs.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_3 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.EParamConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PureExp7 ::= QType 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QType p_1 = (bnfc.abs.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ESinglConstr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PureExp7 ::= TType LIdent 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.TType p_1 = (bnfc.abs.Absyn.TType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EQualVar(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PureExp7 ::= _SYMB_65 _SYMB_6 LIdent 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EThis(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PureExp7 ::= LIdent 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PureExp7 ::= TType LIdent _SYMB_27 ListPureExp _SYMB_28 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.TType p_1 = (bnfc.abs.Absyn.TType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_4 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ENaryQualFunCall(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PureExp7 ::= LIdent _SYMB_27 ListPureExp _SYMB_28 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_3 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ENaryFunCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PureExp7 ::= TType LIdent _SYMB_8 ListPureExp _SYMB_9 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.TType p_1 = (bnfc.abs.Absyn.TType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_4 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.EQualFunCall(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PureExp7 ::= LIdent _SYMB_8 ListPureExp _SYMB_9 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_3 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.EFunCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PureExp6 ::= PureExp7 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PureExp6 ::= _SYMB_23 PureExp6 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EIntNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // PureExp6 ::= _SYMB_26 PureExp6 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ELogNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // PureExp5 ::= PureExp6 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PureExp5 ::= PureExp5 _SYMB_25 PureExp6 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EMod(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PureExp5 ::= PureExp5 _SYMB_24 PureExp6 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EDiv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PureExp5 ::= PureExp5 _SYMB_2 PureExp6 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EMul(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PureExp4 ::= PureExp5 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PureExp4 ::= PureExp4 _SYMB_23 PureExp5 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ESub(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PureExp4 ::= PureExp4 _SYMB_22 PureExp5 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EAdd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PureExp3 ::= PureExp4 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PureExp3 ::= PureExp3 _SYMB_21 PureExp4 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EGe(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PureExp3 ::= PureExp3 _SYMB_5 PureExp4 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EGt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PureExp3 ::= PureExp3 _SYMB_20 PureExp4 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ELe(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PureExp3 ::= PureExp3 _SYMB_4 PureExp4 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ELt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PureExp2 ::= PureExp3 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PureExp2 ::= PureExp2 _SYMB_19 PureExp3 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ENeq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PureExp2 ::= PureExp2 _SYMB_18 PureExp3 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PureExp1 ::= PureExp2 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp1",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PureExp1 ::= PureExp1 _SYMB_17 PureExp2 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EAnd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp1",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PureExp ::= _SYMB_36 PureExp _SYMB_11 ListCaseBranch _SYMB_12 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListCaseBranch p_4 = (bnfc.abs.Absyn.ListCaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.Case(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PureExp ::= _SYMB_49 PureExp _SYMB_64 PureExp _SYMB_41 PureExp 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_4 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_6 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PureExp ::= _SYMB_54 _SYMB_8 Param _SYMB_9 _SYMB_7 PureExp _SYMB_52 PureExp 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.Param p_3 = (bnfc.abs.Absyn.Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_6 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_8 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.Let(p_3,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PureExp ::= PureExp1 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PureExp ::= PureExp _SYMB_16 PureExp1 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EOr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ListPureExp ::= PureExp _SYMB_0 ListPureExp 
            {
              bnfc.abs.Absyn.ListPureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListPureExp p_3 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ListPureExp ::= PureExp 
            {
              bnfc.abs.Absyn.ListPureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListPureExp(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ListPureExp ::= 
            {
              bnfc.abs.Absyn.ListPureExp RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListPureExp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Exp ::= EffExp 
            {
              bnfc.abs.Absyn.Exp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.EffExp p_1 = (bnfc.abs.Absyn.EffExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ExpE(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Exp ::= PureExp 
            {
              bnfc.abs.Absyn.Exp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ExpP(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Guard ::= Guard _SYMB_15 Guard 
            {
              bnfc.abs.Absyn.Guard RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.Guard p_1 = (bnfc.abs.Absyn.Guard)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Guard p_3 = (bnfc.abs.Absyn.Guard)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.AndGuard(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Guard ::= PureExp 
            {
              bnfc.abs.Absyn.Guard RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ExpGuard(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Guard ::= _SYMB_65 _SYMB_6 LIdent _SYMB_14 
            {
              bnfc.abs.Absyn.Guard RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.FieldGuard(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Guard ::= LIdent _SYMB_14 
            {
              bnfc.abs.Absyn.Guard RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.VarGuard(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Guard",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // MaybeFinally ::= 
            {
              bnfc.abs.Absyn.MaybeFinally RESULT =null;
		 RESULT = new bnfc.abs.Absyn.NoFinally(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeFinally",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // MaybeFinally ::= _SYMB_46 Stm 
            {
              bnfc.abs.Absyn.MaybeFinally RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Stm p_2 = (bnfc.abs.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.JustFinally(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeFinally",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ListCatchBranch ::= ListCatchBranch CatchBranch 
            {
              bnfc.abs.Absyn.ListCatchBranch RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListCatchBranch p_1 = (bnfc.abs.Absyn.ListCatchBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.CatchBranch p_2 = (bnfc.abs.Absyn.CatchBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCatchBranch",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ListCatchBranch ::= 
            {
              bnfc.abs.Absyn.ListCatchBranch RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListCatchBranch(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCatchBranch",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CatchBranch ::= Pattern _SYMB_13 Stm 
            {
              bnfc.abs.Absyn.CatchBranch RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.Pattern p_1 = (bnfc.abs.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Stm p_3 = (bnfc.abs.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.CatchBranc(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CatchBranch",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Stm ::= _SYMB_59 PureExp _SYMB_1 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SPrint(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Stm ::= _SYMB_68 Stm _SYMB_37 _SYMB_11 ListCatchBranch _SYMB_12 MaybeFinally 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.Stm p_2 = (bnfc.abs.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ListCatchBranch p_5 = (bnfc.abs.Absyn.ListCatchBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.MaybeFinally p_7 = (bnfc.abs.Absyn.MaybeFinally)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.STryCatchFinally(p_2,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Stm ::= _SYMB_67 PureExp _SYMB_1 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SThrow(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Stm ::= _SYMB_34 Guard _SYMB_1 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Guard p_2 = (bnfc.abs.Absyn.Guard)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SAwait(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Stm ::= _SYMB_33 PureExp _SYMB_1 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SAssert(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Stm ::= _SYMB_61 _SYMB_1 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		 RESULT = new bnfc.abs.Absyn.SSkip(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Stm ::= _SYMB_63 _SYMB_1 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		 RESULT = new bnfc.abs.Absyn.SSuspend(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Stm ::= _SYMB_49 _SYMB_8 PureExp _SYMB_9 Stm _SYMB_41 Stm 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.Stm p_5 = (bnfc.abs.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Stm p_7 = (bnfc.abs.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.SIfElse(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Stm ::= _SYMB_49 _SYMB_8 PureExp _SYMB_9 Stm 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Stm p_5 = (bnfc.abs.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.SIf(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Stm ::= Type LIdent _SYMB_7 Exp _SYMB_1 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.Type p_1 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Exp p_4 = (bnfc.abs.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SDecAss(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Stm ::= Type LIdent _SYMB_1 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.Type p_1 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SDec(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Stm ::= _SYMB_65 _SYMB_6 LIdent _SYMB_7 Exp _SYMB_1 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Exp p_5 = (bnfc.abs.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SFieldAss(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Stm ::= LIdent _SYMB_7 Exp _SYMB_1 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Exp p_3 = (bnfc.abs.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SAss(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Stm ::= _SYMB_60 Exp _SYMB_1 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Exp p_2 = (bnfc.abs.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SReturn(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Stm ::= _SYMB_70 _SYMB_8 PureExp _SYMB_9 Stm 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Stm p_5 = (bnfc.abs.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.SWhile(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Stm ::= _SYMB_11 ListStm _SYMB_12 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListStm p_2 = (bnfc.abs.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SBlock(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Stm ::= Exp _SYMB_1 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Exp p_1 = (bnfc.abs.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ListStm ::= ListStm Stm 
            {
              bnfc.abs.Absyn.ListStm RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListStm p_1 = (bnfc.abs.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Stm p_2 = (bnfc.abs.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ListStm ::= 
            {
              bnfc.abs.Absyn.ListStm RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListStm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Param ::= Type LIdent 
            {
              bnfc.abs.Absyn.Param RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Type p_1 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.Par(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Param",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ListParam ::= Param _SYMB_0 ListParam 
            {
              bnfc.abs.Absyn.ListParam RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.Param p_1 = (bnfc.abs.Absyn.Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListParam p_3 = (bnfc.abs.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParam",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ListParam ::= Param 
            {
              bnfc.abs.Absyn.ListParam RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Param p_1 = (bnfc.abs.Absyn.Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListParam(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParam",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ListParam ::= 
            {
              bnfc.abs.Absyn.ListParam RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListParam(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParam",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MaybeBlock ::= 
            {
              bnfc.abs.Absyn.MaybeBlock RESULT =null;
		 RESULT = new bnfc.abs.Absyn.NoBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeBlock",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MaybeBlock ::= Block 
            {
              bnfc.abs.Absyn.MaybeBlock RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Block p_1 = (bnfc.abs.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.JustBlock(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeBlock",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Block ::= _SYMB_11 ListStm _SYMB_12 
            {
              bnfc.abs.Absyn.Block RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListStm p_2 = (bnfc.abs.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.Bloc(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListClassBody ::= ListClassBody ClassBody 
            {
              bnfc.abs.Absyn.ListClassBody RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListClassBody p_1 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ClassBody p_2 = (bnfc.abs.Absyn.ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListClassBody",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListClassBody ::= 
            {
              bnfc.abs.Absyn.ListClassBody RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListClassBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListClassBody",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ClassBody ::= Type LIdent _SYMB_8 ListParam _SYMB_9 Block 
            {
              bnfc.abs.Absyn.ClassBody RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.Type p_1 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ListParam p_4 = (bnfc.abs.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Block p_6 = (bnfc.abs.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.MethClassBody(p_1,p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ClassBody ::= Type LIdent _SYMB_7 PureExp _SYMB_1 
            {
              bnfc.abs.Absyn.ClassBody RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.Type p_1 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.PureExp p_4 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.FieldAssignClassBody(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ClassBody ::= Type LIdent _SYMB_1 
            {
              bnfc.abs.Absyn.ClassBody RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.Type p_1 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.FieldClassBody(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ListMethSignat ::= ListMethSignat MethSignat _SYMB_1 
            {
              bnfc.abs.Absyn.ListMethSignat RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ListMethSignat p_1 = (bnfc.abs.Absyn.ListMethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.MethSignat p_2 = (bnfc.abs.Absyn.MethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListMethSignat",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ListMethSignat ::= 
            {
              bnfc.abs.Absyn.ListMethSignat RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListMethSignat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListMethSignat",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MethSignat ::= Type LIdent _SYMB_8 ListParam _SYMB_9 
            {
              bnfc.abs.Absyn.MethSignat RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.Type p_1 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListParam p_4 = (bnfc.abs.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.MethSig(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethSignat",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FunBody ::= PureExp 
            {
              bnfc.abs.Absyn.FunBody RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.NormalFunBody(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunBody",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FunBody ::= _SYMB_35 
            {
              bnfc.abs.Absyn.FunBody RESULT =null;
		 RESULT = new bnfc.abs.Absyn.BuiltinFunBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunBody",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListConstrIdent ::= ConstrIdent _SYMB_10 ListConstrIdent 
            {
              bnfc.abs.Absyn.ListConstrIdent RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ConstrIdent p_1 = (bnfc.abs.Absyn.ConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListConstrIdent p_3 = (bnfc.abs.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrIdent",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListConstrIdent ::= ConstrIdent 
            {
              bnfc.abs.Absyn.ListConstrIdent RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ConstrIdent p_1 = (bnfc.abs.Absyn.ConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListConstrIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrIdent",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListUIdent ::= UIdent _SYMB_0 ListUIdent 
            {
              bnfc.abs.Absyn.ListUIdent RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListUIdent p_3 = (bnfc.abs.Absyn.ListUIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListUIdent",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListUIdent ::= UIdent 
            {
              bnfc.abs.Absyn.ListUIdent RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListUIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListUIdent",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListConstrType ::= ConstrType _SYMB_0 ListConstrType 
            {
              bnfc.abs.Absyn.ListConstrType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ConstrType p_1 = (bnfc.abs.Absyn.ConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListConstrType p_3 = (bnfc.abs.Absyn.ListConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListConstrType ::= ConstrType 
            {
              bnfc.abs.Absyn.ListConstrType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ConstrType p_1 = (bnfc.abs.Absyn.ConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListConstrType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListConstrType ::= 
            {
              bnfc.abs.Absyn.ListConstrType RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListConstrType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ConstrType ::= Type LIdent 
            {
              bnfc.abs.Absyn.ConstrType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Type p_1 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.RecordConstrType(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrType",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ConstrType ::= Type 
            {
              bnfc.abs.Absyn.ConstrType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Type p_1 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EmptyConstrType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrType",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ConstrIdent ::= UIdent _SYMB_8 ListConstrType _SYMB_9 
            {
              bnfc.abs.Absyn.ConstrIdent RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListConstrType p_3 = (bnfc.abs.Absyn.ListConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ParamConstrIdent(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrIdent",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ConstrIdent ::= UIdent 
            {
              bnfc.abs.Absyn.ConstrIdent RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.SinglConstrIdent(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrIdent",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Decl ::= Ann _SYMB_38 UIdent _SYMB_8 ListParam _SYMB_9 _SYMB_50 ListQType _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		bnfc.abs.Absyn.Ann p_1 = (bnfc.abs.Absyn.Ann)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		bnfc.abs.Absyn.ListParam p_5 = (bnfc.abs.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.ListQType p_8 = (bnfc.abs.Absyn.ListQType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_10left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_10right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.ListClassBody p_10 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.MaybeBlock p_11 = (bnfc.abs.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_12left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_12right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListClassBody p_12 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ClassParamImplements(p_1,p_3,p_5,p_8,p_10,p_11,p_12); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Decl ::= Ann _SYMB_38 UIdent _SYMB_50 ListQType _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		bnfc.abs.Absyn.Ann p_1 = (bnfc.abs.Absyn.Ann)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.ListQType p_5 = (bnfc.abs.Absyn.ListQType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.ListClassBody p_7 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.MaybeBlock p_8 = (bnfc.abs.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListClassBody p_9 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ClassImplements(p_1,p_3,p_5,p_7,p_8,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Decl ::= Ann _SYMB_38 UIdent _SYMB_8 ListParam _SYMB_9 _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		bnfc.abs.Absyn.Ann p_1 = (bnfc.abs.Absyn.Ann)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		bnfc.abs.Absyn.ListParam p_5 = (bnfc.abs.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.ListClassBody p_8 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.MaybeBlock p_9 = (bnfc.abs.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_10left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_10right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListClassBody p_10 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ClassParamDecl(p_1,p_3,p_5,p_8,p_9,p_10); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Decl ::= Ann _SYMB_38 UIdent _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		bnfc.abs.Absyn.Ann p_1 = (bnfc.abs.Absyn.Ann)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.ListClassBody p_5 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.MaybeBlock p_6 = (bnfc.abs.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListClassBody p_7 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ClassDecl(p_1,p_3,p_5,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Decl ::= Ann _SYMB_53 UIdent _SYMB_44 ListQType _SYMB_11 ListMethSignat _SYMB_12 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		bnfc.abs.Absyn.Ann p_1 = (bnfc.abs.Absyn.Ann)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.ListQType p_5 = (bnfc.abs.Absyn.ListQType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListMethSignat p_7 = (bnfc.abs.Absyn.ListMethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ExtendsDecl(p_1,p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Decl ::= Ann _SYMB_53 UIdent _SYMB_11 ListMethSignat _SYMB_12 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.Ann p_1 = (bnfc.abs.Absyn.Ann)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListMethSignat p_5 = (bnfc.abs.Absyn.ListMethSignat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.InterfDecl(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Decl ::= _SYMB_40 Type LIdent _SYMB_4 ListUIdent _SYMB_5 _SYMB_8 ListParam _SYMB_9 _SYMB_7 FunBody _SYMB_1 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		bnfc.abs.Absyn.Type p_2 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		bnfc.abs.Absyn.ListUIdent p_5 = (bnfc.abs.Absyn.ListUIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.ListParam p_8 = (bnfc.abs.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.FunBody p_11 = (bnfc.abs.Absyn.FunBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.FunParDecl(p_2,p_3,p_5,p_8,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Decl ::= _SYMB_40 Type LIdent _SYMB_8 ListParam _SYMB_9 _SYMB_7 FunBody _SYMB_1 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		bnfc.abs.Absyn.Type p_2 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.ListParam p_5 = (bnfc.abs.Absyn.ListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.FunBody p_8 = (bnfc.abs.Absyn.FunBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.FunDecl(p_2,p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Decl ::= _SYMB_39 UIdent _SYMB_4 ListUIdent _SYMB_5 _SYMB_7 ListConstrIdent _SYMB_1 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.ListUIdent p_4 = (bnfc.abs.Absyn.ListUIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListConstrIdent p_7 = (bnfc.abs.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.DataParDecl(p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Decl ::= _SYMB_39 UIdent _SYMB_7 ListConstrIdent _SYMB_1 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListConstrIdent p_4 = (bnfc.abs.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.DataDecl(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Decl ::= _SYMB_42 ConstrIdent _SYMB_1 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ConstrIdent p_2 = (bnfc.abs.Absyn.ConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ExceptionDecl(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Decl ::= _SYMB_69 UIdent _SYMB_4 ListUIdent _SYMB_5 _SYMB_7 Type _SYMB_1 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.ListUIdent p_4 = (bnfc.abs.Absyn.ListUIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Type p_7 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.TypeParDecl(p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Decl ::= _SYMB_69 UIdent _SYMB_7 Type _SYMB_1 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Type p_4 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.TypeDecl(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ListDecl ::= ListDecl Decl 
            {
              bnfc.abs.Absyn.ListDecl RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListDecl p_1 = (bnfc.abs.Absyn.ListDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Decl p_2 = (bnfc.abs.Absyn.Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDecl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ListDecl ::= 
            {
              bnfc.abs.Absyn.ListDecl RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListDecl(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDecl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListTTypeSegment ::= TTypeSegment _SYMB_6 ListTTypeSegment 
            {
              bnfc.abs.Absyn.ListTTypeSegment RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.TTypeSegment p_1 = (bnfc.abs.Absyn.TTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListTTypeSegment p_3 = (bnfc.abs.Absyn.ListTTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTTypeSegment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListTTypeSegment ::= TTypeSegment _SYMB_6 
            {
              bnfc.abs.Absyn.ListTTypeSegment RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.TTypeSegment p_1 = (bnfc.abs.Absyn.TTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ListTTypeSegment(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTTypeSegment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TTypeSegment ::= UIdent 
            {
              bnfc.abs.Absyn.TTypeSegment RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.TTypeSegmen(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TTypeSegment",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TType ::= ListTTypeSegment 
            {
              bnfc.abs.Absyn.TType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListTTypeSegment p_1 = (bnfc.abs.Absyn.ListTTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.TTyp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TType",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ListQTypeSegment ::= QTypeSegment _SYMB_6 ListQTypeSegment 
            {
              bnfc.abs.Absyn.ListQTypeSegment RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.QTypeSegment p_1 = (bnfc.abs.Absyn.QTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListQTypeSegment p_3 = (bnfc.abs.Absyn.ListQTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQTypeSegment",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListQTypeSegment ::= QTypeSegment 
            {
              bnfc.abs.Absyn.ListQTypeSegment RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QTypeSegment p_1 = (bnfc.abs.Absyn.QTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListQTypeSegment(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQTypeSegment",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // QTypeSegment ::= UIdent 
            {
              bnfc.abs.Absyn.QTypeSegment RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.QTypeSegmen(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QTypeSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // QType ::= ListQTypeSegment 
            {
              bnfc.abs.Absyn.QType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListQTypeSegment p_1 = (bnfc.abs.Absyn.ListQTypeSegment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.QTyp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListQType ::= QType _SYMB_0 ListQType 
            {
              bnfc.abs.Absyn.ListQType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.QType p_1 = (bnfc.abs.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListQType p_3 = (bnfc.abs.Absyn.ListQType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQType",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListQType ::= QType 
            {
              bnfc.abs.Absyn.ListQType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QType p_1 = (bnfc.abs.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListQType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQType",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListType ::= Type _SYMB_0 ListType 
            {
              bnfc.abs.Absyn.ListType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.Type p_1 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListType p_3 = (bnfc.abs.Absyn.ListType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ListType ::= Type 
            {
              bnfc.abs.Absyn.ListType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Type p_1 = (bnfc.abs.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= QType _SYMB_4 ListType _SYMB_5 
            {
              bnfc.abs.Absyn.Type RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.QType p_1 = (bnfc.abs.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListType p_3 = (bnfc.abs.Absyn.ListType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.TGen(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= QType 
            {
              bnfc.abs.Absyn.Type RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QType p_1 = (bnfc.abs.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.TSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= _SYMB_3 
            {
              bnfc.abs.Absyn.Type RESULT =null;
		 RESULT = new bnfc.abs.Absyn.TUnderscore(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ImportType ::= _SYMB_51 
            {
              bnfc.abs.Absyn.ImportType RESULT =null;
		 RESULT = new bnfc.abs.Absyn.NormalImport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportType",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ImportType ::= _SYMB_45 
            {
              bnfc.abs.Absyn.ImportType RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ForeignImport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportType",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListImport ::= ListImport Import _SYMB_1 
            {
              bnfc.abs.Absyn.ListImport RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ListImport p_1 = (bnfc.abs.Absyn.ListImport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Import p_2 = (bnfc.abs.Absyn.Import)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListImport",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ListImport ::= 
            {
              bnfc.abs.Absyn.ListImport RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListImport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListImport",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Import ::= ImportType _SYMB_2 _SYMB_47 QType 
            {
              bnfc.abs.Absyn.Import RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.ImportType p_1 = (bnfc.abs.Absyn.ImportType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QType p_4 = (bnfc.abs.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.StarFromImport(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Import ::= ImportType ListAnyIdent _SYMB_47 QType 
            {
              bnfc.abs.Absyn.Import RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.ImportType p_1 = (bnfc.abs.Absyn.ImportType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ListAnyIdent p_2 = (bnfc.abs.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QType p_4 = (bnfc.abs.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.AnyFromImport(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Import ::= ImportType TType AnyIdent 
            {
              bnfc.abs.Absyn.Import RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ImportType p_1 = (bnfc.abs.Absyn.ImportType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.TType p_2 = (bnfc.abs.Absyn.TType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.AnyIdent p_3 = (bnfc.abs.Absyn.AnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.AnyImport(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListExport ::= ListExport Export _SYMB_1 
            {
              bnfc.abs.Absyn.ListExport RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ListExport p_1 = (bnfc.abs.Absyn.ListExport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Export p_2 = (bnfc.abs.Absyn.Export)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExport",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListExport ::= 
            {
              bnfc.abs.Absyn.ListExport RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListExport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExport",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Export ::= _SYMB_43 _SYMB_2 _SYMB_47 QType 
            {
              bnfc.abs.Absyn.Export RESULT =null;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QType p_4 = (bnfc.abs.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.StarFromExport(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Export ::= _SYMB_43 _SYMB_2 
            {
              bnfc.abs.Absyn.Export RESULT =null;
		 RESULT = new bnfc.abs.Absyn.StarExport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Export ::= _SYMB_43 ListAnyIdent _SYMB_47 QType 
            {
              bnfc.abs.Absyn.Export RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ListAnyIdent p_2 = (bnfc.abs.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QType p_4 = (bnfc.abs.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.AnyFromExport(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Export ::= _SYMB_43 ListAnyIdent 
            {
              bnfc.abs.Absyn.Export RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListAnyIdent p_2 = (bnfc.abs.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.AnyExport(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Module ::= _SYMB_56 QType _SYMB_1 ListExport ListImport ListDecl MaybeBlock 
            {
              bnfc.abs.Absyn.Module RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.QType p_2 = (bnfc.abs.Absyn.QType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.ListExport p_4 = (bnfc.abs.Absyn.ListExport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ListImport p_5 = (bnfc.abs.Absyn.ListImport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListDecl p_6 = (bnfc.abs.Absyn.ListDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.MaybeBlock p_7 = (bnfc.abs.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.Modul(p_2,p_4,p_5,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Module",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListModule ::= ListModule Module 
            {
              bnfc.abs.Absyn.ListModule RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListModule p_1 = (bnfc.abs.Absyn.ListModule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Module p_2 = (bnfc.abs.Absyn.Module)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListModule",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListModule ::= 
            {
              bnfc.abs.Absyn.ListModule RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListModule(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListModule",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= ListModule 
            {
              bnfc.abs.Absyn.Program RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListModule p_1 = (bnfc.abs.Absyn.ListModule)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.Prog(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListAnyIdent ::= AnyIdent _SYMB_0 ListAnyIdent 
            {
              bnfc.abs.Absyn.ListAnyIdent RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.AnyIdent p_1 = (bnfc.abs.Absyn.AnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListAnyIdent p_3 = (bnfc.abs.Absyn.ListAnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnyIdent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListAnyIdent ::= AnyIdent 
            {
              bnfc.abs.Absyn.ListAnyIdent RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.AnyIdent p_1 = (bnfc.abs.Absyn.AnyIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListAnyIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnyIdent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // AnyIdent ::= UIdent 
            {
              bnfc.abs.Absyn.AnyIdent RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.AnyTyIden(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AnyIdent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // AnyIdent ::= LIdent 
            {
              bnfc.abs.Absyn.AnyIdent RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.AnyIden(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AnyIdent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Program start_val = (bnfc.abs.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

