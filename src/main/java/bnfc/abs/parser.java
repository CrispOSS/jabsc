
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 30 14:02:47 CEST 2016
//----------------------------------------------------

package bnfc.abs;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 30 14:02:47 CEST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\266\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\003\003\000\002\003\005\000" +
    "\002\004\003\000\002\004\005\000\002\005\003\000\002" +
    "\005\003\000\002\005\005\000\002\006\003\000\002\006" +
    "\005\000\002\007\003\000\002\007\005\000\002\010\003" +
    "\000\002\010\005\000\002\011\003\000\002\011\006\000" +
    "\002\011\003\000\002\012\003\000\002\012\005\000\002" +
    "\013\004\000\002\014\002\000\002\014\003\000\002\014" +
    "\005\000\002\015\003\000\002\016\011\000\002\017\002" +
    "\000\002\017\004\000\002\020\004\000\002\020\006\000" +
    "\002\020\004\000\002\020\006\000\002\021\002\000\002" +
    "\021\005\000\002\022\006\000\002\022\004\000\002\022" +
    "\006\000\002\023\002\000\002\023\005\000\002\024\003" +
    "\000\002\024\003\000\002\025\007\000\002\025\012\000" +
    "\002\025\007\000\002\025\012\000\002\025\013\000\002" +
    "\025\016\000\002\025\007\000\002\025\011\000\002\025" +
    "\011\000\002\025\014\000\002\025\013\000\002\025\016" +
    "\000\002\025\005\000\002\026\003\000\002\026\005\000" +
    "\002\027\003\000\002\027\006\000\002\030\002\000\002" +
    "\030\003\000\002\030\005\000\002\031\003\000\002\031" +
    "\004\000\002\032\003\000\002\032\003\000\002\033\002" +
    "\000\002\033\005\000\002\034\010\000\002\035\002\000" +
    "\002\035\004\000\002\036\005\000\002\036\007\000\002" +
    "\036\012\000\002\037\004\000\002\037\004\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\006" +
    "\000\002\037\010\000\002\037\005\000\002\037\007\000" +
    "\002\037\007\000\002\037\007\000\002\037\011\000\002" +
    "\037\007\000\002\037\005\000\002\037\004\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\011" +
    "\000\002\037\011\000\002\037\011\000\002\040\005\000" +
    "\002\041\003\000\002\041\004\000\002\042\004\000\002" +
    "\042\006\000\002\042\003\000\002\042\005\000\002\042" +
    "\010\000\002\043\003\000\002\043\003\000\002\044\002" +
    "\000\002\044\003\000\002\044\005\000\002\045\005\000" +
    "\002\045\003\000\002\045\012\000\002\045\010\000\002" +
    "\045\007\000\002\046\005\000\002\046\003\000\002\047" +
    "\005\000\002\047\005\000\002\047\003\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\003\000\002\051\005\000\002\051\005\000\002" +
    "\051\003\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\003\000\002\053\004\000\002\053\004" +
    "\000\002\053\003\000\002\054\006\000\002\054\006\000" +
    "\002\054\003\000\002\054\005\000\002\054\003\000\002" +
    "\054\006\000\002\054\003\000\002\054\005\000\002\055" +
    "\005\000\002\056\004\000\002\056\005\000\002\057\002" +
    "\000\002\057\003\000\002\057\005\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\006\000\002" +
    "\060\003\000\002\061\007\000\002\061\010\000\002\061" +
    "\010\000\002\061\010\000\002\061\010\000\002\061\011" +
    "\000\002\061\005\000\002\061\006\000\002\061\003\000" +
    "\002\061\005\000\002\061\005\000\002\062\005\000\002" +
    "\063\002\000\002\063\004\000\002\064\003\000\002\064" +
    "\005\000\002\065\004\000\002\066\002\000\002\066\004" +
    "\000\002\067\004\000\002\070\002\000\002\070\004\000" +
    "\002\071\004\000\002\071\002\000\002\072\005\000\002" +
    "\072\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c3\000\006\002\uffe2\073\uffe2\001\002\000\004\002" +
    "\u01c5\001\002\000\006\002\uffe4\073\007\001\002\000\006" +
    "\002\uffe1\073\uffe1\001\002\000\004\122\010\001\002\000" +
    "\026\004\u01c4\005\ufffa\006\ufffa\007\ufffa\011\ufffa\015\ufffa" +
    "\016\ufffa\017\ufffa\021\ufffa\123\ufffa\001\002\000\004\011" +
    "\012\001\002\000\034\002\uffdc\017\uffdc\037\uffdc\050\uffdc" +
    "\051\uffdc\052\uffdc\055\uffdc\056\uffdc\060\uffdc\066\uffdc\070" +
    "\uffdc\073\uffdc\115\uffdc\001\002\000\034\002\uffd7\017\uffd7" +
    "\037\uffd7\050\uffd7\051\uffd7\052\uffd7\055\uffd7\056\015\060" +
    "\uffd7\066\uffd7\070\uffd7\073\uffd7\115\uffd7\001\002\000\032" +
    "\002\uff51\017\uff51\037\uff51\050\uff51\051\uff51\052\uff51\055" +
    "\uff51\060\036\066\040\070\uff51\073\uff51\115\uff51\001\002" +
    "\000\010\012\024\122\021\123\020\001\002\000\004\011" +
    "\017\001\002\000\034\002\uffdb\017\uffdb\037\uffdb\050\uffdb" +
    "\051\uffdb\052\uffdb\055\uffdb\056\uffdb\060\uffdb\066\uffdb\070" +
    "\uffdb\073\uffdb\115\uffdb\001\002\000\010\005\ufff6\011\ufff6" +
    "\062\ufff6\001\002\000\012\004\033\005\ufff5\011\ufff5\062" +
    "\ufff5\001\002\000\006\011\uffde\062\031\001\002\000\010" +
    "\005\027\011\uffef\062\uffef\001\002\000\006\011\uffe0\062" +
    "\025\001\002\000\004\122\010\001\002\000\004\011\uffdf" +
    "\001\002\000\006\122\021\123\020\001\002\000\006\011" +
    "\uffee\062\uffee\001\002\000\004\122\010\001\002\000\004" +
    "\011\uffdd\001\002\000\006\122\021\123\020\001\002\000" +
    "\010\005\ufff4\011\ufff4\062\ufff4\001\002\000\004\011\u01c3" +
    "\001\002\000\010\012\uffd4\122\uffd4\123\uffd4\001\002\000" +
    "\026\002\uff4c\017\053\037\uff59\050\uff59\051\uff59\052\uff59" +
    "\055\uff59\070\uff59\073\uff4c\115\uff59\001\002\000\010\012" +
    "\uffd5\122\uffd5\123\uffd5\001\002\000\010\012\043\122\021" +
    "\123\020\001\002\000\006\011\uffd9\062\046\001\002\000" +
    "\004\062\044\001\002\000\004\122\010\001\002\000\004" +
    "\011\uffda\001\002\000\004\122\010\001\002\000\004\011" +
    "\uffd8\001\002\000\006\002\uffe3\073\uffe3\001\002\000\020" +
    "\037\127\050\u014a\051\u0149\052\u0148\055\u0147\070\u0145\115" +
    "\u0146\001\002\000\026\002\uff50\017\uff50\037\uff50\050\uff50" +
    "\051\uff50\052\uff50\055\uff50\070\uff50\073\uff50\115\uff50\001" +
    "\002\000\104\010\uff54\015\uff54\017\uff54\020\uff54\033\uff54" +
    "\036\uff54\037\uff54\043\uff54\044\uff54\046\uff54\053\uff54\064" +
    "\uff54\071\uff54\074\uff54\075\uff54\076\uff54\077\uff54\100\uff54" +
    "\102\uff54\104\uff54\105\uff54\106\uff54\107\uff54\111\uff54\112" +
    "\uff54\113\uff54\114\uff54\116\uff54\117\uff54\120\uff54\121\uff54" +
    "\122\uff54\123\uff54\001\002\000\104\010\uff59\015\uff59\017" +
    "\uff59\020\057\033\uff59\036\uff59\037\uff59\043\uff59\044\uff59" +
    "\046\uff59\053\uff59\064\uff59\071\uff59\074\uff59\075\uff59\076" +
    "\uff59\077\uff59\100\uff59\102\uff59\104\uff59\105\uff59\106\uff59" +
    "\107\uff59\111\uff59\112\uff59\113\uff59\114\uff59\116\uff59\117" +
    "\uff59\120\uff59\121\uff59\122\uff59\123\uff59\001\002\000\104" +
    "\010\uff53\015\uff53\017\uff53\020\uff53\033\uff53\036\uff53\037" +
    "\uff53\043\uff53\044\uff53\046\uff53\053\uff53\064\uff53\071\uff53" +
    "\074\uff53\075\uff53\076\uff53\077\uff53\100\uff53\102\uff53\104" +
    "\uff53\105\uff53\106\uff53\107\uff53\111\uff53\112\uff53\113\uff53" +
    "\114\uff53\116\uff53\117\uff53\120\uff53\121\uff53\122\uff53\123" +
    "\uff53\001\002\000\102\010\101\015\067\017\066\033\134" +
    "\036\130\037\127\043\120\044\116\046\113\053\106\064" +
    "\060\071\135\074\133\075\132\076\131\077\126\100\122" +
    "\102\121\104\115\105\114\106\112\107\111\111\107\112" +
    "\100\113\077\114\076\116\072\117\105\120\104\121\137" +
    "\122\074\123\102\001\002\000\014\002\uff4d\010\uff4d\020" +
    "\uff4d\073\uff4d\122\uff4d\001\002\000\036\015\u013e\033\134" +
    "\036\130\046\142\064\143\071\135\076\131\111\150\112" +
    "\100\117\105\120\104\121\137\122\074\123\145\001\002" +
    "\000\062\004\uff79\005\uff79\006\uff79\007\uff79\011\uff79\012" +
    "\uff79\016\uff79\017\uff79\023\uff79\024\uff79\025\uff79\026\uff79" +
    "\027\uff79\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035" +
    "\uff79\040\uff79\041\uff79\054\uff79\067\uff79\110\uff79\001\002" +
    "\000\062\004\uff7c\005\uff7c\006\uff7c\007\uff7c\011\uff7c\012" +
    "\uff7c\016\uff7c\017\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c" +
    "\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035" +
    "\uff7c\040\uff7c\041\uff7c\054\uff7c\067\uff7c\110\uff7c\001\002" +
    "\000\062\004\uff80\005\uff80\006\uff80\007\uff80\011\uff80\012" +
    "\177\016\uff80\017\uff80\023\uff80\024\uff80\025\uff80\026\uff80" +
    "\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034\200\035" +
    "\176\040\uff80\041\uff80\054\uff80\067\uff80\110\uff80\001\002" +
    "\000\054\004\uff83\005\uff83\006\uff83\007\uff83\011\uff83\016" +
    "\uff83\017\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83" +
    "\030\uff83\031\uff83\032\173\033\174\040\uff83\041\uff83\054" +
    "\uff83\067\uff83\110\uff83\001\002\000\050\004\uff88\005\uff88" +
    "\006\170\007\166\011\uff88\016\uff88\017\uff88\023\uff88\024" +
    "\uff88\025\uff88\026\uff88\027\uff88\030\171\031\167\040\uff88" +
    "\041\uff88\054\uff88\067\uff88\110\uff88\001\002\000\104\010" +
    "\uff54\015\uff54\017\uff54\020\uff54\033\uff54\036\uff54\037\uff54" +
    "\043\uff54\044\uff54\046\uff54\053\uff54\064\uff54\071\uff54\074" +
    "\uff54\075\uff54\076\uff54\077\uff54\100\uff54\102\uff54\104\uff54" +
    "\105\uff54\106\uff54\107\uff54\111\uff54\112\uff54\113\uff54\114" +
    "\uff54\116\uff54\117\uff54\120\uff54\121\uff54\122\uff54\123\uff54" +
    "\001\002\000\036\015\067\033\134\036\130\046\142\064" +
    "\143\071\135\076\131\111\150\112\100\117\105\120\104" +
    "\121\137\122\074\123\145\001\002\000\040\004\uff8b\005" +
    "\uff8b\011\uff8b\016\uff8b\017\uff8b\023\uff8b\024\uff8b\025\uff8b" +
    "\026\164\027\163\040\uff8b\041\uff8b\054\uff8b\067\uff8b\110" +
    "\uff8b\001\002\000\062\004\uff72\005\uff72\006\uff72\007\uff72" +
    "\011\uff72\012\uff72\016\uff72\017\uff72\023\uff72\024\uff72\025" +
    "\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033\uff72" +
    "\034\uff72\035\uff72\040\uff72\041\uff72\054\uff72\067\uff72\110" +
    "\uff72\001\002\000\004\015\u0136\001\002\000\034\004\uff90" +
    "\005\uff90\011\uff90\016\uff90\017\uff90\023\uff90\024\uff90\025" +
    "\161\040\uff90\041\uff90\054\uff90\067\uff90\110\uff90\001\002" +
    "\000\070\004\u0132\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\040\ufffa\041\ufffa\042\ufffa\054\ufffa\067\ufffa" +
    "\110\ufffa\123\ufffa\001\002\000\004\123\u012d\001\002\000" +
    "\102\010\uff59\015\uff59\017\uff59\033\uff59\036\uff59\037\uff59" +
    "\043\uff59\044\uff59\046\uff59\053\uff59\064\uff59\071\uff59\074" +
    "\uff59\075\uff59\076\uff59\077\uff59\100\uff59\102\uff59\104\uff59" +
    "\105\uff59\106\uff59\107\uff59\111\uff59\112\uff59\113\uff59\114" +
    "\uff59\116\uff59\117\uff59\120\uff59\121\uff59\122\uff59\123\uff59" +
    "\001\002\000\036\015\067\033\134\036\130\046\142\064" +
    "\143\071\135\076\131\111\150\112\100\117\105\120\104" +
    "\121\137\122\074\123\145\001\002\000\064\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\011\ufffb\012\ufffb\016\ufffb\017\ufffb" +
    "\021\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\040\ufffb" +
    "\041\ufffb\054\ufffb\067\ufffb\110\ufffb\001\002\000\016\005" +
    "\uffeb\007\uffeb\011\uffeb\016\uffeb\042\uffeb\123\uffeb\001\002" +
    "\000\050\004\uff76\006\uff76\007\uff76\011\uff76\012\uff76\013" +
    "\u0120\015\ufff8\024\uff76\025\uff76\026\uff76\027\uff76\030\uff76" +
    "\031\uff76\032\uff76\033\uff76\034\uff76\035\uff76\037\ufff8\041" +
    "\uff76\001\002\000\004\011\uff95\001\002\000\064\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\011\ufffd\012\ufffd\016\ufffd\017" +
    "\ufffd\021\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\040" +
    "\ufffd\041\ufffd\054\ufffd\067\ufffd\110\ufffd\001\002\000\064" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\011\ufffe\012\ufffe\016" +
    "\ufffe\017\ufffe\021\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe" +
    "\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035" +
    "\ufffe\040\ufffe\041\ufffe\054\ufffe\067\ufffe\110\ufffe\001\002" +
    "\000\004\015\u011a\001\002\000\042\004\u0115\006\uffff\007" +
    "\uffff\011\uffff\012\uffff\024\uffff\025\uffff\026\uffff\027\uffff" +
    "\030\uffff\031\uffff\032\uffff\033\uffff\034\uffff\035\uffff\041" +
    "\uffff\001\002\000\110\010\uff55\015\uff55\017\uff55\020\uff55" +
    "\033\uff55\036\uff55\037\uff55\043\uff55\044\uff55\046\uff55\047" +
    "\uff55\053\uff55\054\uff55\064\uff55\071\uff55\074\uff55\075\uff55" +
    "\076\uff55\077\uff55\100\uff55\102\uff55\104\uff55\105\uff55\106" +
    "\uff55\107\uff55\111\uff55\112\uff55\113\uff55\114\uff55\116\uff55" +
    "\117\uff55\120\uff55\121\uff55\122\uff55\123\uff55\001\002\000" +
    "\004\011\u0114\001\002\000\004\011\u0113\001\002\000\036" +
    "\015\067\033\134\036\130\046\142\064\143\071\135\076" +
    "\131\111\150\112\100\117\105\120\104\121\137\122\074" +
    "\123\145\001\002\000\050\015\067\033\134\036\130\044" +
    "\374\046\142\064\143\071\135\074\133\075\132\076\131" +
    "\102\121\104\115\111\377\112\100\117\105\120\104\121" +
    "\137\122\074\123\145\001\002\000\004\015\371\001\002" +
    "\000\040\015\067\033\134\036\130\046\142\053\345\064" +
    "\143\071\135\076\131\111\346\112\100\117\105\120\104" +
    "\121\137\122\074\123\343\001\002\000\116\010\uff58\015" +
    "\uff58\017\uff58\033\uff58\036\uff58\037\uff58\043\uff58\044\uff58" +
    "\046\uff58\050\uff58\051\uff58\052\uff58\053\uff58\055\uff58\064" +
    "\uff58\070\uff58\071\uff58\074\uff58\075\uff58\076\uff58\077\uff58" +
    "\100\uff58\102\uff58\104\uff58\105\uff58\106\uff58\107\uff58\111" +
    "\uff58\112\uff58\113\uff58\114\uff58\115\uff58\116\uff58\117\uff58" +
    "\120\uff58\121\uff58\122\uff58\123\uff58\001\002\000\036\015" +
    "\067\033\134\036\130\046\142\064\143\071\135\076\131" +
    "\111\150\112\100\117\105\120\104\121\137\122\074\123" +
    "\145\001\002\000\004\011\uff5d\001\002\000\036\015\067" +
    "\033\134\036\130\046\142\064\143\071\135\076\131\111" +
    "\150\112\100\117\105\120\104\121\137\122\074\123\145" +
    "\001\002\000\012\004\316\011\uff96\024\157\041\315\001" +
    "\002\000\004\011\314\001\002\000\052\004\uff74\006\253" +
    "\007\uff74\011\uff74\012\uff74\015\153\024\uff74\025\uff74\026" +
    "\uff74\027\uff74\030\uff74\031\uff74\032\uff74\033\uff74\034\uff74" +
    "\035\uff74\040\uff74\041\uff74\042\uffed\123\uffed\001\002\000" +
    "\036\015\067\033\134\036\130\046\142\064\143\071\135" +
    "\076\131\111\150\112\100\117\105\120\104\121\137\122" +
    "\074\123\145\001\002\000\040\010\101\015\067\033\134" +
    "\036\130\046\142\064\143\071\135\076\131\111\150\112" +
    "\100\117\105\120\104\121\137\122\074\123\145\001\002" +
    "\000\030\015\067\033\134\036\130\076\131\111\150\112" +
    "\100\117\105\120\104\121\137\122\074\123\145\001\002" +
    "\000\064\004\000\005\000\006\000\007\000\011\000\012" +
    "\000\016\000\017\000\021\000\023\000\024\000\025\000" +
    "\026\000\027\000\030\000\031\000\032\000\033\000\034" +
    "\000\035\000\040\000\041\000\054\000\067\000\110\000" +
    "\001\002\000\004\015\301\001\002\000\006\072\270\122" +
    "\010\001\002\000\030\015\067\033\134\036\130\076\131" +
    "\111\150\112\100\117\105\120\104\121\137\122\074\123" +
    "\145\001\002\000\004\015\247\001\002\000\006\015\141" +
    "\037\140\001\002\000\064\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\011\ufffc\012\ufffc\016\ufffc\017\ufffc\021\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\040\ufffc\041\ufffc\054\ufffc" +
    "\067\ufffc\110\ufffc\001\002\000\040\015\067\033\134\036" +
    "\130\040\uff94\046\142\064\143\071\135\076\131\111\150" +
    "\112\100\117\105\120\104\121\137\122\074\123\145\001" +
    "\002\000\040\015\067\016\uff94\033\134\036\130\046\142" +
    "\064\143\071\135\076\131\111\150\112\100\117\105\120" +
    "\104\121\137\122\074\123\145\001\002\000\036\015\067" +
    "\033\134\036\130\046\142\064\143\071\135\076\131\111" +
    "\150\112\100\117\105\120\104\121\137\122\074\123\145" +
    "\001\002\000\036\015\067\033\134\036\130\046\142\064" +
    "\143\071\135\076\131\111\150\112\100\117\105\120\104" +
    "\121\137\122\074\123\145\001\002\000\004\016\212\001" +
    "\002\000\066\004\uff76\005\uff76\006\uff76\007\uff76\011\uff76" +
    "\012\uff76\015\ufff8\016\uff76\017\uff76\023\uff76\024\uff76\025" +
    "\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76\033\uff76" +
    "\034\uff76\035\uff76\037\ufff8\040\uff76\041\uff76\054\uff76\067" +
    "\uff76\110\uff76\001\002\000\012\005\156\016\uff93\024\157" +
    "\040\uff93\001\002\000\064\004\uff74\005\uff74\006\uff74\007" +
    "\uff74\011\uff74\012\uff74\015\153\016\uff74\017\uff74\023\uff74" +
    "\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74\032" +
    "\uff74\033\uff74\034\uff74\035\uff74\040\uff74\041\uff74\054\uff74" +
    "\067\uff74\110\uff74\001\002\000\062\004\151\005\uffff\006" +
    "\uffff\007\uffff\011\uffff\012\uffff\016\uffff\017\uffff\023\uffff" +
    "\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032" +
    "\uffff\033\uffff\034\uffff\035\uffff\040\uffff\041\uffff\054\uffff" +
    "\067\uffff\110\uffff\001\002\000\004\123\152\001\002\000" +
    "\062\004\uff75\005\uff75\006\uff75\007\uff75\011\uff75\012\uff75" +
    "\016\uff75\017\uff75\023\uff75\024\uff75\025\uff75\026\uff75\027" +
    "\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034\uff75\035\uff75" +
    "\040\uff75\041\uff75\054\uff75\067\uff75\110\uff75\001\002\000" +
    "\040\015\067\016\uff94\033\134\036\130\046\142\064\143" +
    "\071\135\076\131\111\150\112\100\117\105\120\104\121" +
    "\137\122\074\123\145\001\002\000\004\016\155\001\002" +
    "\000\062\004\uff73\005\uff73\006\uff73\007\uff73\011\uff73\012" +
    "\uff73\016\uff73\017\uff73\023\uff73\024\uff73\025\uff73\026\uff73" +
    "\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034\uff73\035" +
    "\uff73\040\uff73\041\uff73\054\uff73\067\uff73\110\uff73\001\002" +
    "\000\042\015\067\016\uff94\033\134\036\130\040\uff94\046" +
    "\142\064\143\071\135\076\131\111\150\112\100\117\105" +
    "\120\104\121\137\122\074\123\145\001\002\000\030\015" +
    "\067\033\134\036\130\076\131\111\150\112\100\117\105" +
    "\120\104\121\137\122\074\123\145\001\002\000\034\004" +
    "\uff91\005\uff91\011\uff91\016\uff91\017\uff91\023\uff91\024\uff91" +
    "\025\161\040\uff91\041\uff91\054\uff91\067\uff91\110\uff91\001" +
    "\002\000\030\015\067\033\134\036\130\076\131\111\150" +
    "\112\100\117\105\120\104\121\137\122\074\123\145\001" +
    "\002\000\040\004\uff8c\005\uff8c\011\uff8c\016\uff8c\017\uff8c" +
    "\023\uff8c\024\uff8c\025\uff8c\026\164\027\163\040\uff8c\041" +
    "\uff8c\054\uff8c\067\uff8c\110\uff8c\001\002\000\030\015\067" +
    "\033\134\036\130\076\131\111\150\112\100\117\105\120" +
    "\104\121\137\122\074\123\145\001\002\000\030\015\067" +
    "\033\134\036\130\076\131\111\150\112\100\117\105\120" +
    "\104\121\137\122\074\123\145\001\002\000\050\004\uff8a" +
    "\005\uff8a\006\170\007\166\011\uff8a\016\uff8a\017\uff8a\023" +
    "\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\171\031\167" +
    "\040\uff8a\041\uff8a\054\uff8a\067\uff8a\110\uff8a\001\002\000" +
    "\030\015\067\033\134\036\130\076\131\111\150\112\100" +
    "\117\105\120\104\121\137\122\074\123\145\001\002\000" +
    "\030\015\067\033\134\036\130\076\131\111\150\112\100" +
    "\117\105\120\104\121\137\122\074\123\145\001\002\000" +
    "\030\015\067\033\134\036\130\076\131\111\150\112\100" +
    "\117\105\120\104\121\137\122\074\123\145\001\002\000" +
    "\030\015\067\033\134\036\130\076\131\111\150\112\100" +
    "\117\105\120\104\121\137\122\074\123\145\001\002\000" +
    "\054\004\uff86\005\uff86\006\uff86\007\uff86\011\uff86\016\uff86" +
    "\017\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030" +
    "\uff86\031\uff86\032\173\033\174\040\uff86\041\uff86\054\uff86" +
    "\067\uff86\110\uff86\001\002\000\030\015\067\033\134\036" +
    "\130\076\131\111\150\112\100\117\105\120\104\121\137" +
    "\122\074\123\145\001\002\000\030\015\067\033\134\036" +
    "\130\076\131\111\150\112\100\117\105\120\104\121\137" +
    "\122\074\123\145\001\002\000\062\004\uff81\005\uff81\006" +
    "\uff81\007\uff81\011\uff81\012\177\016\uff81\017\uff81\023\uff81" +
    "\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032" +
    "\uff81\033\uff81\034\200\035\176\040\uff81\041\uff81\054\uff81" +
    "\067\uff81\110\uff81\001\002\000\030\015\067\033\134\036" +
    "\130\076\131\111\150\112\100\117\105\120\104\121\137" +
    "\122\074\123\145\001\002\000\030\015\067\033\134\036" +
    "\130\076\131\111\150\112\100\117\105\120\104\121\137" +
    "\122\074\123\145\001\002\000\030\015\067\033\134\036" +
    "\130\076\131\111\150\112\100\117\105\120\104\121\137" +
    "\122\074\123\145\001\002\000\062\004\uff7e\005\uff7e\006" +
    "\uff7e\007\uff7e\011\uff7e\012\uff7e\016\uff7e\017\uff7e\023\uff7e" +
    "\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032" +
    "\uff7e\033\uff7e\034\uff7e\035\uff7e\040\uff7e\041\uff7e\054\uff7e" +
    "\067\uff7e\110\uff7e\001\002\000\062\004\uff7f\005\uff7f\006" +
    "\uff7f\007\uff7f\011\uff7f\012\uff7f\016\uff7f\017\uff7f\023\uff7f" +
    "\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032" +
    "\uff7f\033\uff7f\034\uff7f\035\uff7f\040\uff7f\041\uff7f\054\uff7f" +
    "\067\uff7f\110\uff7f\001\002\000\062\004\uff7d\005\uff7d\006" +
    "\uff7d\007\uff7d\011\uff7d\012\uff7d\016\uff7d\017\uff7d\023\uff7d" +
    "\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032" +
    "\uff7d\033\uff7d\034\uff7d\035\uff7d\040\uff7d\041\uff7d\054\uff7d" +
    "\067\uff7d\110\uff7d\001\002\000\062\004\uff82\005\uff82\006" +
    "\uff82\007\uff82\011\uff82\012\177\016\uff82\017\uff82\023\uff82" +
    "\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82\032" +
    "\uff82\033\uff82\034\200\035\176\040\uff82\041\uff82\054\uff82" +
    "\067\uff82\110\uff82\001\002\000\054\004\uff87\005\uff87\006" +
    "\uff87\007\uff87\011\uff87\016\uff87\017\uff87\023\uff87\024\uff87" +
    "\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\173\033" +
    "\174\040\uff87\041\uff87\054\uff87\067\uff87\110\uff87\001\002" +
    "\000\054\004\uff84\005\uff84\006\uff84\007\uff84\011\uff84\016" +
    "\uff84\017\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84" +
    "\030\uff84\031\uff84\032\173\033\174\040\uff84\041\uff84\054" +
    "\uff84\067\uff84\110\uff84\001\002\000\054\004\uff85\005\uff85" +
    "\006\uff85\007\uff85\011\uff85\016\uff85\017\uff85\023\uff85\024" +
    "\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032\173" +
    "\033\174\040\uff85\041\uff85\054\uff85\067\uff85\110\uff85\001" +
    "\002\000\050\004\uff89\005\uff89\006\170\007\166\011\uff89" +
    "\016\uff89\017\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027" +
    "\uff89\030\171\031\167\040\uff89\041\uff89\054\uff89\067\uff89" +
    "\110\uff89\001\002\000\006\016\uff92\040\uff92\001\002\000" +
    "\062\004\uff78\005\uff78\006\uff78\007\uff78\011\uff78\012\uff78" +
    "\016\uff78\017\uff78\023\uff78\024\uff78\025\uff78\026\uff78\027" +
    "\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78\035\uff78" +
    "\040\uff78\041\uff78\054\uff78\067\uff78\110\uff78\001\002\000" +
    "\006\024\157\110\214\001\002\000\036\015\067\033\134" +
    "\036\130\046\142\064\143\071\135\076\131\111\150\112" +
    "\100\117\105\120\104\121\137\122\074\123\145\001\002" +
    "\000\006\024\157\054\216\001\002\000\036\015\067\033" +
    "\134\036\130\046\142\064\143\071\135\076\131\111\150" +
    "\112\100\117\105\120\104\121\137\122\074\123\145\001" +
    "\002\000\032\004\uff8e\005\uff8e\011\uff8e\016\uff8e\017\uff8e" +
    "\023\uff8e\024\157\040\uff8e\041\uff8e\054\uff8e\067\uff8e\110" +
    "\uff8e\001\002\000\006\017\221\024\157\001\002\000\024" +
    "\010\223\076\131\111\227\112\100\117\105\120\104\121" +
    "\137\122\010\123\230\001\002\000\012\005\uff68\015\237" +
    "\016\uff68\021\uff68\001\002\000\010\005\uff66\016\uff66\021" +
    "\uff66\001\002\000\010\005\uff6a\016\uff6a\021\uff6a\001\002" +
    "\000\004\021\235\001\002\000\004\011\233\001\002\000" +
    "\010\005\uffff\016\uffff\021\uffff\001\002\000\010\005\uff69" +
    "\016\uff69\021\uff69\001\002\000\004\020\232\001\002\000" +
    "\032\004\uff8d\005\uff8d\011\uff8d\016\uff8d\017\uff8d\023\uff8d" +
    "\024\uff8d\040\uff8d\041\uff8d\054\uff8d\067\uff8d\110\uff8d\001" +
    "\002\000\026\010\223\020\uff6f\076\131\111\227\112\100" +
    "\117\105\120\104\121\137\122\010\123\230\001\002\000" +
    "\004\020\uff6e\001\002\000\036\015\067\033\134\036\130" +
    "\046\142\064\143\071\135\076\131\111\150\112\100\117" +
    "\105\120\104\121\137\122\074\123\145\001\002\000\006" +
    "\011\uff70\024\157\001\002\000\026\010\223\016\uff6d\076" +
    "\131\111\227\112\100\117\105\120\104\121\137\122\010" +
    "\123\230\001\002\000\006\005\243\016\uff6c\001\002\000" +
    "\004\016\242\001\002\000\010\005\uff67\016\uff67\021\uff67" +
    "\001\002\000\026\010\223\016\uff6d\076\131\111\227\112" +
    "\100\117\105\120\104\121\137\122\010\123\230\001\002" +
    "\000\004\016\uff6b\001\002\000\004\040\246\001\002\000" +
    "\062\004\uff77\005\uff77\006\uff77\007\uff77\011\uff77\012\uff77" +
    "\016\uff77\017\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027" +
    "\uff77\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77" +
    "\040\uff77\041\uff77\054\uff77\067\uff77\110\uff77\001\002\000" +
    "\006\010\101\122\010\001\002\000\004\123\266\001\002" +
    "\000\004\016\261\001\002\000\016\005\uffed\006\253\007" +
    "\uffed\011\uffed\016\uffed\123\uffed\001\002\000\006\010\101" +
    "\122\010\001\002\000\006\005\257\007\uffea\001\002\000" +
    "\004\007\256\001\002\000\016\005\uffec\007\uffec\011\uffec" +
    "\016\uffec\042\uffec\123\uffec\001\002\000\006\010\101\122" +
    "\010\001\002\000\004\007\uffe9\001\002\000\004\013\262" +
    "\001\002\000\036\015\067\033\134\036\130\046\142\064" +
    "\143\071\135\076\131\111\150\112\100\117\105\120\104" +
    "\121\137\122\074\123\145\001\002\000\006\024\157\067" +
    "\264\001\002\000\036\015\067\033\134\036\130\046\142" +
    "\064\143\071\135\076\131\111\150\112\100\117\105\120" +
    "\104\121\137\122\074\123\145\001\002\000\032\004\uff8f" +
    "\005\uff8f\011\uff8f\016\uff8f\017\uff8f\023\uff8f\024\157\040" +
    "\uff8f\041\uff8f\054\uff8f\067\uff8f\110\uff8f\001\002\000\006" +
    "\005\uffe8\016\uffe8\001\002\000\062\004\uff7a\005\uff7a\006" +
    "\uff7a\007\uff7a\011\uff7a\012\uff7a\016\uff7a\017\uff7a\023\uff7a" +
    "\024\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032" +
    "\uff7a\033\uff7a\034\uff7a\035\uff7a\040\uff7a\041\uff7a\054\uff7a" +
    "\067\uff7a\110\uff7a\001\002\000\004\122\010\001\002\000" +
    "\004\015\272\001\002\000\040\015\067\016\uff94\033\134" +
    "\036\130\046\142\064\143\071\135\076\131\111\150\112" +
    "\100\117\105\120\104\121\137\122\074\123\145\001\002" +
    "\000\004\016\274\001\002\000\004\011\uff65\001\002\000" +
    "\004\015\276\001\002\000\040\015\067\016\uff94\033\134" +
    "\036\130\046\142\064\143\071\135\076\131\111\150\112" +
    "\100\117\105\120\104\121\137\122\074\123\145\001\002" +
    "\000\004\016\300\001\002\000\004\011\uff64\001\002\000" +
    "\004\016\302\001\002\000\004\011\uff5b\001\002\000\062" +
    "\004\uff7b\005\uff7b\006\uff7b\007\uff7b\011\uff7b\012\uff7b\016" +
    "\uff7b\017\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b" +
    "\030\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\040" +
    "\uff7b\041\uff7b\054\uff7b\067\uff7b\110\uff7b\001\002\000\004" +
    "\042\310\001\002\000\006\024\157\040\uff57\001\002\000" +
    "\004\040\307\001\002\000\116\010\uff5a\015\uff5a\017\uff5a" +
    "\033\uff5a\036\uff5a\037\uff5a\043\uff5a\044\uff5a\046\uff5a\050" +
    "\uff5a\051\uff5a\052\uff5a\053\uff5a\055\uff5a\064\uff5a\070\uff5a" +
    "\071\uff5a\074\uff5a\075\uff5a\076\uff5a\077\uff5a\100\uff5a\102" +
    "\uff5a\104\uff5a\105\uff5a\106\uff5a\107\uff5a\111\uff5a\112\uff5a" +
    "\113\uff5a\114\uff5a\115\uff5a\116\uff5a\117\uff5a\120\uff5a\121" +
    "\uff5a\122\uff5a\123\uff5a\001\002\000\036\015\067\033\134" +
    "\036\130\046\142\064\143\071\135\076\131\111\150\112" +
    "\100\117\105\120\104\121\137\122\074\123\145\001\002" +
    "\000\006\024\157\040\uff56\001\002\000\006\011\313\024" +
    "\157\001\002\000\110\010\uffa4\015\uffa4\017\uffa4\020\uffa4" +
    "\033\uffa4\036\uffa4\037\uffa4\043\uffa4\044\uffa4\046\uffa4\047" +
    "\uffa4\053\uffa4\054\uffa4\064\uffa4\071\uffa4\074\uffa4\075\uffa4" +
    "\076\uffa4\077\uffa4\100\uffa4\102\uffa4\104\uffa4\105\uffa4\106" +
    "\uffa4\107\uffa4\111\uffa4\112\uffa4\113\uffa4\114\uffa4\116\uffa4" +
    "\117\uffa4\120\uffa4\121\uffa4\122\uffa4\123\uffa4\001\002\000" +
    "\110\010\uffa5\015\uffa5\017\uffa5\020\uffa5\033\uffa5\036\uffa5" +
    "\037\uffa5\043\uffa5\044\uffa5\046\uffa5\047\uffa5\053\uffa5\054" +
    "\uffa5\064\uffa5\071\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5" +
    "\100\uffa5\102\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5\111" +
    "\uffa5\112\uffa5\113\uffa5\114\uffa5\116\uffa5\117\uffa5\120\uffa5" +
    "\121\uffa5\122\uffa5\123\uffa5\001\002\000\004\123\332\001" +
    "\002\000\012\063\322\101\321\103\320\123\317\001\002" +
    "\000\004\015\327\001\002\000\004\011\uff5c\001\002\000" +
    "\004\015\323\001\002\000\004\011\uff5f\001\002\000\036" +
    "\015\067\033\134\036\130\046\142\064\143\071\135\076" +
    "\131\111\150\112\100\117\105\120\104\121\137\122\074" +
    "\123\145\001\002\000\006\016\325\024\157\001\002\000" +
    "\004\011\326\001\002\000\110\010\uffa0\015\uffa0\017\uffa0" +
    "\020\uffa0\033\uffa0\036\uffa0\037\uffa0\043\uffa0\044\uffa0\046" +
    "\uffa0\047\uffa0\053\uffa0\054\uffa0\064\uffa0\071\uffa0\074\uffa0" +
    "\075\uffa0\076\uffa0\077\uffa0\100\uffa0\102\uffa0\104\uffa0\105" +
    "\uffa0\106\uffa0\107\uffa0\111\uffa0\112\uffa0\113\uffa0\114\uffa0" +
    "\116\uffa0\117\uffa0\120\uffa0\121\uffa0\122\uffa0\123\uffa0\001" +
    "\002\000\040\015\067\016\uff94\033\134\036\130\046\142" +
    "\064\143\071\135\076\131\111\150\112\100\117\105\120" +
    "\104\121\137\122\074\123\145\001\002\000\004\016\331" +
    "\001\002\000\004\011\uff63\001\002\000\004\015\333\001" +
    "\002\000\040\015\067\016\uff94\033\134\036\130\046\142" +
    "\064\143\071\135\076\131\111\150\112\100\117\105\120" +
    "\104\121\137\122\074\123\145\001\002\000\004\016\335" +
    "\001\002\000\004\011\uff61\001\002\000\006\011\337\024" +
    "\157\001\002\000\110\010\uffa3\015\uffa3\017\uffa3\020\uffa3" +
    "\033\uffa3\036\uffa3\037\uffa3\043\uffa3\044\uffa3\046\uffa3\047" +
    "\uffa3\053\uffa3\054\uffa3\064\uffa3\071\uffa3\074\uffa3\075\uffa3" +
    "\076\uffa3\077\uffa3\100\uffa3\102\uffa3\104\uffa3\105\uffa3\106" +
    "\uffa3\107\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3\116\uffa3" +
    "\117\uffa3\120\uffa3\121\uffa3\122\uffa3\123\uffa3\001\002\000" +
    "\006\011\341\024\157\001\002\000\110\010\uffb0\015\uffb0" +
    "\017\uffb0\020\uffb0\033\uffb0\036\uffb0\037\uffb0\043\uffb0\044" +
    "\uffb0\046\uffb0\047\uffb0\053\uffb0\054\uffb0\064\uffb0\071\uffb0" +
    "\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\102\uffb0\104" +
    "\uffb0\105\uffb0\106\uffb0\107\uffb0\111\uffb0\112\uffb0\113\uffb0" +
    "\114\uffb0\116\uffb0\117\uffb0\120\uffb0\121\uffb0\122\uffb0\123" +
    "\uffb0\001\002\000\006\011\366\023\365\001\002\000\050" +
    "\006\uff76\007\uff76\011\uff76\012\uff76\015\ufff8\022\364\023" +
    "\uff76\024\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76" +
    "\032\uff76\033\uff76\034\uff76\035\uff76\037\ufff8\041\uff76\001" +
    "\002\000\012\011\uff99\023\uff99\024\157\041\357\001\002" +
    "\000\004\015\352\001\002\000\044\004\347\006\uffff\007" +
    "\uffff\011\uffff\012\uffff\023\uffff\024\uffff\025\uffff\026\uffff" +
    "\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034\uffff\035" +
    "\uffff\041\uffff\001\002\000\004\123\350\001\002\000\044" +
    "\006\uff75\007\uff75\011\uff75\012\uff75\022\351\023\uff75\024" +
    "\uff75\025\uff75\026\uff75\027\uff75\030\uff75\031\uff75\032\uff75" +
    "\033\uff75\034\uff75\035\uff75\041\uff75\001\002\000\006\011" +
    "\uff9a\023\uff9a\001\002\000\036\015\067\033\134\036\130" +
    "\046\142\064\143\071\135\076\131\111\150\112\100\117" +
    "\105\120\104\121\137\122\074\123\145\001\002\000\006" +
    "\005\354\024\157\001\002\000\036\015\067\033\134\036" +
    "\130\046\142\064\143\071\135\076\131\111\150\112\100" +
    "\117\105\120\104\121\137\122\074\123\145\001\002\000" +
    "\006\016\356\024\157\001\002\000\006\011\uff97\023\uff97" +
    "\001\002\000\004\123\360\001\002\000\004\015\361\001" +
    "\002\000\040\015\067\016\uff94\033\134\036\130\046\142" +
    "\064\143\071\135\076\131\111\150\112\100\117\105\120" +
    "\104\121\137\122\074\123\145\001\002\000\004\016\363" +
    "\001\002\000\004\011\uff60\001\002\000\006\011\uff9b\023" +
    "\uff9b\001\002\000\040\015\067\033\134\036\130\046\142" +
    "\053\345\064\143\071\135\076\131\111\346\112\100\117" +
    "\105\120\104\121\137\122\074\123\343\001\002\000\110" +
    "\010\uffaf\015\uffaf\017\uffaf\020\uffaf\033\uffaf\036\uffaf\037" +
    "\uffaf\043\uffaf\044\uffaf\046\uffaf\047\uffaf\053\uffaf\054\uffaf" +
    "\064\uffaf\071\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100" +
    "\uffaf\102\uffaf\104\uffaf\105\uffaf\106\uffaf\107\uffaf\111\uffaf" +
    "\112\uffaf\113\uffaf\114\uffaf\116\uffaf\117\uffaf\120\uffaf\121" +
    "\uffaf\122\uffaf\123\uffaf\001\002\000\006\011\uff98\023\365" +
    "\001\002\000\010\011\uff99\023\uff99\024\157\001\002\000" +
    "\004\016\372\001\002\000\004\011\373\001\002\000\004" +
    "\011\uff5e\001\002\000\036\015\067\033\134\036\130\046" +
    "\142\064\143\071\135\076\131\111\150\112\100\117\105" +
    "\120\104\121\137\122\074\123\145\001\002\000\004\011" +
    "\u0106\001\002\000\012\004\u0105\011\uff96\024\157\041\315" +
    "\001\002\000\042\004\u0100\006\uffff\007\uffff\011\uffff\012" +
    "\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff" +
    "\032\uffff\033\uffff\034\uffff\035\uffff\041\uffff\001\002\000" +
    "\004\123\u0101\001\002\000\044\004\uff75\006\uff75\007\uff75" +
    "\011\uff75\012\uff75\015\u0102\024\uff75\025\uff75\026\uff75\027" +
    "\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034\uff75\035\uff75" +
    "\041\uff75\001\002\000\040\015\067\016\uff94\033\134\036" +
    "\130\046\142\064\143\071\135\076\131\111\150\112\100" +
    "\117\105\120\104\121\137\122\074\123\145\001\002\000" +
    "\004\016\u0104\001\002\000\004\011\uff62\001\002\000\010" +
    "\063\322\103\320\123\317\001\002\000\110\010\uffb1\015" +
    "\uffb1\017\uffb1\020\uffb1\033\uffb1\036\uffb1\037\uffb1\043\uffb1" +
    "\044\uffb1\046\uffb1\047\uffb1\053\uffb1\054\uffb1\064\uffb1\071" +
    "\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\102\uffb1" +
    "\104\uffb1\105\uffb1\106\uffb1\107\uffb1\111\uffb1\112\uffb1\113" +
    "\uffb1\114\uffb1\116\uffb1\117\uffb1\120\uffb1\121\uffb1\122\uffb1" +
    "\123\uffb1\001\002\000\006\024\157\041\357\001\002\000" +
    "\006\017\u0109\024\157\001\002\000\024\010\223\076\131" +
    "\111\227\112\100\117\105\120\104\121\137\122\010\123" +
    "\230\001\002\000\004\020\u0112\001\002\000\004\021\u0111" +
    "\001\002\000\026\010\223\020\uff9d\076\131\111\227\112" +
    "\100\117\105\120\104\121\137\122\010\123\230\001\002" +
    "\000\004\020\uff9c\001\002\000\004\021\u010f\001\002\000" +
    "\102\010\uff59\015\uff59\017\uff59\033\uff59\036\uff59\037\uff59" +
    "\043\uff59\044\uff59\046\uff59\053\uff59\064\uff59\071\uff59\074" +
    "\uff59\075\uff59\076\uff59\077\uff59\100\uff59\102\uff59\104\uff59" +
    "\105\uff59\106\uff59\107\uff59\111\uff59\112\uff59\113\uff59\114" +
    "\uff59\116\uff59\117\uff59\120\uff59\121\uff59\122\uff59\123\uff59" +
    "\001\002\000\026\010\uff9e\020\uff9e\076\uff9e\111\uff9e\112" +
    "\uff9e\117\uff9e\120\uff9e\121\uff9e\122\uff9e\123\uff9e\001\002" +
    "\000\102\010\uff59\015\067\017\uff59\033\134\036\130\037" +
    "\uff59\043\uff59\044\uff59\046\142\053\uff59\064\143\071\135" +
    "\074\uff59\075\uff59\076\131\077\uff59\100\uff59\102\uff59\104" +
    "\uff59\105\uff59\106\uff59\107\uff59\111\150\112\100\113\uff59" +
    "\114\uff59\116\uff59\117\105\120\104\121\137\122\074\123" +
    "\145\001\002\000\110\010\uffa7\015\uffa7\017\uffa7\020\uffa7" +
    "\033\uffa7\036\uffa7\037\uffa7\043\uffa7\044\uffa7\046\uffa7\047" +
    "\uffa7\053\uffa7\054\uffa7\064\uffa7\071\uffa7\074\uffa7\075\uffa7" +
    "\076\uffa7\077\uffa7\100\uffa7\102\uffa7\104\uffa7\105\uffa7\106" +
    "\uffa7\107\uffa7\111\uffa7\112\uffa7\113\uffa7\114\uffa7\116\uffa7" +
    "\117\uffa7\120\uffa7\121\uffa7\122\uffa7\123\uffa7\001\002\000" +
    "\110\010\uffb3\015\uffb3\017\uffb3\020\uffb3\033\uffb3\036\uffb3" +
    "\037\uffb3\043\uffb3\044\uffb3\046\uffb3\047\uffb3\053\uffb3\054" +
    "\uffb3\064\uffb3\071\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3" +
    "\100\uffb3\102\uffb3\104\uffb3\105\uffb3\106\uffb3\107\uffb3\111" +
    "\uffb3\112\uffb3\113\uffb3\114\uffb3\116\uffb3\117\uffb3\120\uffb3" +
    "\121\uffb3\122\uffb3\123\uffb3\001\002\000\110\010\uffb2\015" +
    "\uffb2\017\uffb2\020\uffb2\033\uffb2\036\uffb2\037\uffb2\043\uffb2" +
    "\044\uffb2\046\uffb2\047\uffb2\053\uffb2\054\uffb2\064\uffb2\071" +
    "\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\102\uffb2" +
    "\104\uffb2\105\uffb2\106\uffb2\107\uffb2\111\uffb2\112\uffb2\113" +
    "\uffb2\114\uffb2\116\uffb2\117\uffb2\120\uffb2\121\uffb2\122\uffb2" +
    "\123\uffb2\001\002\000\004\123\u0116\001\002\000\046\004" +
    "\uff75\006\uff75\007\uff75\011\uff75\012\uff75\013\u0117\015\u0102" +
    "\024\uff75\025\uff75\026\uff75\027\uff75\030\uff75\031\uff75\032" +
    "\uff75\033\uff75\034\uff75\035\uff75\041\uff75\001\002\000\050" +
    "\015\067\033\134\036\130\044\374\046\142\064\143\071" +
    "\135\074\133\075\132\076\131\102\121\104\115\111\377" +
    "\112\100\117\105\120\104\121\137\122\074\123\145\001" +
    "\002\000\004\011\u0119\001\002\000\110\010\uffad\015\uffad" +
    "\017\uffad\020\uffad\033\uffad\036\uffad\037\uffad\043\uffad\044" +
    "\uffad\046\uffad\047\uffad\053\uffad\054\uffad\064\uffad\071\uffad" +
    "\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad\102\uffad\104" +
    "\uffad\105\uffad\106\uffad\107\uffad\111\uffad\112\uffad\113\uffad" +
    "\114\uffad\116\uffad\117\uffad\120\uffad\121\uffad\122\uffad\123" +
    "\uffad\001\002\000\036\015\067\033\134\036\130\046\142" +
    "\064\143\071\135\076\131\111\150\112\100\117\105\120" +
    "\104\121\137\122\074\123\145\001\002\000\006\005\u011c" +
    "\024\157\001\002\000\036\015\067\033\134\036\130\046" +
    "\142\064\143\071\135\076\131\111\150\112\100\117\105" +
    "\120\104\121\137\122\074\123\145\001\002\000\006\016" +
    "\u011e\024\157\001\002\000\004\011\u011f\001\002\000\110" +
    "\010\uff9f\015\uff9f\017\uff9f\020\uff9f\033\uff9f\036\uff9f\037" +
    "\uff9f\043\uff9f\044\uff9f\046\uff9f\047\uff9f\053\uff9f\054\uff9f" +
    "\064\uff9f\071\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f\100" +
    "\uff9f\102\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\111\uff9f" +
    "\112\uff9f\113\uff9f\114\uff9f\116\uff9f\117\uff9f\120\uff9f\121" +
    "\uff9f\122\uff9f\123\uff9f\001\002\000\050\015\067\033\134" +
    "\036\130\044\374\046\142\064\143\071\135\074\133\075" +
    "\132\076\131\102\121\104\115\111\377\112\100\117\105" +
    "\120\104\121\137\122\074\123\145\001\002\000\004\011" +
    "\u0122\001\002\000\110\010\uffae\015\uffae\017\uffae\020\uffae" +
    "\033\uffae\036\uffae\037\uffae\043\uffae\044\uffae\046\uffae\047" +
    "\uffae\053\uffae\054\uffae\064\uffae\071\uffae\074\uffae\075\uffae" +
    "\076\uffae\077\uffae\100\uffae\102\uffae\104\uffae\105\uffae\106" +
    "\uffae\107\uffae\111\uffae\112\uffae\113\uffae\114\uffae\116\uffae" +
    "\117\uffae\120\uffae\121\uffae\122\uffae\123\uffae\001\002\000" +
    "\006\011\u0124\024\157\001\002\000\110\010\uffa2\015\uffa2" +
    "\017\uffa2\020\uffa2\033\uffa2\036\uffa2\037\uffa2\043\uffa2\044" +
    "\uffa2\046\uffa2\047\uffa2\053\uffa2\054\uffa2\064\uffa2\071\uffa2" +
    "\074\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2\102\uffa2\104" +
    "\uffa2\105\uffa2\106\uffa2\107\uffa2\111\uffa2\112\uffa2\113\uffa2" +
    "\114\uffa2\116\uffa2\117\uffa2\120\uffa2\121\uffa2\122\uffa2\123" +
    "\uffa2\001\002\000\004\047\u0126\001\002\000\004\017\u0127" +
    "\001\002\000\024\010\223\076\131\111\227\112\100\117" +
    "\105\120\104\121\137\122\010\123\230\001\002\000\004" +
    "\020\u0129\001\002\000\112\010\uff4e\015\uff4e\017\uff4e\020" +
    "\uff4e\033\uff4e\036\uff4e\037\uff4e\043\uff4e\044\uff4e\046\uff4e" +
    "\047\uff4e\053\uff4e\054\uff4e\061\u012b\064\uff4e\071\uff4e\074" +
    "\uff4e\075\uff4e\076\uff4e\077\uff4e\100\uff4e\102\uff4e\104\uff4e" +
    "\105\uff4e\106\uff4e\107\uff4e\111\uff4e\112\uff4e\113\uff4e\114" +
    "\uff4e\116\uff4e\117\uff4e\120\uff4e\121\uff4e\122\uff4e\123\uff4e" +
    "\001\002\000\110\010\uffa1\015\uffa1\017\uffa1\020\uffa1\033" +
    "\uffa1\036\uffa1\037\uffa1\043\uffa1\044\uffa1\046\uffa1\047\uffa1" +
    "\053\uffa1\054\uffa1\064\uffa1\071\uffa1\074\uffa1\075\uffa1\076" +
    "\uffa1\077\uffa1\100\uffa1\102\uffa1\104\uffa1\105\uffa1\106\uffa1" +
    "\107\uffa1\111\uffa1\112\uffa1\113\uffa1\114\uffa1\116\uffa1\117" +
    "\uffa1\120\uffa1\121\uffa1\122\uffa1\123\uffa1\001\002\000\102" +
    "\010\uff59\015\uff59\017\uff59\033\uff59\036\uff59\037\uff59\043" +
    "\uff59\044\uff59\046\uff59\053\uff59\064\uff59\071\uff59\074\uff59" +
    "\075\uff59\076\uff59\077\uff59\100\uff59\102\uff59\104\uff59\105" +
    "\uff59\106\uff59\107\uff59\111\uff59\112\uff59\113\uff59\114\uff59" +
    "\116\uff59\117\uff59\120\uff59\121\uff59\122\uff59\123\uff59\001" +
    "\002\000\110\010\uff4f\015\uff4f\017\uff4f\020\uff4f\033\uff4f" +
    "\036\uff4f\037\uff4f\043\uff4f\044\uff4f\046\uff4f\047\uff4f\053" +
    "\uff4f\054\uff4f\064\uff4f\071\uff4f\074\uff4f\075\uff4f\076\uff4f" +
    "\077\uff4f\100\uff4f\102\uff4f\104\uff4f\105\uff4f\106\uff4f\107" +
    "\uff4f\111\uff4f\112\uff4f\113\uff4f\114\uff4f\116\uff4f\117\uff4f" +
    "\120\uff4f\121\uff4f\122\uff4f\123\uff4f\001\002\000\006\011" +
    "\u012f\013\u012e\001\002\000\050\015\067\033\134\036\130" +
    "\044\374\046\142\064\143\071\135\074\133\075\132\076" +
    "\131\102\121\104\115\111\377\112\100\117\105\120\104" +
    "\121\137\122\074\123\145\001\002\000\110\010\uffac\015" +
    "\uffac\017\uffac\020\uffac\033\uffac\036\uffac\037\uffac\043\uffac" +
    "\044\uffac\046\uffac\047\uffac\053\uffac\054\uffac\064\uffac\071" +
    "\uffac\074\uffac\075\uffac\076\uffac\077\uffac\100\uffac\102\uffac" +
    "\104\uffac\105\uffac\106\uffac\107\uffac\111\uffac\112\uffac\113" +
    "\uffac\114\uffac\116\uffac\117\uffac\120\uffac\121\uffac\122\uffac" +
    "\123\uffac\001\002\000\004\011\u0131\001\002\000\110\010" +
    "\uffab\015\uffab\017\uffab\020\uffab\033\uffab\036\uffab\037\uffab" +
    "\043\uffab\044\uffab\046\uffab\047\uffab\053\uffab\054\uffab\064" +
    "\uffab\071\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab" +
    "\102\uffab\104\uffab\105\uffab\106\uffab\107\uffab\111\uffab\112" +
    "\uffab\113\uffab\114\uffab\116\uffab\117\uffab\120\uffab\121\uffab" +
    "\122\uffab\123\uffab\001\002\000\006\122\074\123\u0133\001" +
    "\002\000\006\015\ufff8\037\ufff8\001\002\000\006\015\ufff7" +
    "\037\ufff7\001\002\000\072\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\011\ufff9\012\ufff9\015\ufff9\016\ufff9\017\ufff9\021\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031" +
    "\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\054\ufff9\067\ufff9\110\ufff9\123\ufff9\001\002\000" +
    "\036\015\067\033\134\036\130\046\142\064\143\071\135" +
    "\076\131\111\150\112\100\117\105\120\104\121\137\122" +
    "\074\123\145\001\002\000\006\016\u0138\024\157\001\002" +
    "\000\102\010\uff59\015\uff59\017\uff59\033\uff59\036\uff59\037" +
    "\uff59\043\uff59\044\uff59\046\uff59\053\uff59\064\uff59\071\uff59" +
    "\074\uff59\075\uff59\076\uff59\077\uff59\100\uff59\102\uff59\104" +
    "\uff59\105\uff59\106\uff59\107\uff59\111\uff59\112\uff59\113\uff59" +
    "\114\uff59\116\uff59\117\uff59\120\uff59\121\uff59\122\uff59\123" +
    "\uff59\001\002\000\110\010\uffaa\015\uffaa\017\uffaa\020\uffaa" +
    "\033\uffaa\036\uffaa\037\uffaa\043\uffaa\044\uffaa\046\uffaa\047" +
    "\uffaa\053\uffaa\054\uffaa\064\uffaa\071\uffaa\074\uffaa\075\uffaa" +
    "\076\uffaa\077\uffaa\100\uffaa\102\uffaa\104\uffaa\105\uffaa\106" +
    "\uffaa\107\uffaa\111\uffaa\112\uffaa\113\uffaa\114\uffaa\116\uffaa" +
    "\117\uffaa\120\uffaa\121\uffaa\122\uffaa\123\uffaa\001\002\000" +
    "\006\016\u013b\024\157\001\002\000\062\004\uff71\005\uff71" +
    "\006\uff71\007\uff71\011\uff71\012\uff71\016\uff71\017\uff71\023" +
    "\uff71\024\uff71\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71" +
    "\032\uff71\033\uff71\034\uff71\035\uff71\040\uff71\041\uff71\054" +
    "\uff71\067\uff71\110\uff71\001\002\000\104\010\uff59\015\uff59" +
    "\017\uff59\020\u013d\033\uff59\036\uff59\037\uff59\043\uff59\044" +
    "\uff59\046\uff59\053\uff59\064\uff59\071\uff59\074\uff59\075\uff59" +
    "\076\uff59\077\uff59\100\uff59\102\uff59\104\uff59\105\uff59\106" +
    "\uff59\107\uff59\111\uff59\112\uff59\113\uff59\114\uff59\116\uff59" +
    "\117\uff59\120\uff59\121\uff59\122\uff59\123\uff59\001\002\000" +
    "\110\010\uffa6\015\uffa6\017\uffa6\020\uffa6\033\uffa6\036\uffa6" +
    "\037\uffa6\043\uffa6\044\uffa6\046\uffa6\047\uffa6\053\uffa6\054" +
    "\uffa6\064\uffa6\071\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6" +
    "\100\uffa6\102\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6\111" +
    "\uffa6\112\uffa6\113\uffa6\114\uffa6\116\uffa6\117\uffa6\120\uffa6" +
    "\121\uffa6\122\uffa6\123\uffa6\001\002\000\036\015\067\033" +
    "\134\036\130\046\142\064\143\071\135\076\131\111\150" +
    "\112\100\117\105\120\104\121\137\122\074\123\145\001" +
    "\002\000\006\016\u0140\024\157\001\002\000\132\006\uff71" +
    "\007\uff71\010\101\012\uff71\015\067\017\066\024\uff71\025" +
    "\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033\134" +
    "\034\uff71\035\uff71\036\130\043\120\044\116\046\113\053" +
    "\106\064\060\071\135\074\133\075\132\076\131\077\126" +
    "\100\122\102\121\104\115\105\114\106\112\107\111\110" +
    "\uff71\111\107\112\100\113\077\114\076\116\072\117\105" +
    "\120\104\121\137\122\074\123\102\001\002\000\110\010" +
    "\uffa9\015\uffa9\017\uffa9\020\uffa9\033\uffa9\036\uffa9\037\uffa9" +
    "\043\uffa9\044\uffa9\046\uffa9\047\uffa9\053\uffa9\054\u0142\064" +
    "\uffa9\071\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9" +
    "\102\uffa9\104\uffa9\105\uffa9\106\uffa9\107\uffa9\111\uffa9\112" +
    "\uffa9\113\uffa9\114\uffa9\116\uffa9\117\uffa9\120\uffa9\121\uffa9" +
    "\122\uffa9\123\uffa9\001\002\000\100\010\101\015\067\017" +
    "\066\033\134\036\130\043\120\044\116\046\113\053\106" +
    "\064\060\071\135\074\133\075\132\076\131\077\126\100" +
    "\122\102\121\104\115\105\114\106\112\107\111\111\107" +
    "\112\100\113\077\114\076\116\072\117\105\120\104\121" +
    "\137\122\074\123\102\001\002\000\110\010\uffa8\015\uffa8" +
    "\017\uffa8\020\uffa8\033\uffa8\036\uffa8\037\uffa8\043\uffa8\044" +
    "\uffa8\046\uffa8\047\uffa8\053\uffa8\054\uffa8\064\uffa8\071\uffa8" +
    "\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\102\uffa8\104" +
    "\uffa8\105\uffa8\106\uffa8\107\uffa8\111\uffa8\112\uffa8\113\uffa8" +
    "\114\uffa8\116\uffa8\117\uffa8\120\uffa8\121\uffa8\122\uffa8\123" +
    "\uffa8\001\002\000\026\002\uff52\017\uff52\037\uff52\050\uff52" +
    "\051\uff52\052\uff52\055\uff52\070\uff52\073\uff52\115\uff52\001" +
    "\002\000\004\122\u01b2\001\002\000\004\122\u01a8\001\002" +
    "\000\004\122\u017d\001\002\000\006\010\101\122\010\001" +
    "\002\000\004\122\u017a\001\002\000\004\122\u014b\001\002" +
    "\000\010\015\u014c\017\u014e\065\u014d\001\002\000\010\010" +
    "\101\016\uffe7\122\010\001\002\000\004\122\010\001\002" +
    "\000\012\010\uffb8\017\uffb8\020\uffb8\122\uffb8\001\002\000" +
    "\012\010\101\017\053\020\uff4c\122\010\001\002\000\010" +
    "\010\uffb8\020\uffb8\122\uffb8\001\002\000\012\010\uffb7\017" +
    "\uffb7\020\uffb7\122\uffb7\001\002\000\004\123\u0153\001\002" +
    "\000\010\011\u0156\013\u0155\015\u0154\001\002\000\010\010" +
    "\101\016\uffe7\122\010\001\002\000\036\015\067\033\134" +
    "\036\130\046\142\064\143\071\135\076\131\111\150\112" +
    "\100\117\105\120\104\121\137\122\074\123\145\001\002" +
    "\000\012\010\uffb6\017\uffb6\020\uffb6\122\uffb6\001\002\000" +
    "\006\011\u0158\024\157\001\002\000\012\010\uffb5\017\uffb5" +
    "\020\uffb5\122\uffb5\001\002\000\004\016\u015d\001\002\000" +
    "\006\005\u015b\016\uffe6\001\002\000\010\010\101\016\uffe7" +
    "\122\010\001\002\000\004\016\uffe5\001\002\000\004\017" +
    "\u015e\001\002\000\104\010\uff54\015\uff54\017\uff54\020\uff54" +
    "\033\uff54\036\uff54\037\uff54\043\uff54\044\uff54\046\uff54\053" +
    "\uff54\064\uff54\071\uff54\074\uff54\075\uff54\076\uff54\077\uff54" +
    "\100\uff54\102\uff54\104\uff54\105\uff54\106\uff54\107\uff54\111" +
    "\uff54\112\uff54\113\uff54\114\uff54\116\uff54\117\uff54\120\uff54" +
    "\121\uff54\122\uff54\123\uff54\001\002\000\104\010\uff59\015" +
    "\uff59\017\uff59\020\u0160\033\uff59\036\uff59\037\uff59\043\uff59" +
    "\044\uff59\046\uff59\053\uff59\064\uff59\071\uff59\074\uff59\075" +
    "\uff59\076\uff59\077\uff59\100\uff59\102\uff59\104\uff59\105\uff59" +
    "\106\uff59\107\uff59\111\uff59\112\uff59\113\uff59\114\uff59\116" +
    "\uff59\117\uff59\120\uff59\121\uff59\122\uff59\123\uff59\001\002" +
    "\000\012\010\uffb4\017\uffb4\020\uffb4\122\uffb4\001\002\000" +
    "\010\010\101\020\u0162\122\010\001\002\000\026\002\uffcb" +
    "\017\uffcb\037\uffcb\050\uffcb\051\uffcb\052\uffcb\055\uffcb\070" +
    "\uffcb\073\uffcb\115\uffcb\001\002\000\004\017\u0167\001\002" +
    "\000\006\005\u0165\017\ufff1\001\002\000\004\122\010\001" +
    "\002\000\004\017\ufff0\001\002\000\012\010\uffb8\017\uffb8" +
    "\020\uffb8\122\uffb8\001\002\000\012\010\101\017\053\020" +
    "\uff4c\122\010\001\002\000\010\010\uffb8\020\uffb8\122\uffb8" +
    "\001\002\000\010\010\101\020\u016b\122\010\001\002\000" +
    "\026\002\uffc9\017\uffc9\037\uffc9\050\uffc9\051\uffc9\052\uffc9" +
    "\055\uffc9\070\uffc9\073\uffc9\115\uffc9\001\002\000\004\016" +
    "\u016d\001\002\000\006\017\u016f\065\u016e\001\002\000\004" +
    "\122\010\001\002\000\012\010\uffb8\017\uffb8\020\uffb8\122" +
    "\uffb8\001\002\000\012\010\101\017\053\020\uff4c\122\010" +
    "\001\002\000\010\010\uffb8\020\uffb8\122\uffb8\001\002\000" +
    "\010\010\101\020\u0173\122\010\001\002\000\026\002\uffca" +
    "\017\uffca\037\uffca\050\uffca\051\uffca\052\uffca\055\uffca\070" +
    "\uffca\073\uffca\115\uffca\001\002\000\004\017\u0175\001\002" +
    "\000\012\010\uffb8\017\uffb8\020\uffb8\122\uffb8\001\002\000" +
    "\012\010\101\017\053\020\uff4c\122\010\001\002\000\010" +
    "\010\uffb8\020\uffb8\122\uffb8\001\002\000\010\010\101\020" +
    "\u0179\122\010\001\002\000\026\002\uffc8\017\uffc8\037\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\055\uffc8\070\uffc8\073\uffc8\115" +
    "\uffc8\001\002\000\006\006\u017b\013\u017c\001\002\000\004" +
    "\122\u018b\001\002\000\004\122\u017d\001\002\000\010\011" +
    "\uffc4\014\uffc4\015\u0183\001\002\000\006\011\uffc6\014\u0181" +
    "\001\002\000\004\011\u0180\001\002\000\026\002\uffd1\017" +
    "\uffd1\037\uffd1\050\uffd1\051\uffd1\052\uffd1\055\uffd1\070\uffd1" +
    "\073\uffd1\115\uffd1\001\002\000\004\122\u017d\001\002\000" +
    "\004\011\uffc5\001\002\000\010\010\101\016\uffc2\122\010" +
    "\001\002\000\004\016\u018a\001\002\000\010\005\uffbf\016" +
    "\uffbf\123\u0189\001\002\000\006\005\u0187\016\uffc1\001\002" +
    "\000\010\010\101\016\uffc2\122\010\001\002\000\004\016" +
    "\uffc0\001\002\000\006\005\uffbe\016\uffbe\001\002\000\006" +
    "\011\uffc3\014\uffc3\001\002\000\006\005\u0191\007\ufff3\001" +
    "\002\000\004\007\u018d\001\002\000\004\013\u018e\001\002" +
    "\000\004\122\u017d\001\002\000\004\011\u0190\001\002\000" +
    "\026\002\uffd0\017\uffd0\037\uffd0\050\uffd0\051\uffd0\052\uffd0" +
    "\055\uffd0\070\uffd0\073\uffd0\115\uffd0\001\002\000\004\122" +
    "\u018b\001\002\000\004\007\ufff2\001\002\000\004\123\u0194" +
    "\001\002\000\006\006\u0195\015\u0196\001\002\000\004\122" +
    "\u018b\001\002\000\010\010\101\016\uffe7\122\010\001\002" +
    "\000\004\016\u0198\001\002\000\004\013\u0199\001\002\000" +
    "\040\015\067\033\134\036\130\045\u019a\046\142\064\143" +
    "\071\135\076\131\111\150\112\100\117\105\120\104\121" +
    "\137\122\074\123\145\001\002\000\004\011\uffbd\001\002" +
    "\000\006\011\uffbc\024\157\001\002\000\004\011\u019d\001" +
    "\002\000\026\002\uffcf\017\uffcf\037\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\055\uffcf\070\uffcf\073\uffcf\115\uffcf\001\002\000" +
    "\004\007\u019f\001\002\000\004\015\u01a0\001\002\000\010" +
    "\010\101\016\uffe7\122\010\001\002\000\004\016\u01a2\001" +
    "\002\000\004\013\u01a3\001\002\000\040\015\067\033\134" +
    "\036\130\045\u019a\046\142\064\143\071\135\076\131\111" +
    "\150\112\100\117\105\120\104\121\137\122\074\123\145" +
    "\001\002\000\004\011\u01a5\001\002\000\026\002\uffce\017" +
    "\uffce\037\uffce\050\uffce\051\uffce\052\uffce\055\uffce\070\uffce" +
    "\073\uffce\115\uffce\001\002\000\004\011\u01a7\001\002\000" +
    "\026\002\uffc7\017\uffc7\037\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\055\uffc7\070\uffc7\073\uffc7\115\uffc7\001\002\000\006\006" +
    "\u01a9\013\u01aa\001\002\000\004\122\u018b\001\002\000\006" +
    "\010\101\122\010\001\002\000\004\011\u01ac\001\002\000" +
    "\026\002\uffd3\017\uffd3\037\uffd3\050\uffd3\051\uffd3\052\uffd3" +
    "\055\uffd3\070\uffd3\073\uffd3\115\uffd3\001\002\000\004\007" +
    "\u01ae\001\002\000\004\013\u01af\001\002\000\006\010\101" +
    "\122\010\001\002\000\004\011\u01b1\001\002\000\026\002" +
    "\uffd2\017\uffd2\037\uffd2\050\uffd2\051\uffd2\052\uffd2\055\uffd2" +
    "\070\uffd2\073\uffd2\115\uffd2\001\002\000\006\017\u01b4\057" +
    "\u01b3\001\002\000\004\122\010\001\002\000\012\010\uffbb" +
    "\020\uffbb\037\uffbb\122\uffbb\001\002\000\012\010\uff59\020" +
    "\u01b8\037\uff59\122\uff59\001\002\000\004\011\u01be\001\002" +
    "\000\010\010\101\037\127\122\010\001\002\000\026\002" +
    "\uffcd\017\uffcd\037\uffcd\050\uffcd\051\uffcd\052\uffcd\055\uffcd" +
    "\070\uffcd\073\uffcd\115\uffcd\001\002\000\004\123\u01ba\001" +
    "\002\000\004\015\u01bb\001\002\000\010\010\101\016\uffe7" +
    "\122\010\001\002\000\004\016\u01bd\001\002\000\004\011" +
    "\uffb9\001\002\000\012\010\uffba\020\uffba\037\uffba\122\uffba" +
    "\001\002\000\004\017\u01c0\001\002\000\012\010\uffbb\020" +
    "\uffbb\037\uffbb\122\uffbb\001\002\000\012\010\uff59\020\u01c2" +
    "\037\uff59\122\uff59\001\002\000\026\002\uffcc\017\uffcc\037" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\055\uffcc\070\uffcc\073\uffcc" +
    "\115\uffcc\001\002\000\032\002\uffd6\017\uffd6\037\uffd6\050" +
    "\uffd6\051\uffd6\052\uffd6\055\uffd6\060\uffd6\066\uffd6\070\uffd6" +
    "\073\uffd6\115\uffd6\001\002\000\004\122\010\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c3\000\006\015\003\017\004\001\001\000\002\001" +
    "\001\000\004\016\005\001\001\000\002\001\001\000\004" +
    "\003\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\012\001\001\000\006\020\015\023\013\001\001" +
    "\000\010\022\034\024\040\070\036\001\001\000\006\005" +
    "\022\010\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\025\001\001" +
    "\000\002\001\001\000\006\005\022\010\027\001\001\000" +
    "\002\001\001\000\004\003\031\001\001\000\002\001\001" +
    "\000\004\005\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\063\050\067\051\072\047" +
    "\001\001\000\002\001\001\000\006\005\022\010\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\044" +
    "\001\001\000\002\001\001\000\004\003\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\u0143\062\116" +
    "\001\001\000\002\001\001\000\004\066\053\001\001\000" +
    "\006\063\055\065\054\001\001\000\002\001\001\000\042" +
    "\002\070\003\124\004\135\011\074\037\107\043\123\045" +
    "\122\046\072\047\067\050\064\051\063\052\062\053\061" +
    "\054\060\061\102\062\116\001\001\000\002\001\001\000" +
    "\030\002\070\003\146\004\135\045\212\046\072\047\067" +
    "\050\064\051\063\052\062\053\061\054\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\u013b\001\001\000" +
    "\030\002\070\003\146\004\135\045\u0139\046\072\047\067" +
    "\050\064\051\063\052\062\053\061\054\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\063" +
    "\055\065\u0124\001\001\000\030\002\070\003\146\004\135" +
    "\045\u0122\046\072\047\067\050\064\051\063\052\062\053" +
    "\061\054\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\002" +
    "\070\003\146\004\135\045\u0107\046\072\047\067\050\064" +
    "\051\063\052\062\053\061\054\060\001\001\000\034\002" +
    "\070\003\146\004\135\043\374\045\375\046\072\047\067" +
    "\050\064\051\063\052\062\053\061\054\060\061\102\001" +
    "\001\000\002\001\001\000\032\002\070\003\146\004\135" +
    "\042\341\045\343\046\072\047\067\050\064\051\063\052" +
    "\062\053\061\054\060\001\001\000\002\001\001\000\030" +
    "\002\070\003\146\004\135\045\337\046\072\047\067\050" +
    "\064\051\063\052\062\053\061\054\060\001\001\000\002" +
    "\001\001\000\030\002\070\003\146\004\135\045\335\046" +
    "\072\047\067\050\064\051\063\052\062\053\061\054\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\002\070\003\146\004\135\045\311\046\072" +
    "\047\067\050\064\051\063\052\062\053\061\054\060\001" +
    "\001\000\034\002\070\003\124\004\135\011\303\045\304" +
    "\046\072\047\067\050\064\051\063\052\062\053\061\054" +
    "\060\064\305\001\001\000\014\002\070\003\146\004\135" +
    "\053\302\054\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\270\001\001\000\014\002\070\003\146" +
    "\004\135\053\266\054\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\070\003\146" +
    "\004\135\044\244\045\145\046\072\047\067\050\064\051" +
    "\063\052\062\053\061\054\060\001\001\000\032\002\070" +
    "\003\146\004\135\044\143\045\145\046\072\047\067\050" +
    "\064\051\063\052\062\053\061\054\060\001\001\000\030" +
    "\002\070\003\146\004\135\045\217\046\072\047\067\050" +
    "\064\051\063\052\062\053\061\054\060\001\001\000\030" +
    "\002\070\003\146\004\135\045\212\046\072\047\067\050" +
    "\064\051\063\052\062\053\061\054\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\070\003\146\004\135\044\153\045\145\046" +
    "\072\047\067\050\064\051\063\052\062\053\061\054\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\002" +
    "\070\003\146\004\135\044\210\045\145\046\072\047\067" +
    "\050\064\051\063\052\062\053\061\054\060\001\001\000" +
    "\026\002\070\003\146\004\135\046\157\047\067\050\064" +
    "\051\063\052\062\053\061\054\060\001\001\000\002\001" +
    "\001\000\024\002\070\003\146\004\135\047\161\050\064" +
    "\051\063\052\062\053\061\054\060\001\001\000\002\001" +
    "\001\000\022\002\070\003\146\004\135\050\207\051\063" +
    "\052\062\053\061\054\060\001\001\000\022\002\070\003" +
    "\146\004\135\050\164\051\063\052\062\053\061\054\060" +
    "\001\001\000\002\001\001\000\020\002\070\003\146\004" +
    "\135\051\206\052\062\053\061\054\060\001\001\000\020" +
    "\002\070\003\146\004\135\051\205\052\062\053\061\054" +
    "\060\001\001\000\020\002\070\003\146\004\135\051\204" +
    "\052\062\053\061\054\060\001\001\000\020\002\070\003" +
    "\146\004\135\051\171\052\062\053\061\054\060\001\001" +
    "\000\002\001\001\000\016\002\070\003\146\004\135\052" +
    "\203\053\061\054\060\001\001\000\016\002\070\003\146" +
    "\004\135\052\174\053\061\054\060\001\001\000\002\001" +
    "\001\000\014\002\070\003\146\004\135\053\202\054\060" +
    "\001\001\000\014\002\070\003\146\004\135\053\201\054" +
    "\060\001\001\000\014\002\070\003\146\004\135\053\200" +
    "\054\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\070" +
    "\003\146\004\135\045\214\046\072\047\067\050\064\051" +
    "\063\052\062\053\061\054\060\001\001\000\002\001\001" +
    "\000\030\002\070\003\146\004\135\045\216\046\072\047" +
    "\067\050\064\051\063\052\062\053\061\054\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\223\003" +
    "\221\055\225\056\230\060\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\223\003\221\055" +
    "\225\056\233\060\224\001\001\000\002\001\001\000\030" +
    "\002\070\003\146\004\135\045\235\046\072\047\067\050" +
    "\064\051\063\052\062\053\061\054\060\001\001\000\002" +
    "\001\001\000\012\002\223\003\221\057\240\060\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\223\003\221\057\243\060\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\251\011\247\013\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\251\011\253" +
    "\012\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\251\011\253\012\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\070\003" +
    "\146\004\135\045\262\046\072\047\067\050\064\051\063" +
    "\052\062\053\061\054\060\001\001\000\002\001\001\000" +
    "\030\002\070\003\146\004\135\045\264\046\072\047\067" +
    "\050\064\051\063\052\062\053\061\054\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\274\001\001\000\002\001\001\000\032\002\070\003" +
    "\146\004\135\044\272\045\145\046\072\047\067\050\064" +
    "\051\063\052\062\053\061\054\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\070" +
    "\003\146\004\135\044\276\045\145\046\072\047\067\050" +
    "\064\051\063\052\062\053\061\054\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\070\003" +
    "\146\004\135\045\310\046\072\047\067\050\064\051\063" +
    "\052\062\053\061\054\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\070" +
    "\003\146\004\135\045\323\046\072\047\067\050\064\051" +
    "\063\052\062\053\061\054\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\002\070\003" +
    "\146\004\135\044\327\045\145\046\072\047\067\050\064" +
    "\051\063\052\062\053\061\054\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\070" +
    "\003\146\004\135\044\333\045\145\046\072\047\067\050" +
    "\064\051\063\052\062\053\061\054\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\002\070\003\146\004\135\045\352\046" +
    "\072\047\067\050\064\051\063\052\062\053\061\054\060" +
    "\001\001\000\002\001\001\000\030\002\070\003\146\004" +
    "\135\045\354\046\072\047\067\050\064\051\063\052\062" +
    "\053\061\054\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\070" +
    "\003\146\004\135\044\361\045\145\046\072\047\067\050" +
    "\064\051\063\052\062\053\061\054\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\002" +
    "\070\003\146\004\135\042\366\045\367\046\072\047\067" +
    "\050\064\051\063\052\062\053\061\054\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\002" +
    "\070\003\146\004\135\045\u0106\046\072\047\067\050\064" +
    "\051\063\052\062\053\061\054\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\070\003\146\004\135\044" +
    "\u0102\045\145\046\072\047\067\050\064\051\063\052\062" +
    "\053\061\054\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\002\223\003\221\040\u010b\041" +
    "\u0109\055\225\056\230\060\u010a\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\223\003\221\040\u010b\041" +
    "\u010c\060\u010d\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\063\055\065\u010f\001\001\000\002\001\001\000" +
    "\034\002\070\003\146\004\135\045\235\046\072\047\067" +
    "\050\064\051\063\052\062\053\061\054\060\063\055\065" +
    "\u010f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\070\003\146\004\135\043\u0117\045\375\046\072\047\067" +
    "\050\064\051\063\052\062\053\061\054\060\061\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\070" +
    "\003\146\004\135\045\u011a\046\072\047\067\050\064\051" +
    "\063\052\062\053\061\054\060\001\001\000\002\001\001" +
    "\000\030\002\070\003\146\004\135\045\u011c\046\072\047" +
    "\067\050\064\051\063\052\062\053\061\054\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\002\070\003\146\004\135\043\u0120\045\375\046\072" +
    "\047\067\050\064\051\063\052\062\053\061\054\060\061" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\002\223\003\221\040\u010b\041\u0127\060\u010d" +
    "\001\001\000\002\001\001\000\004\071\u0129\001\001\000" +
    "\002\001\001\000\006\063\055\065\u012b\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\002\070\003\146\004" +
    "\135\043\u012f\045\375\046\072\047\067\050\064\051\063" +
    "\052\062\053\061\054\060\061\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\u0134" +
    "\004\u0133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\070\003\146\004\135\045\u0136" +
    "\046\072\047\067\050\064\051\063\052\062\053\061\054" +
    "\060\001\001\000\002\001\001\000\006\063\055\065\u0138" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\063\055\065\054\001\001\000\002\001\001" +
    "\000\030\002\070\003\146\004\135\045\u013e\046\072\047" +
    "\067\050\064\051\063\052\062\053\061\054\060\001\001" +
    "\000\002\001\001\000\040\002\070\003\124\004\135\011" +
    "\074\037\u0140\043\123\045\122\046\072\047\067\050\064" +
    "\051\063\052\062\053\061\054\060\061\102\001\001\000" +
    "\002\001\001\000\040\002\070\003\124\004\135\011\074" +
    "\037\u0142\043\123\045\122\046\072\047\067\050\064\051" +
    "\063\052\062\053\061\054\060\061\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\u01a5\001\001\000\006\003\251\011\u0192" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\251\011\247\013\u0159\014\u016b\001\001" +
    "\000\006\003\u0163\007\u0162\001\001\000\004\035\u014e\001" +
    "\001\000\012\003\251\011\u0151\036\u0150\072\u014f\001\001" +
    "\000\004\035\u0160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\251\011\247\013\u0159" +
    "\014\u0158\001\001\000\030\002\070\003\146\004\135\045" +
    "\u0156\046\072\047\067\050\064\051\063\052\062\053\061" +
    "\054\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\251\011\247\013\u0159\014\u015b\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\u015e\001\001\000\006" +
    "\063\055\065\054\001\001\000\002\001\001\000\010\003" +
    "\251\011\u0151\036\u0150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\u0163\007\u0165\001" +
    "\001\000\002\001\001\000\004\035\u0167\001\001\000\012" +
    "\003\251\011\u0151\036\u0150\072\u0168\001\001\000\004\035" +
    "\u0169\001\001\000\010\003\251\011\u0151\036\u0150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\u0163\007\u0173\001\001\000\004\035\u016f\001\001" +
    "\000\012\003\251\011\u0151\036\u0150\072\u0170\001\001\000" +
    "\004\035\u0171\001\001\000\010\003\251\011\u0151\036\u0150" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\u0175\001\001\000\012\003\251\011\u0151\036\u0150\072\u0176" +
    "\001\001\000\004\035\u0177\001\001\000\010\003\251\011" +
    "\u0151\036\u0150\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u018b\001\001\000\006\026\u017e\027\u017d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\u0181\027\u017d\001\001\000" +
    "\002\001\001\000\012\003\251\011\u0184\030\u0183\031\u0185" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\251\011\u0184\030\u0187\031\u0185\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\u018e\027\u017d\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u0191\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u019d\001\001\000" +
    "\012\003\251\011\247\013\u0159\014\u0196\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\070\003\146\004" +
    "\135\032\u019b\045\u019a\046\072\047\067\050\064\051\063" +
    "\052\062\053\061\054\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\251\011\247\013" +
    "\u0159\014\u01a0\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\070\003\146\004\135\032\u01a3\045\u019a\046" +
    "\072\047\067\050\064\051\063\052\062\053\061\054\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u01ac" +
    "\001\001\000\006\003\251\011\u01aa\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\251\011\u01af\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\u0163\007\u01be" +
    "\001\001\000\004\033\u01b4\001\001\000\006\034\u01b5\063" +
    "\u01b6\001\001\000\002\001\001\000\010\003\251\011\u01b8" +
    "\062\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\251\011\247\013\u0159\014\u01bb" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\u01c0\001\001\000\006" +
    "\034\u01b5\063\u01b6\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\u0134\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public bnfc.abs.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (bnfc.abs.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // MaybeBlock ::= 
            {
              bnfc.abs.Absyn.MaybeBlock RESULT =null;
		 RESULT = new bnfc.abs.Absyn.NoBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeBlock",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // MaybeBlock ::= _SYMB_11 ListAnnStm _SYMB_12 
            {
              bnfc.abs.Absyn.MaybeBlock RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListAnnStm p_2 = (bnfc.abs.Absyn.ListAnnStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.JustBlock(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeBlock",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // MaybeFinally ::= 
            {
              bnfc.abs.Absyn.MaybeFinally RESULT =null;
		 RESULT = new bnfc.abs.Absyn.NoFinally(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeFinally",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // MaybeFinally ::= _SYMB_45 AnnStm 
            {
              bnfc.abs.Absyn.MaybeFinally RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.AnnStm p_2 = (bnfc.abs.Absyn.AnnStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.JustFinally(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MaybeFinally",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ListAnnDecl ::= ListAnnDecl AnnDecl 
            {
              bnfc.abs.Absyn.ListAnnDecl RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListAnnDecl p_1 = (bnfc.abs.Absyn.ListAnnDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.AnnDecl p_2 = (bnfc.abs.Absyn.AnnDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnnDecl",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // ListAnnDecl ::= 
            {
              bnfc.abs.Absyn.ListAnnDecl RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListAnnDecl(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnnDecl",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // AnnDecl ::= ListAnn Decl 
            {
              bnfc.abs.Absyn.AnnDecl RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListAnn p_1 = (bnfc.abs.Absyn.ListAnn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Decl p_2 = (bnfc.abs.Absyn.Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.AnnDeclaration(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AnnDecl",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ListAnnStm ::= ListAnnStm AnnStm 
            {
              bnfc.abs.Absyn.ListAnnStm RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListAnnStm p_1 = (bnfc.abs.Absyn.ListAnnStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.AnnStm p_2 = (bnfc.abs.Absyn.AnnStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnnStm",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ListAnnStm ::= 
            {
              bnfc.abs.Absyn.ListAnnStm RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListAnnStm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnnStm",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // AnnStm ::= ListAnn Stm 
            {
              bnfc.abs.Absyn.AnnStm RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListAnn p_1 = (bnfc.abs.Absyn.ListAnn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Stm p_2 = (bnfc.abs.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.AnnStatement(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AnnStm",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Ann_ ::= T _SYMB_30 PureExp 
            {
              bnfc.abs.Absyn.Ann_ RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.T p_1 = (bnfc.abs.Absyn.T)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.AnnWithType(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ann_",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Ann_ ::= PureExp 
            {
              bnfc.abs.Absyn.Ann_ RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.AnnNoType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ann_",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ListAnn ::= ListAnn Ann 
            {
              bnfc.abs.Absyn.ListAnn RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListAnn p_1 = (bnfc.abs.Absyn.ListAnn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Ann p_2 = (bnfc.abs.Absyn.Ann)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnn",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ListAnn ::= 
            {
              bnfc.abs.Absyn.ListAnn RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListAnn(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAnn",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Ann ::= _SYMB_27 Ann_ _SYMB_28 
            {
              bnfc.abs.Absyn.Ann RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Ann_ p_2 = (bnfc.abs.Absyn.Ann_)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.Annotation(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ann",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EffExp ::= _SYMB_57 _SYMB_9 _SYMB_10 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		 RESULT = new bnfc.abs.Absyn.Now(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EffExp ::= PureExp _SYMB_0 _SYMB_63 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new bnfc.abs.Absyn.ProTry(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EffExp ::= _SYMB_62 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ProNew(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EffExp ::= _SYMB_64 _SYMB_9 _SYMB_10 _SYMB_5 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		 RESULT = new bnfc.abs.Absyn.Readln(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EffExp ::= PureExp _SYMB_0 _SYMB_47 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new bnfc.abs.Absyn.Get(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EffExp ::= _SYMB_32 PureExp _SYMB_29 L _SYMB_9 ListPureExp _SYMB_10 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_6 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.AwaitMethCall(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EffExp ::= PureExp _SYMB_29 L _SYMB_9 ListPureExp _SYMB_10 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_5 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.AsyncMethCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EffExp ::= _SYMB_69 _SYMB_0 L _SYMB_9 ListPureExp _SYMB_10 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_5 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ThisSyncMethCall(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EffExp ::= PureExp _SYMB_0 L _SYMB_9 ListPureExp _SYMB_10 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_5 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SyncMethCall(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EffExp ::= _SYMB_56 _SYMB_54 QU _SYMB_9 ListPureExp _SYMB_10 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.QU p_3 = (bnfc.abs.Absyn.QU)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_5 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.NewLocal(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EffExp ::= _SYMB_56 QU _SYMB_9 ListPureExp _SYMB_10 
            {
              bnfc.abs.Absyn.EffExp RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.QU p_2 = (bnfc.abs.Absyn.QU)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_4 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.New(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EffExp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Pattern ::= _SYMB_4 
            {
              bnfc.abs.Absyn.Pattern RESULT =null;
		 RESULT = new bnfc.abs.Absyn.PWildCard(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Pattern ::= QU _SYMB_9 ListPattern _SYMB_10 
            {
              bnfc.abs.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.QU p_1 = (bnfc.abs.Absyn.QU)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPattern p_3 = (bnfc.abs.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.PParamConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Pattern ::= QU 
            {
              bnfc.abs.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QU p_1 = (bnfc.abs.Absyn.QU)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.PSinglConstr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Pattern ::= L 
            {
              bnfc.abs.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.PVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Pattern ::= Literal 
            {
              bnfc.abs.Absyn.Pattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Literal p_1 = (bnfc.abs.Absyn.Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.PLit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ListPattern ::= Pattern _SYMB_1 ListPattern 
            {
              bnfc.abs.Absyn.ListPattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.Pattern p_1 = (bnfc.abs.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListPattern p_3 = (bnfc.abs.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ListPattern ::= Pattern 
            {
              bnfc.abs.Absyn.ListPattern RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Pattern p_1 = (bnfc.abs.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ListPattern ::= 
            {
              bnfc.abs.Absyn.ListPattern RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ListECaseBranch ::= ECaseBranch _SYMB_5 ListECaseBranch 
            {
              bnfc.abs.Absyn.ListECaseBranch RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ECaseBranch p_1 = (bnfc.abs.Absyn.ECaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListECaseBranch p_3 = (bnfc.abs.Absyn.ListECaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListECaseBranch",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ListECaseBranch ::= ECaseBranch _SYMB_5 
            {
              bnfc.abs.Absyn.ListECaseBranch RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ECaseBranch p_1 = (bnfc.abs.Absyn.ECaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ListECaseBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListECaseBranch",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ECaseBranch ::= Pattern _SYMB_13 PureExp 
            {
              bnfc.abs.Absyn.ECaseBranch RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.Pattern p_1 = (bnfc.abs.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ECaseB(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECaseBranch",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PureExp7 ::= _SYMB_9 PureExp _SYMB_10 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PureExp7 ::= Literal 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Literal p_1 = (bnfc.abs.Absyn.Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ELit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PureExp7 ::= QU _SYMB_9 ListPureExp _SYMB_10 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.QU p_1 = (bnfc.abs.Absyn.QU)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_3 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.EParamConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PureExp7 ::= QU 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QU p_1 = (bnfc.abs.Absyn.QU)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ESinglConstr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PureExp7 ::= _SYMB_69 _SYMB_0 L 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EField(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PureExp7 ::= L 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PureExp7 ::= QL _SYMB_27 ListPureExp _SYMB_28 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.QL p_1 = (bnfc.abs.Absyn.QL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_3 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ENaryFunCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PureExp7 ::= QL _SYMB_9 ListPureExp _SYMB_10 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.QL p_1 = (bnfc.abs.Absyn.QL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListPureExp p_3 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.EFunCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp7",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PureExp6 ::= PureExp7 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // PureExp6 ::= _SYMB_23 PureExp6 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EIntNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // PureExp6 ::= _SYMB_26 PureExp6 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ELogNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp6",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PureExp5 ::= PureExp6 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PureExp5 ::= PureExp5 _SYMB_25 PureExp6 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EMod(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PureExp5 ::= PureExp5 _SYMB_24 PureExp6 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EDiv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PureExp5 ::= PureExp5 _SYMB_6 PureExp6 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EMul(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp5",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PureExp4 ::= PureExp5 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PureExp4 ::= PureExp4 _SYMB_23 PureExp5 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ESub(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PureExp4 ::= PureExp4 _SYMB_22 PureExp5 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EAdd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp4",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PureExp3 ::= PureExp4 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PureExp3 ::= PureExp3 _SYMB_21 PureExp4 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EGe(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PureExp3 ::= PureExp3 _SYMB_3 PureExp4 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EGt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PureExp3 ::= PureExp3 _SYMB_20 PureExp4 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ELe(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PureExp3 ::= PureExp3 _SYMB_2 PureExp4 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ELt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PureExp2 ::= PureExp3 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PureExp2 ::= PureExp2 _SYMB_19 PureExp3 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ENeq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PureExp2 ::= PureExp2 _SYMB_18 PureExp3 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PureExp1 ::= PureExp2 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PureExp1 ::= PureExp1 _SYMB_17 PureExp2 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EAnd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PureExp ::= _SYMB_34 PureExp _SYMB_11 ListECaseBranch _SYMB_12 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListECaseBranch p_4 = (bnfc.abs.Absyn.ListECaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ECase(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PureExp ::= _SYMB_48 PureExp _SYMB_68 PureExp _SYMB_40 PureExp 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_4 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_6 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EIf(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PureExp ::= _SYMB_53 _SYMB_9 FormalPar _SYMB_10 _SYMB_7 PureExp _SYMB_51 PureExp 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.FormalPar p_3 = (bnfc.abs.Absyn.FormalPar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_6 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_8 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ELet(p_3,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PureExp ::= PureExp1 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PureExp ::= PureExp _SYMB_16 PureExp1 
            {
              bnfc.abs.Absyn.PureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EOr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PureExp",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ListPureExp ::= PureExp _SYMB_1 ListPureExp 
            {
              bnfc.abs.Absyn.ListPureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListPureExp p_3 = (bnfc.abs.Absyn.ListPureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ListPureExp ::= PureExp 
            {
              bnfc.abs.Absyn.ListPureExp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListPureExp(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ListPureExp ::= 
            {
              bnfc.abs.Absyn.ListPureExp RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListPureExp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPureExp",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Exp ::= EffExp 
            {
              bnfc.abs.Absyn.Exp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.EffExp p_1 = (bnfc.abs.Absyn.EffExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ExpE(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Exp ::= PureExp 
            {
              bnfc.abs.Absyn.Exp RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ExpP(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // AwaitGuard ::= _SYMB_39 _SYMB_9 PureExp _SYMB_1 PureExp _SYMB_10 
            {
              bnfc.abs.Absyn.AwaitGuard RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.PureExp p_5 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.GDuration(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AwaitGuard",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // AwaitGuard ::= AwaitGuard _SYMB_15 AwaitGuard 
            {
              bnfc.abs.Absyn.AwaitGuard RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.AwaitGuard p_1 = (bnfc.abs.Absyn.AwaitGuard)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.AwaitGuard p_3 = (bnfc.abs.Absyn.AwaitGuard)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.GAnd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AwaitGuard",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // AwaitGuard ::= PureExp 
            {
              bnfc.abs.Absyn.AwaitGuard RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.GExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AwaitGuard",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // AwaitGuard ::= _SYMB_69 _SYMB_0 L _SYMB_14 
            {
              bnfc.abs.Absyn.AwaitGuard RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.GFutField(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AwaitGuard",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // AwaitGuard ::= L _SYMB_14 
            {
              bnfc.abs.Absyn.AwaitGuard RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.GFut(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AwaitGuard",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ListSCaseBranch ::= SCaseBranch ListSCaseBranch 
            {
              bnfc.abs.Absyn.ListSCaseBranch RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.SCaseBranch p_1 = (bnfc.abs.Absyn.SCaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListSCaseBranch p_2 = (bnfc.abs.Absyn.ListSCaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListSCaseBranch",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ListSCaseBranch ::= SCaseBranch 
            {
              bnfc.abs.Absyn.ListSCaseBranch RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.SCaseBranch p_1 = (bnfc.abs.Absyn.SCaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListSCaseBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListSCaseBranch",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SCaseBranch ::= Pattern _SYMB_13 AnnStm 
            {
              bnfc.abs.Absyn.SCaseBranch RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.Pattern p_1 = (bnfc.abs.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.AnnStm p_3 = (bnfc.abs.Absyn.AnnStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.SCaseB(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCaseBranch",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Stm ::= _SYMB_39 _SYMB_9 PureExp _SYMB_1 PureExp _SYMB_10 _SYMB_5 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_5 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new bnfc.abs.Absyn.SDuration(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Stm ::= PureExp _SYMB_0 _SYMB_61 _SYMB_9 PureExp _SYMB_10 _SYMB_5 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_5 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new bnfc.abs.Absyn.SGive(p_1,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Stm ::= _SYMB_72 AnnStm _SYMB_35 _SYMB_11 ListSCaseBranch _SYMB_12 MaybeFinally 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.AnnStm p_2 = (bnfc.abs.Absyn.AnnStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ListSCaseBranch p_5 = (bnfc.abs.Absyn.ListSCaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.MaybeFinally p_7 = (bnfc.abs.Absyn.MaybeFinally)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.STryCatchFinally(p_2,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Stm ::= _SYMB_71 PureExp _SYMB_5 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SThrow(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Stm ::= _SYMB_60 PureExp _SYMB_5 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SPrintln(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Stm ::= _SYMB_59 PureExp _SYMB_5 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SPrint(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Stm ::= Exp _SYMB_5 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Exp p_1 = (bnfc.abs.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Stm ::= _SYMB_11 ListAnnStm _SYMB_12 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListAnnStm p_2 = (bnfc.abs.Absyn.ListAnnStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SBlock(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Stm ::= _SYMB_34 PureExp _SYMB_11 ListSCaseBranch _SYMB_12 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListSCaseBranch p_4 = (bnfc.abs.Absyn.ListSCaseBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SCase(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Stm ::= _SYMB_48 _SYMB_9 PureExp _SYMB_10 Stm _SYMB_40 Stm 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.Stm p_5 = (bnfc.abs.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Stm p_7 = (bnfc.abs.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.SIfElse(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Stm ::= _SYMB_48 _SYMB_9 PureExp _SYMB_10 Stm 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Stm p_5 = (bnfc.abs.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.SIf(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Stm ::= _SYMB_74 _SYMB_9 PureExp _SYMB_10 AnnStm 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.PureExp p_3 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.AnnStm p_5 = (bnfc.abs.Absyn.AnnStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.SWhile(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Stm ::= T L _SYMB_7 Exp _SYMB_5 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.T p_1 = (bnfc.abs.Absyn.T)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Exp p_4 = (bnfc.abs.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SDecAss(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Stm ::= T L _SYMB_5 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.T p_1 = (bnfc.abs.Absyn.T)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SDec(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Stm ::= _SYMB_69 _SYMB_0 L _SYMB_7 Exp _SYMB_5 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Exp p_5 = (bnfc.abs.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SFieldAss(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Stm ::= L _SYMB_7 Exp _SYMB_5 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Exp p_3 = (bnfc.abs.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SAss(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Stm ::= _SYMB_32 AwaitGuard _SYMB_5 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.AwaitGuard p_2 = (bnfc.abs.Absyn.AwaitGuard)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SAwait(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Stm ::= _SYMB_31 PureExp _SYMB_5 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.PureExp p_2 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SAssert(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Stm ::= _SYMB_65 Exp _SYMB_5 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Exp p_2 = (bnfc.abs.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.SReturn(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Stm ::= _SYMB_67 _SYMB_5 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		 RESULT = new bnfc.abs.Absyn.SSuspend(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Stm ::= _SYMB_66 _SYMB_5 
            {
              bnfc.abs.Absyn.Stm RESULT =null;
		 RESULT = new bnfc.abs.Absyn.SSkip(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ClassBody ::= T L _SYMB_9 ListFormalPar _SYMB_10 _SYMB_11 ListAnnStm _SYMB_12 
            {
              bnfc.abs.Absyn.ClassBody RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		bnfc.abs.Absyn.T p_1 = (bnfc.abs.Absyn.T)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.ListFormalPar p_4 = (bnfc.abs.Absyn.ListFormalPar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListAnnStm p_7 = (bnfc.abs.Absyn.ListAnnStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.MethClassBody(p_1,p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ClassBody ::= T L _SYMB_7 PureExp _SYMB_5 
            {
              bnfc.abs.Absyn.ClassBody RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.T p_1 = (bnfc.abs.Absyn.T)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.PureExp p_4 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.FieldAssignClassBody(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ClassBody ::= T L _SYMB_5 
            {
              bnfc.abs.Absyn.ClassBody RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.T p_1 = (bnfc.abs.Absyn.T)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.FieldClassBody(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassBody",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ListClassBody ::= ListClassBody ClassBody 
            {
              bnfc.abs.Absyn.ListClassBody RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListClassBody p_1 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ClassBody p_2 = (bnfc.abs.Absyn.ClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListClassBody",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ListClassBody ::= 
            {
              bnfc.abs.Absyn.ListClassBody RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListClassBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListClassBody",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MethSig ::= ListAnn T L _SYMB_9 ListFormalPar _SYMB_10 
            {
              bnfc.abs.Absyn.MethSig RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.ListAnn p_1 = (bnfc.abs.Absyn.ListAnn)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.T p_2 = (bnfc.abs.Absyn.T)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListFormalPar p_5 = (bnfc.abs.Absyn.ListFormalPar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.MethSignature(p_1,p_2,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethSig",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListMethSig ::= ListMethSig MethSig _SYMB_5 
            {
              bnfc.abs.Absyn.ListMethSig RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ListMethSig p_1 = (bnfc.abs.Absyn.ListMethSig)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.MethSig p_2 = (bnfc.abs.Absyn.MethSig)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListMethSig",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListMethSig ::= 
            {
              bnfc.abs.Absyn.ListMethSig RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListMethSig(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListMethSig",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FunBody ::= PureExp 
            {
              bnfc.abs.Absyn.FunBody RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.PureExp p_1 = (bnfc.abs.Absyn.PureExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.NormalFunBody(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunBody",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FunBody ::= _SYMB_33 
            {
              bnfc.abs.Absyn.FunBody RESULT =null;
		 RESULT = new bnfc.abs.Absyn.BuiltinFunBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunBody",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ConstrType ::= T L 
            {
              bnfc.abs.Absyn.ConstrType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.T p_1 = (bnfc.abs.Absyn.T)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.RecordConstrType(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrType",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ConstrType ::= T 
            {
              bnfc.abs.Absyn.ConstrType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.T p_1 = (bnfc.abs.Absyn.T)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.EmptyConstrType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrType",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListConstrType ::= ConstrType _SYMB_1 ListConstrType 
            {
              bnfc.abs.Absyn.ListConstrType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ConstrType p_1 = (bnfc.abs.Absyn.ConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListConstrType p_3 = (bnfc.abs.Absyn.ListConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListConstrType ::= ConstrType 
            {
              bnfc.abs.Absyn.ListConstrType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ConstrType p_1 = (bnfc.abs.Absyn.ConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListConstrType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ListConstrType ::= 
            {
              bnfc.abs.Absyn.ListConstrType RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListConstrType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrType",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ConstrIdent ::= U _SYMB_9 ListConstrType _SYMB_10 
            {
              bnfc.abs.Absyn.ConstrIdent RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListConstrType p_3 = (bnfc.abs.Absyn.ListConstrType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.ParamConstrIdent(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrIdent",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ConstrIdent ::= U 
            {
              bnfc.abs.Absyn.ConstrIdent RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.SinglConstrIdent(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrIdent",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListConstrIdent ::= ConstrIdent _SYMB_8 ListConstrIdent 
            {
              bnfc.abs.Absyn.ListConstrIdent RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ConstrIdent p_1 = (bnfc.abs.Absyn.ConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListConstrIdent p_3 = (bnfc.abs.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrIdent",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListConstrIdent ::= ConstrIdent 
            {
              bnfc.abs.Absyn.ListConstrIdent RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ConstrIdent p_1 = (bnfc.abs.Absyn.ConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListConstrIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListConstrIdent",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Decl ::= _SYMB_41 ConstrIdent _SYMB_5 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ConstrIdent p_2 = (bnfc.abs.Absyn.ConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.DException(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Decl ::= _SYMB_36 U _SYMB_9 ListFormalPar _SYMB_10 _SYMB_49 ListQU _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		bnfc.abs.Absyn.ListFormalPar p_4 = (bnfc.abs.Absyn.ListFormalPar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.ListQU p_7 = (bnfc.abs.Absyn.ListQU)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.ListClassBody p_9 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_10left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_10right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.MaybeBlock p_10 = (bnfc.abs.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListClassBody p_11 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.DClassParImplements(p_2,p_4,p_7,p_9,p_10,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Decl ::= _SYMB_36 U _SYMB_49 ListQU _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.ListQU p_4 = (bnfc.abs.Absyn.ListQU)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.ListClassBody p_6 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.MaybeBlock p_7 = (bnfc.abs.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListClassBody p_8 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.DClassImplements(p_2,p_4,p_6,p_7,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Decl ::= _SYMB_36 U _SYMB_9 ListFormalPar _SYMB_10 _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		bnfc.abs.Absyn.ListFormalPar p_4 = (bnfc.abs.Absyn.ListFormalPar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.ListClassBody p_7 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.MaybeBlock p_8 = (bnfc.abs.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListClassBody p_9 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.DClassPar(p_2,p_4,p_7,p_8,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Decl ::= _SYMB_36 U _SYMB_11 ListClassBody MaybeBlock ListClassBody _SYMB_12 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.ListClassBody p_4 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.MaybeBlock p_5 = (bnfc.abs.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListClassBody p_6 = (bnfc.abs.Absyn.ListClassBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.DClass(p_2,p_4,p_5,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Decl ::= _SYMB_52 U _SYMB_43 ListQU _SYMB_11 ListMethSig _SYMB_12 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.ListQU p_4 = (bnfc.abs.Absyn.ListQU)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListMethSig p_6 = (bnfc.abs.Absyn.ListMethSig)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.DExtends(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Decl ::= _SYMB_52 U _SYMB_11 ListMethSig _SYMB_12 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListMethSig p_4 = (bnfc.abs.Absyn.ListMethSig)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.DInterf(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Decl ::= _SYMB_38 T L _SYMB_2 ListU _SYMB_3 _SYMB_9 ListFormalPar _SYMB_10 _SYMB_7 FunBody _SYMB_5 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		bnfc.abs.Absyn.T p_2 = (bnfc.abs.Absyn.T)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		bnfc.abs.Absyn.ListU p_5 = (bnfc.abs.Absyn.ListU)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.ListFormalPar p_8 = (bnfc.abs.Absyn.ListFormalPar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.FunBody p_11 = (bnfc.abs.Absyn.FunBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.DFunPoly(p_2,p_3,p_5,p_8,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Decl ::= _SYMB_38 T L _SYMB_9 ListFormalPar _SYMB_10 _SYMB_7 FunBody _SYMB_5 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		bnfc.abs.Absyn.T p_2 = (bnfc.abs.Absyn.T)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.ListFormalPar p_5 = (bnfc.abs.Absyn.ListFormalPar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.FunBody p_8 = (bnfc.abs.Absyn.FunBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.DFun(p_2,p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Decl ::= _SYMB_37 U _SYMB_2 ListU _SYMB_3 _SYMB_7 ListConstrIdent _SYMB_5 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.ListU p_4 = (bnfc.abs.Absyn.ListU)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListConstrIdent p_7 = (bnfc.abs.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.DDataPoly(p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Decl ::= _SYMB_37 U _SYMB_7 ListConstrIdent _SYMB_5 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListConstrIdent p_4 = (bnfc.abs.Absyn.ListConstrIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.DData(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Decl ::= _SYMB_73 U _SYMB_2 ListU _SYMB_3 _SYMB_7 T _SYMB_5 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		bnfc.abs.Absyn.ListU p_4 = (bnfc.abs.Absyn.ListU)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.T p_7 = (bnfc.abs.Absyn.T)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.DTypePoly(p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Decl ::= _SYMB_73 U _SYMB_7 T _SYMB_5 
            {
              bnfc.abs.Absyn.Decl RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.T p_4 = (bnfc.abs.Absyn.T)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.DType(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IsForeign ::= _SYMB_44 
            {
              bnfc.abs.Absyn.IsForeign RESULT =null;
		 RESULT = new bnfc.abs.Absyn.YesForeign(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IsForeign",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IsForeign ::= _SYMB_50 
            {
              bnfc.abs.Absyn.IsForeign RESULT =null;
		 RESULT = new bnfc.abs.Absyn.NoForeign(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IsForeign",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ListImport ::= ListImport Import _SYMB_5 
            {
              bnfc.abs.Absyn.ListImport RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ListImport p_1 = (bnfc.abs.Absyn.ListImport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Import p_2 = (bnfc.abs.Absyn.Import)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListImport",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ListImport ::= 
            {
              bnfc.abs.Absyn.ListImport RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListImport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListImport",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Import ::= IsForeign ListQA _SYMB_46 QU 
            {
              bnfc.abs.Absyn.Import RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.IsForeign p_1 = (bnfc.abs.Absyn.IsForeign)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ListQA p_2 = (bnfc.abs.Absyn.ListQA)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QU p_4 = (bnfc.abs.Absyn.QU)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.AnyFromImport(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Import ::= IsForeign ListQA 
            {
              bnfc.abs.Absyn.Import RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.IsForeign p_1 = (bnfc.abs.Absyn.IsForeign)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListQA p_2 = (bnfc.abs.Absyn.ListQA)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.AnyImport(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Import ::= IsForeign _SYMB_6 _SYMB_46 QU 
            {
              bnfc.abs.Absyn.Import RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.IsForeign p_1 = (bnfc.abs.Absyn.IsForeign)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QU p_4 = (bnfc.abs.Absyn.QU)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.StarFromImport(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ListExport ::= ListExport Export _SYMB_5 
            {
              bnfc.abs.Absyn.ListExport RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ListExport p_1 = (bnfc.abs.Absyn.ListExport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Export p_2 = (bnfc.abs.Absyn.Export)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExport",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ListExport ::= 
            {
              bnfc.abs.Absyn.ListExport RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListExport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExport",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Export ::= _SYMB_42 ListQA _SYMB_46 QU 
            {
              bnfc.abs.Absyn.Export RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ListQA p_2 = (bnfc.abs.Absyn.ListQA)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QU p_4 = (bnfc.abs.Absyn.QU)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.AnyFromExport(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Export ::= _SYMB_42 ListQA 
            {
              bnfc.abs.Absyn.Export RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListQA p_2 = (bnfc.abs.Absyn.ListQA)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.AnyExport(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Export ::= _SYMB_42 _SYMB_6 _SYMB_46 QU 
            {
              bnfc.abs.Absyn.Export RESULT =null;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QU p_4 = (bnfc.abs.Absyn.QU)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.StarFromExport(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Export ::= _SYMB_42 _SYMB_6 
            {
              bnfc.abs.Absyn.Export RESULT =null;
		 RESULT = new bnfc.abs.Absyn.StarExport(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Export",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ListModule ::= ListModule Module 
            {
              bnfc.abs.Absyn.ListModule RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListModule p_1 = (bnfc.abs.Absyn.ListModule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.Module p_2 = (bnfc.abs.Absyn.Module)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListModule",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListModule ::= 
            {
              bnfc.abs.Absyn.ListModule RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListModule(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListModule",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Module ::= _SYMB_55 QU _SYMB_5 ListExport ListImport ListAnnDecl MaybeBlock 
            {
              bnfc.abs.Absyn.Module RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		bnfc.abs.Absyn.QU p_2 = (bnfc.abs.Absyn.QU)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.ListExport p_4 = (bnfc.abs.Absyn.ListExport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.ListImport p_5 = (bnfc.abs.Absyn.ListImport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListAnnDecl p_6 = (bnfc.abs.Absyn.ListAnnDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.MaybeBlock p_7 = (bnfc.abs.Absyn.MaybeBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.Mod(p_2,p_4,p_5,p_6,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Module",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Program ::= ListModule 
            {
              bnfc.abs.Absyn.Program RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListModule p_1 = (bnfc.abs.Absyn.ListModule)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.Prog(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListFormalPar ::= FormalPar _SYMB_1 ListFormalPar 
            {
              bnfc.abs.Absyn.ListFormalPar RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.FormalPar p_1 = (bnfc.abs.Absyn.FormalPar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListFormalPar p_3 = (bnfc.abs.Absyn.ListFormalPar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalPar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListFormalPar ::= FormalPar 
            {
              bnfc.abs.Absyn.ListFormalPar RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.FormalPar p_1 = (bnfc.abs.Absyn.FormalPar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListFormalPar(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalPar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListFormalPar ::= 
            {
              bnfc.abs.Absyn.ListFormalPar RESULT =null;
		 RESULT = new bnfc.abs.Absyn.ListFormalPar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalPar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FormalPar ::= T L 
            {
              bnfc.abs.Absyn.FormalPar RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.T p_1 = (bnfc.abs.Absyn.T)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.FormalParameter(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalPar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ListT ::= T _SYMB_1 ListT 
            {
              bnfc.abs.Absyn.ListT RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.T p_1 = (bnfc.abs.Absyn.T)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListT p_3 = (bnfc.abs.Absyn.ListT)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ListT ::= T 
            {
              bnfc.abs.Absyn.ListT RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.T p_1 = (bnfc.abs.Absyn.T)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListT(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // T ::= _SYMB_4 
            {
              bnfc.abs.Absyn.T RESULT =null;
		 RESULT = new bnfc.abs.Absyn.TInfer(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // T ::= QU _SYMB_2 ListT _SYMB_3 
            {
              bnfc.abs.Absyn.T RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bnfc.abs.Absyn.QU p_1 = (bnfc.abs.Absyn.QU)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.ListT p_3 = (bnfc.abs.Absyn.ListT)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new bnfc.abs.Absyn.TPoly(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // T ::= QU 
            {
              bnfc.abs.Absyn.T RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QU p_1 = (bnfc.abs.Absyn.QU)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.TSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListQA ::= QA _SYMB_1 ListQA 
            {
              bnfc.abs.Absyn.ListQA RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.QA p_1 = (bnfc.abs.Absyn.QA)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListQA p_3 = (bnfc.abs.Absyn.ListQA)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ListQA ::= QA 
            {
              bnfc.abs.Absyn.ListQA RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QA p_1 = (bnfc.abs.Absyn.QA)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListQA(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ListQU ::= QU _SYMB_1 ListQU 
            {
              bnfc.abs.Absyn.ListQU RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bnfc.abs.Absyn.QU p_1 = (bnfc.abs.Absyn.QU)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListQU p_3 = (bnfc.abs.Absyn.ListQU)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQU",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ListQU ::= QU 
            {
              bnfc.abs.Absyn.ListQU RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QU p_1 = (bnfc.abs.Absyn.QU)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListQU(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQU",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ListU ::= U _SYMB_1 ListU 
            {
              bnfc.abs.Absyn.ListU RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.ListU p_3 = (bnfc.abs.Absyn.ListU)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListU",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListU ::= U 
            {
              bnfc.abs.Absyn.ListU RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.ListU(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListU",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // QA ::= U _SYMB_0 QA 
            {
              bnfc.abs.Absyn.QA RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QA p_3 = (bnfc.abs.Absyn.QA)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.QA_(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // QA ::= U 
            {
              bnfc.abs.Absyn.QA RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.UA(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // QA ::= L 
            {
              bnfc.abs.Absyn.QA RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.LA(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // QL ::= U _SYMB_0 QL 
            {
              bnfc.abs.Absyn.QL RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QL p_3 = (bnfc.abs.Absyn.QL)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.QL_(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // QL ::= L 
            {
              bnfc.abs.Absyn.QL RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.L_(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // QU ::= U _SYMB_0 QU 
            {
              bnfc.abs.Absyn.QU RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bnfc.abs.Absyn.QU p_3 = (bnfc.abs.Absyn.QU)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.QU_(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QU",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // QU ::= U 
            {
              bnfc.abs.Absyn.QU RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.U_(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QU",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Literal ::= _SYMB_70 
            {
              bnfc.abs.Absyn.Literal RESULT =null;
		 RESULT = new bnfc.abs.Absyn.LThisDC(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Literal ::= _DOUBLE_ 
            {
              bnfc.abs.Absyn.Literal RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.LFloat(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Literal ::= _INTEGER_ 
            {
              bnfc.abs.Absyn.Literal RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Long p_1 = (Long)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.LInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Literal ::= _STRING_ 
            {
              bnfc.abs.Absyn.Literal RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new bnfc.abs.Absyn.LStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Literal ::= _SYMB_69 
            {
              bnfc.abs.Absyn.Literal RESULT =null;
		 RESULT = new bnfc.abs.Absyn.LThis(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Literal ::= _SYMB_58 
            {
              bnfc.abs.Absyn.Literal RESULT =null;
		 RESULT = new bnfc.abs.Absyn.LNull(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		bnfc.abs.Absyn.Program start_val = (bnfc.abs.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

