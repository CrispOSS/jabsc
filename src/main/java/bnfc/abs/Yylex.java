/* The following code was generated by JFlex 1.6.1 */

// This JLex file was machine-generated by the BNF converter
package bnfc.abs;

import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/main/java/bnfc/abs/Yylex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int CHAR = 4;
  public static final int CHARESC = 6;
  public static final int CHAREND = 8;
  public static final int STRING = 10;
  public static final int ESCAPED = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  2,  2,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 58, 55,  0, 58, 58,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    58, 20, 56,  0,  0, 24, 19,  4, 13, 14,  7, 21,  5, 22, 11, 23, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 28,  6,  9, 12, 10, 18, 
     0,  1,  1, 54, 53,  1, 29,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1, 34,  1,  1,  1,  1,  1,  1, 26, 57, 27,  0,  8, 
     0, 30, 40, 42, 44, 33, 45, 51, 43, 39,  2, 52, 31, 49, 41, 48, 
    47,  2, 35, 32, 37, 36,  2, 38, 46, 50,  2, 16, 15, 17, 25,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\1\4\2\1\1\14\2"+
    "\1\34\1\35\2\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\0\1\1\11\2\1\1\5\2"+
    "\1\57\1\60\15\2\1\61\1\62\1\1\2\2\1\63"+
    "\10\2\1\1\1\2\1\64\10\2\1\65\5\2\1\66"+
    "\5\2\1\67\1\1\5\2\1\70\1\71\3\2\1\72"+
    "\1\2\1\73\1\2\1\74\1\75\5\2\1\76\1\77"+
    "\2\2\1\100\1\101\4\2\1\102\1\2\1\103\1\104"+
    "\6\2\1\105\1\2\1\106\4\2\1\107\1\110\4\2"+
    "\1\111\1\2\1\112\2\2\1\113\1\114\1\115\2\2"+
    "\1\116\4\2\1\117\1\120\1\121\3\2\1\122\1\123"+
    "\1\124\1\125\3\2\1\126\1\127\1\2\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\166\0\166\0\166\0\166\0\u01d8\0\u0213\0\166\0\u024e"+
    "\0\166\0\166\0\u0289\0\166\0\166\0\166\0\u02c4\0\u02ff"+
    "\0\166\0\166\0\u033a\0\166\0\166\0\166\0\166\0\166"+
    "\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea"+
    "\0\u0725\0\u0760\0\166\0\166\0\166\0\u079b\0\166\0\166"+
    "\0\166\0\166\0\166\0\166\0\166\0\166\0\166\0\166"+
    "\0\166\0\166\0\166\0\166\0\166\0\166\0\u07d6\0\u0811"+
    "\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9"+
    "\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1"+
    "\0\u0162\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e"+
    "\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\166\0\166"+
    "\0\u0efb\0\u0f36\0\u0f71\0\u0162\0\u0fac\0\u0fe7\0\u1022\0\u105d"+
    "\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u0162\0\u11fa"+
    "\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u0162"+
    "\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u0162\0\u14f9\0\u1534"+
    "\0\u156f\0\u15aa\0\u15e5\0\u0162\0\u1620\0\u165b\0\u1696\0\u16d1"+
    "\0\u170c\0\u1747\0\u0162\0\u0162\0\u1782\0\u17bd\0\u17f8\0\u0127"+
    "\0\u1833\0\u0162\0\u186e\0\u18a9\0\u0162\0\u18e4\0\u191f\0\u195a"+
    "\0\u1995\0\u19d0\0\u0162\0\u0162\0\u1a0b\0\u1a46\0\u0162\0\u0162"+
    "\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u0127\0\u1b6d\0\u0162\0\u0162"+
    "\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u0162\0\u1d0a"+
    "\0\u0162\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u0162\0\u0162\0\u1e31"+
    "\0\u1e6c\0\u1ea7\0\u1ee2\0\u0162\0\u1f1d\0\u0162\0\u1f58\0\u1f93"+
    "\0\u0162\0\u0162\0\u0162\0\u1fce\0\u2009\0\u0162\0\u2044\0\u207f"+
    "\0\u20ba\0\u20f5\0\u0162\0\u0162\0\u0162\0\u2130\0\u216b\0\u21a6"+
    "\0\u0162\0\u0162\0\u0162\0\u0162\0\u21e1\0\u221c\0\u2257\0\u0162"+
    "\0\u0162\0\u2292\0\u0162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\6\1\7\1\10\1\0\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\7\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\7\1\56\1\57\1\7\1\60"+
    "\1\7\1\61\1\7\1\62\1\7\2\6\1\63\1\64"+
    "\1\0\1\63\7\65\1\66\63\65\73\0\67\67\1\0"+
    "\1\70\1\71\1\67\45\72\1\73\3\72\1\74\15\72"+
    "\1\0\1\75\1\76\1\72\1\0\4\6\3\0\1\6"+
    "\24\0\32\6\5\0\4\7\3\0\1\7\24\0\32\7"+
    "\7\0\1\10\103\0\1\77\72\0\1\100\70\0\1\101"+
    "\1\0\1\102\75\0\1\103\76\0\1\104\63\0\1\105"+
    "\65\0\1\106\17\0\1\107\44\0\4\6\3\0\1\6"+
    "\24\0\1\6\1\110\30\6\5\0\4\7\3\0\1\7"+
    "\24\0\3\7\1\111\5\7\1\112\20\7\5\0\4\7"+
    "\3\0\1\7\24\0\4\7\1\113\16\7\1\114\6\7"+
    "\5\0\4\7\3\0\1\7\24\0\7\7\1\115\12\7"+
    "\1\116\4\7\1\117\2\7\5\0\4\7\3\0\1\7"+
    "\24\0\2\7\1\120\16\7\1\121\10\7\5\0\4\6"+
    "\3\0\1\6\24\0\6\6\1\122\23\6\5\0\4\7"+
    "\3\0\1\7\24\0\4\7\1\123\25\7\5\0\4\7"+
    "\3\0\1\7\24\0\6\7\1\124\7\7\1\125\6\7"+
    "\1\126\4\7\5\0\4\7\3\0\1\7\24\0\16\7"+
    "\1\127\13\7\5\0\4\7\3\0\1\7\24\0\14\7"+
    "\1\130\3\7\1\131\3\7\1\132\5\7\5\0\4\7"+
    "\3\0\1\7\24\0\7\7\1\133\22\7\5\0\4\7"+
    "\3\0\1\7\24\0\4\7\1\134\2\7\1\135\22\7"+
    "\5\0\4\7\3\0\1\7\24\0\1\7\1\136\1\137"+
    "\27\7\5\0\4\7\3\0\1\7\24\0\1\7\1\140"+
    "\2\7\1\141\25\7\5\0\4\7\3\0\1\7\24\0"+
    "\6\7\1\142\3\7\1\143\17\7\5\0\4\7\3\0"+
    "\1\7\24\0\6\7\1\144\23\7\5\0\4\7\3\0"+
    "\1\7\24\0\23\7\1\145\6\7\5\0\4\7\3\0"+
    "\1\7\24\0\4\7\1\146\25\7\33\0\1\147\43\0"+
    "\67\107\1\150\3\107\1\0\4\6\3\0\1\6\24\0"+
    "\2\6\1\151\27\6\5\0\4\7\3\0\1\7\24\0"+
    "\3\7\1\152\26\7\5\0\4\7\3\0\1\7\24\0"+
    "\1\7\1\153\30\7\5\0\4\7\3\0\1\7\24\0"+
    "\10\7\1\154\21\7\5\0\4\7\3\0\1\7\24\0"+
    "\15\7\1\155\14\7\5\0\4\7\3\0\1\7\24\0"+
    "\3\7\1\156\26\7\5\0\4\7\3\0\1\7\24\0"+
    "\1\7\1\157\30\7\5\0\4\7\3\0\1\7\24\0"+
    "\12\7\1\160\17\7\5\0\4\7\3\0\1\7\24\0"+
    "\3\7\1\161\26\7\5\0\4\7\3\0\1\7\24\0"+
    "\10\7\1\162\4\7\1\163\4\7\1\164\7\7\5\0"+
    "\4\6\3\0\1\6\24\0\7\6\1\165\22\6\5\0"+
    "\4\7\3\0\1\7\24\0\10\7\1\166\21\7\5\0"+
    "\4\7\3\0\1\7\24\0\25\7\1\167\4\7\5\0"+
    "\4\7\3\0\1\7\24\0\4\7\1\170\1\7\1\171"+
    "\3\7\1\172\17\7\5\0\4\7\3\0\1\7\24\0"+
    "\22\7\1\173\7\7\5\0\4\7\3\0\1\7\24\0"+
    "\12\7\1\174\17\7\5\0\4\7\3\0\1\7\24\0"+
    "\10\7\1\175\21\7\5\0\4\7\3\0\1\7\24\0"+
    "\22\7\1\176\7\7\5\0\4\7\3\0\1\7\24\0"+
    "\12\7\1\177\17\7\5\0\4\7\3\0\1\7\24\0"+
    "\11\7\1\200\20\7\5\0\4\7\3\0\1\7\24\0"+
    "\2\7\1\201\27\7\5\0\4\7\3\0\1\7\24\0"+
    "\3\7\1\202\4\7\1\203\21\7\5\0\4\7\3\0"+
    "\1\7\24\0\1\7\1\204\30\7\5\0\4\7\3\0"+
    "\1\7\24\0\10\7\1\205\21\7\5\0\4\7\3\0"+
    "\1\7\24\0\20\7\1\206\11\7\5\0\4\7\3\0"+
    "\1\7\24\0\23\7\1\207\6\7\5\0\4\7\3\0"+
    "\1\7\24\0\14\7\1\210\7\7\1\211\5\7\5\0"+
    "\4\7\3\0\1\7\24\0\12\7\1\212\17\7\5\0"+
    "\4\7\3\0\1\7\24\0\17\7\1\213\12\7\5\0"+
    "\4\7\3\0\1\7\24\0\10\7\1\214\21\7\5\0"+
    "\4\6\3\0\1\6\24\0\3\6\1\215\26\6\5\0"+
    "\4\7\3\0\1\7\24\0\4\7\1\216\25\7\5\0"+
    "\4\7\3\0\1\7\24\0\12\7\1\217\17\7\5\0"+
    "\4\7\3\0\1\7\24\0\1\7\1\220\30\7\5\0"+
    "\4\7\3\0\1\7\24\0\22\7\1\221\7\7\5\0"+
    "\4\7\3\0\1\7\24\0\11\7\1\222\20\7\5\0"+
    "\4\7\3\0\1\7\24\0\22\7\1\223\7\7\5\0"+
    "\4\7\3\0\1\7\24\0\4\7\1\224\25\7\5\0"+
    "\4\7\3\0\1\7\24\0\4\7\1\225\25\7\5\0"+
    "\4\7\3\0\1\7\24\0\4\7\1\226\25\7\5\0"+
    "\4\7\3\0\1\7\24\0\23\7\1\227\6\7\5\0"+
    "\4\6\3\0\1\6\24\0\4\6\1\230\25\6\5\0"+
    "\4\7\3\0\1\7\24\0\7\7\1\231\22\7\5\0"+
    "\4\7\3\0\1\7\24\0\14\7\1\232\15\7\5\0"+
    "\4\7\3\0\1\7\24\0\23\7\1\233\6\7\5\0"+
    "\4\7\3\0\1\7\24\0\3\7\1\234\26\7\5\0"+
    "\4\7\3\0\1\7\24\0\4\7\1\235\25\7\5\0"+
    "\4\7\3\0\1\7\24\0\2\7\1\236\27\7\5\0"+
    "\4\7\3\0\1\7\24\0\4\7\1\237\25\7\5\0"+
    "\4\7\3\0\1\7\24\0\2\7\1\240\20\7\1\241"+
    "\6\7\5\0\4\7\3\0\1\7\24\0\2\7\1\242"+
    "\27\7\5\0\4\7\3\0\1\7\24\0\2\7\1\243"+
    "\27\7\5\0\4\7\3\0\1\7\24\0\4\7\1\244"+
    "\25\7\5\0\4\7\3\0\1\7\24\0\15\7\1\245"+
    "\14\7\5\0\4\7\3\0\1\7\24\0\3\7\1\246"+
    "\26\7\5\0\4\7\3\0\1\7\24\0\1\7\1\247"+
    "\30\7\5\0\4\7\3\0\1\7\24\0\24\7\1\250"+
    "\5\7\5\0\4\7\3\0\1\7\24\0\1\7\1\251"+
    "\30\7\5\0\4\7\3\0\1\7\24\0\22\7\1\252"+
    "\7\7\5\0\4\7\3\0\1\7\24\0\14\7\1\253"+
    "\15\7\5\0\4\7\3\0\1\7\24\0\7\7\1\254"+
    "\22\7\5\0\4\6\3\0\1\6\24\0\4\6\1\255"+
    "\25\6\5\0\4\7\3\0\1\7\24\0\6\7\1\256"+
    "\23\7\5\0\4\7\3\0\1\7\24\0\10\7\1\257"+
    "\21\7\5\0\4\7\3\0\1\7\24\0\2\7\1\260"+
    "\27\7\5\0\4\7\3\0\1\7\24\0\4\7\1\261"+
    "\25\7\5\0\4\7\3\0\1\7\24\0\14\7\1\262"+
    "\15\7\5\0\4\7\3\0\1\7\24\0\14\7\1\263"+
    "\15\7\5\0\4\7\3\0\1\7\24\0\22\7\1\264"+
    "\7\7\5\0\4\7\3\0\1\7\24\0\6\7\1\265"+
    "\23\7\5\0\4\7\3\0\1\7\24\0\6\7\1\266"+
    "\23\7\5\0\4\7\3\0\1\7\24\0\11\7\1\267"+
    "\20\7\5\0\4\7\3\0\1\7\24\0\30\7\1\270"+
    "\1\7\5\0\4\7\3\0\1\7\24\0\4\7\1\271"+
    "\25\7\5\0\4\7\3\0\1\7\24\0\6\7\1\272"+
    "\23\7\5\0\4\7\3\0\1\7\24\0\4\7\1\273"+
    "\25\7\5\0\4\7\3\0\1\7\24\0\6\7\1\274"+
    "\23\7\5\0\4\7\3\0\1\7\24\0\10\7\1\275"+
    "\21\7\5\0\4\7\3\0\1\7\24\0\16\7\1\276"+
    "\13\7\5\0\4\7\3\0\1\7\24\0\3\7\1\277"+
    "\26\7\5\0\4\7\3\0\1\7\24\0\2\7\1\300"+
    "\27\7\5\0\4\7\3\0\1\7\24\0\23\7\1\301"+
    "\6\7\5\0\4\7\3\0\1\7\24\0\10\7\1\302"+
    "\21\7\5\0\4\7\3\0\1\7\24\0\2\7\1\303"+
    "\27\7\5\0\4\7\3\0\1\7\24\0\10\7\1\304"+
    "\21\7\5\0\4\7\3\0\1\7\24\0\14\7\1\305"+
    "\15\7\5\0\4\7\3\0\1\7\24\0\3\7\1\306"+
    "\26\7\5\0\4\7\3\0\1\7\24\0\17\7\1\307"+
    "\12\7\5\0\4\7\3\0\1\7\24\0\10\7\1\310"+
    "\21\7\5\0\4\7\3\0\1\7\24\0\10\7\1\311"+
    "\21\7\5\0\4\7\3\0\1\7\24\0\14\7\1\312"+
    "\15\7\5\0\4\7\3\0\1\7\24\0\31\7\1\313"+
    "\5\0\4\7\3\0\1\7\24\0\20\7\1\314\11\7"+
    "\5\0\4\7\3\0\1\7\24\0\24\7\1\315\5\7"+
    "\5\0\4\7\3\0\1\7\24\0\10\7\1\316\21\7"+
    "\5\0\4\7\3\0\1\7\24\0\12\7\1\317\17\7"+
    "\5\0\4\7\3\0\1\7\24\0\2\7\1\320\27\7"+
    "\5\0\4\7\3\0\1\7\24\0\6\7\1\321\23\7"+
    "\5\0\4\7\3\0\1\7\24\0\2\7\1\322\27\7"+
    "\5\0\4\7\3\0\1\7\24\0\4\7\1\323\25\7"+
    "\5\0\4\7\3\0\1\7\24\0\17\7\1\324\12\7"+
    "\5\0\4\7\3\0\1\7\24\0\3\7\1\325\26\7"+
    "\5\0\4\7\3\0\1\7\24\0\12\7\1\326\17\7"+
    "\5\0\4\7\3\0\1\7\24\0\1\7\1\327\30\7"+
    "\5\0\4\7\3\0\1\7\24\0\4\7\1\330\25\7"+
    "\5\0\4\7\3\0\1\7\24\0\14\7\1\331\15\7"+
    "\5\0\4\7\3\0\1\7\24\0\25\7\1\332\4\7"+
    "\5\0\4\7\3\0\1\7\24\0\10\7\1\333\21\7"+
    "\5\0\4\7\3\0\1\7\24\0\14\7\1\334\15\7"+
    "\5\0\4\7\3\0\1\7\24\0\23\7\1\335\6\7"+
    "\5\0\4\7\3\0\1\7\24\0\15\7\1\336\14\7"+
    "\5\0\4\7\3\0\1\7\24\0\14\7\1\337\15\7"+
    "\5\0\4\7\3\0\1\7\24\0\14\7\1\340\15\7"+
    "\5\0\4\7\3\0\1\7\24\0\4\7\1\341\25\7"+
    "\5\0\4\7\3\0\1\7\24\0\10\7\1\342\21\7"+
    "\5\0\4\7\3\0\1\7\24\0\3\7\1\343\26\7"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8909];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\10\2\0\3\1\4\11\2\1\1\11\1\1"+
    "\2\11\1\1\3\11\2\1\2\11\1\1\5\11\22\1"+
    "\3\11\1\1\20\11\1\0\37\1\2\11\173\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  String pstring = new String();
  public int line_num() { return (yyline+1); }
  public String buff() {return new String(zzBuffer,zzCurrentPos,10).trim();}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.UIdent, yytext().intern());
            }
          case 89: break;
          case 2: 
            { return new Symbol(sym.LIdent, yytext().intern());
            }
          case 90: break;
          case 3: 
            { return new Symbol(sym._INTEGER_, new Long(yytext()));
            }
          case 91: break;
          case 4: 
            { return new Symbol(sym._SYMB_0);
            }
          case 92: break;
          case 5: 
            { return new Symbol(sym._SYMB_1);
            }
          case 93: break;
          case 6: 
            { return new Symbol(sym._SYMB_2);
            }
          case 94: break;
          case 7: 
            { return new Symbol(sym._SYMB_3);
            }
          case 95: break;
          case 8: 
            { return new Symbol(sym._SYMB_4);
            }
          case 96: break;
          case 9: 
            { return new Symbol(sym._SYMB_5);
            }
          case 97: break;
          case 10: 
            { return new Symbol(sym._SYMB_6);
            }
          case 98: break;
          case 11: 
            { return new Symbol(sym._SYMB_7);
            }
          case 99: break;
          case 12: 
            { return new Symbol(sym._SYMB_8);
            }
          case 100: break;
          case 13: 
            { return new Symbol(sym._SYMB_9);
            }
          case 101: break;
          case 14: 
            { return new Symbol(sym._SYMB_10);
            }
          case 102: break;
          case 15: 
            { return new Symbol(sym._SYMB_11);
            }
          case 103: break;
          case 16: 
            { return new Symbol(sym._SYMB_12);
            }
          case 104: break;
          case 17: 
            { return new Symbol(sym._SYMB_14);
            }
          case 105: break;
          case 18: 
            { return new Symbol(sym._SYMB_15);
            }
          case 106: break;
          case 19: 
            { return new Symbol(sym._SYMB_29);
            }
          case 107: break;
          case 20: 
            { return new Symbol(sym._SYMB_22);
            }
          case 108: break;
          case 21: 
            { return new Symbol(sym._SYMB_23);
            }
          case 109: break;
          case 22: 
            { return new Symbol(sym._SYMB_24);
            }
          case 110: break;
          case 23: 
            { return new Symbol(sym._SYMB_25);
            }
          case 111: break;
          case 24: 
            { return new Symbol(sym._SYMB_26);
            }
          case 112: break;
          case 25: 
            { return new Symbol(sym._SYMB_27);
            }
          case 113: break;
          case 26: 
            { return new Symbol(sym._SYMB_28);
            }
          case 114: break;
          case 27: 
            { return new Symbol(sym._SYMB_30);
            }
          case 115: break;
          case 28: 
            { /* ignore white space. */
            }
          case 116: break;
          case 29: 
            { yybegin(STRING);
            }
          case 117: break;
          case 30: 
            { 
            }
          case 118: break;
          case 31: 
            { pstring += yytext();
            }
          case 119: break;
          case 32: 
            { String foo = pstring; pstring = new String(); yybegin(YYINITIAL); return new Symbol(sym._STRING_, foo.intern());
            }
          case 120: break;
          case 33: 
            { yybegin(ESCAPED);
            }
          case 121: break;
          case 34: 
            { pstring += yytext(); yybegin(STRING);
            }
          case 122: break;
          case 35: 
            { pstring += "\t"; yybegin(STRING);
            }
          case 123: break;
          case 36: 
            { pstring +=  "\n"; yybegin(STRING);
            }
          case 124: break;
          case 37: 
            { pstring += "\""; yybegin(STRING);
            }
          case 125: break;
          case 38: 
            { pstring += "\\"; yybegin(STRING);
            }
          case 126: break;
          case 39: 
            { return new Symbol(sym._SYMB_20);
            }
          case 127: break;
          case 40: 
            { return new Symbol(sym._SYMB_21);
            }
          case 128: break;
          case 41: 
            { return new Symbol(sym._SYMB_13);
            }
          case 129: break;
          case 42: 
            { return new Symbol(sym._SYMB_18);
            }
          case 130: break;
          case 43: 
            { return new Symbol(sym._SYMB_16);
            }
          case 131: break;
          case 44: 
            { return new Symbol(sym._SYMB_17);
            }
          case 132: break;
          case 45: 
            { return new Symbol(sym._SYMB_19);
            }
          case 133: break;
          case 46: 
            { yybegin(COMMENT);
            }
          case 134: break;
          case 47: 
            { return new Symbol(sym._SYMB_52);
            }
          case 135: break;
          case 48: 
            { return new Symbol(sym._SYMB_49);
            }
          case 136: break;
          case 49: 
            { yybegin(YYINITIAL);
            }
          case 137: break;
          case 50: 
            { /* BNFC single-line comment */
            }
          case 138: break;
          case 51: 
            { return new Symbol(sym._SYMB_54);
            }
          case 139: break;
          case 52: 
            { return new Symbol(sym._SYMB_68);
            }
          case 140: break;
          case 53: 
            { return new Symbol(sym._SYMB_57);
            }
          case 141: break;
          case 54: 
            { return new Symbol(sym._SYMB_40);
            }
          case 142: break;
          case 55: 
            { return new Symbol(sym._SYMB_48);
            }
          case 143: break;
          case 56: 
            { return new Symbol(sym._SYMB_61);
            }
          case 144: break;
          case 57: 
            { return new Symbol(sym._SYMB_41);
            }
          case 145: break;
          case 58: 
            { return new Symbol(sym._SYMB_32);
            }
          case 146: break;
          case 59: 
            { return new Symbol(sym._SYMB_64);
            }
          case 147: break;
          case 60: 
            { return new Symbol(sym._SYMB_65);
            }
          case 148: break;
          case 61: 
            { return new Symbol(sym._SYMB_69);
            }
          case 149: break;
          case 62: 
            { return new Symbol(sym._SYMB_58);
            }
          case 150: break;
          case 63: 
            { return new Symbol(sym._SYMB_36);
            }
          case 151: break;
          case 64: 
            { return new Symbol(sym._SYMB_39);
            }
          case 152: break;
          case 65: 
            { return new Symbol(sym._SYMB_47);
            }
          case 153: break;
          case 66: 
            { return new Symbol(sym._SYMB_31);
            }
          case 154: break;
          case 67: 
            { return new Symbol(sym._SYMB_34);
            }
          case 155: break;
          case 68: 
            { return new Symbol(sym._SYMB_55);
            }
          case 156: break;
          case 69: 
            { return new Symbol(sym._SYMB_67);
            }
          case 157: break;
          case 70: 
            { return new Symbol(sym._SYMB_70);
            }
          case 158: break;
          case 71: 
            { return new Symbol(sym._SYMB_37);
            }
          case 159: break;
          case 72: 
            { return new Symbol(sym._SYMB_38);
            }
          case 160: break;
          case 73: 
            { return new Symbol(sym._SYMB_33);
            }
          case 161: break;
          case 74: 
            { return new Symbol(sym._SYMB_62);
            }
          case 162: break;
          case 75: 
            { return new Symbol(sym._SYMB_43);
            }
          case 163: break;
          case 76: 
            { return new Symbol(sym._SYMB_60);
            }
          case 164: break;
          case 77: 
            { return new Symbol(sym._SYMB_66);
            }
          case 165: break;
          case 78: 
            { return new Symbol(sym._SYMB_51);
            }
          case 166: break;
          case 79: 
            { return new Symbol(sym._SYMB_56);
            }
          case 167: break;
          case 80: 
            { return new Symbol(sym._SYMB_63);
            }
          case 168: break;
          case 81: 
            { return new Symbol(sym._SYMB_44);
            }
          case 169: break;
          case 82: 
            { return new Symbol(sym._SYMB_35);
            }
          case 170: break;
          case 83: 
            { return new Symbol(sym._SYMB_46);
            }
          case 171: break;
          case 84: 
            { return new Symbol(sym._SYMB_45);
            }
          case 172: break;
          case 85: 
            { return new Symbol(sym._SYMB_59);
            }
          case 173: break;
          case 86: 
            { return new Symbol(sym._SYMB_42);
            }
          case 174: break;
          case 87: 
            { return new Symbol(sym._SYMB_53);
            }
          case 175: break;
          case 88: 
            { return new Symbol(sym._SYMB_50);
            }
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
