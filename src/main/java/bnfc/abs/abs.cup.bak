// -*- Java -*- This Cup file was machine-generated by BNFC
package bnfc.abs;

parser code {:
  public bnfc.abs.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (bnfc.abs.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal bnfc.abs.Absyn.Literal Literal;
nonterminal bnfc.abs.Absyn.QU QU;
nonterminal bnfc.abs.Absyn.QL QL;
nonterminal bnfc.abs.Absyn.QA QA;
nonterminal bnfc.abs.Absyn.ListU ListU;
nonterminal bnfc.abs.Absyn.ListQU ListQU;
nonterminal bnfc.abs.Absyn.ListQA ListQA;
nonterminal bnfc.abs.Absyn.T T;
nonterminal bnfc.abs.Absyn.ListT ListT;
nonterminal bnfc.abs.Absyn.FormalPar FormalPar;
nonterminal bnfc.abs.Absyn.ListFormalPar ListFormalPar;
nonterminal bnfc.abs.Absyn.Program Program;
nonterminal bnfc.abs.Absyn.Module Module;
nonterminal bnfc.abs.Absyn.ListModule ListModule;
nonterminal bnfc.abs.Absyn.Export Export;
nonterminal bnfc.abs.Absyn.ListExport ListExport;
nonterminal bnfc.abs.Absyn.Import Import;
nonterminal bnfc.abs.Absyn.ListImport ListImport;
nonterminal bnfc.abs.Absyn.IsForeign IsForeign;
nonterminal bnfc.abs.Absyn.Decl Decl;
nonterminal bnfc.abs.Absyn.ListConstrIdent ListConstrIdent;
nonterminal bnfc.abs.Absyn.ConstrIdent ConstrIdent;
nonterminal bnfc.abs.Absyn.ListConstrType ListConstrType;
nonterminal bnfc.abs.Absyn.ConstrType ConstrType;
nonterminal bnfc.abs.Absyn.FunBody FunBody;
nonterminal bnfc.abs.Absyn.ListMethSig ListMethSig;
nonterminal bnfc.abs.Absyn.MethSig MethSig;
nonterminal bnfc.abs.Absyn.ListClassBody ListClassBody;
nonterminal bnfc.abs.Absyn.ClassBody ClassBody;
nonterminal bnfc.abs.Absyn.Stm Stm;
nonterminal bnfc.abs.Absyn.SCaseBranch SCaseBranch;
nonterminal bnfc.abs.Absyn.ListSCaseBranch ListSCaseBranch;
nonterminal bnfc.abs.Absyn.AwaitGuard AwaitGuard;
nonterminal bnfc.abs.Absyn.Exp Exp;
nonterminal bnfc.abs.Absyn.ListPureExp ListPureExp;
nonterminal bnfc.abs.Absyn.PureExp PureExp;
nonterminal bnfc.abs.Absyn.PureExp PureExp1;
nonterminal bnfc.abs.Absyn.PureExp PureExp2;
nonterminal bnfc.abs.Absyn.PureExp PureExp3;
nonterminal bnfc.abs.Absyn.PureExp PureExp4;
nonterminal bnfc.abs.Absyn.PureExp PureExp5;
nonterminal bnfc.abs.Absyn.PureExp PureExp6;
nonterminal bnfc.abs.Absyn.PureExp PureExp7;
nonterminal bnfc.abs.Absyn.ECaseBranch ECaseBranch;
nonterminal bnfc.abs.Absyn.ListECaseBranch ListECaseBranch;
nonterminal bnfc.abs.Absyn.ListPattern ListPattern;
nonterminal bnfc.abs.Absyn.Pattern Pattern;
nonterminal bnfc.abs.Absyn.EffExp EffExp;
nonterminal bnfc.abs.Absyn.Ann Ann;
nonterminal bnfc.abs.Absyn.ListAnn ListAnn;
nonterminal bnfc.abs.Absyn.Ann_ Ann_;
nonterminal bnfc.abs.Absyn.AnnStm AnnStm;
nonterminal bnfc.abs.Absyn.ListAnnStm ListAnnStm;
nonterminal bnfc.abs.Absyn.AnnDecl AnnDecl;
nonterminal bnfc.abs.Absyn.ListAnnDecl ListAnnDecl;
nonterminal bnfc.abs.Absyn.MaybeFinally MaybeFinally;
nonterminal bnfc.abs.Absyn.MaybeBlock MaybeBlock;

terminal _SYMB_0;    //   .
terminal _SYMB_1;    //   ,
terminal _SYMB_2;    //   <
terminal _SYMB_3;    //   >
terminal _SYMB_4;    //   _
terminal _SYMB_5;    //   ;
terminal _SYMB_6;    //   *
terminal _SYMB_7;    //   =
terminal _SYMB_8;    //   |
terminal _SYMB_9;    //   (
terminal _SYMB_10;    //   )
terminal _SYMB_11;    //   {
terminal _SYMB_12;    //   }
terminal _SYMB_13;    //   =>
terminal _SYMB_14;    //   ?
terminal _SYMB_15;    //   &
terminal _SYMB_16;    //   ||
terminal _SYMB_17;    //   &&
terminal _SYMB_18;    //   ==
terminal _SYMB_19;    //   !=
terminal _SYMB_20;    //   <=
terminal _SYMB_21;    //   >=
terminal _SYMB_22;    //   +
terminal _SYMB_23;    //   -
terminal _SYMB_24;    //   /
terminal _SYMB_25;    //   %
terminal _SYMB_26;    //   ~
terminal _SYMB_27;    //   [
terminal _SYMB_28;    //   ]
terminal _SYMB_29;    //   !
terminal _SYMB_30;    //   :
terminal _SYMB_31;    //   assert
terminal _SYMB_32;    //   await
terminal _SYMB_33;    //   builtin
terminal _SYMB_34;    //   case
terminal _SYMB_35;    //   catch
terminal _SYMB_36;    //   class
terminal _SYMB_37;    //   data
terminal _SYMB_38;    //   def
terminal _SYMB_39;    //   duration
terminal _SYMB_40;    //   else
terminal _SYMB_41;    //   exception
terminal _SYMB_42;    //   export
terminal _SYMB_43;    //   extends
terminal _SYMB_44;    //   fimport
terminal _SYMB_45;    //   finally
terminal _SYMB_46;    //   from
terminal _SYMB_47;    //   get
terminal _SYMB_48;    //   if
terminal _SYMB_49;    //   implements
terminal _SYMB_50;    //   import
terminal _SYMB_51;    //   in
terminal _SYMB_52;    //   interface
terminal _SYMB_53;    //   let
terminal _SYMB_54;    //   local
terminal _SYMB_55;    //   module
terminal _SYMB_56;    //   new
terminal _SYMB_57;    //   now
terminal _SYMB_58;    //   null
terminal _SYMB_59;    //   print
terminal _SYMB_60;    //   println
terminal _SYMB_61;    //   pro_give
terminal _SYMB_62;    //   pro_new
terminal _SYMB_63;    //   pro_try
terminal _SYMB_64;    //   readln
terminal _SYMB_65;    //   return
terminal _SYMB_66;    //   skip
terminal _SYMB_67;    //   suspend
terminal _SYMB_68;    //   then
terminal _SYMB_69;    //   this
terminal _SYMB_70;    //   thisDC
terminal _SYMB_71;    //   throw
terminal _SYMB_72;    //   try
terminal _SYMB_73;    //   type
terminal _SYMB_74;    //   while

terminal String _STRING_;

terminal Long _INTEGER_;
terminal Double _DOUBLE_;


terminal String U;
terminal String L;


start with Program;


Literal ::= _SYMB_58  {: RESULT = new bnfc.abs.Absyn.LNull(); :} 
  | _SYMB_69  {: RESULT = new bnfc.abs.Absyn.LThis(); :}
  | _STRING_:p_1  {: RESULT = new bnfc.abs.Absyn.LStr(p_1); :}
  | _INTEGER_:p_1  {: RESULT = new bnfc.abs.Absyn.LInt(p_1); :}
  | _DOUBLE_:p_1  {: RESULT = new bnfc.abs.Absyn.LFloat(p_1); :}
  | _SYMB_70  {: RESULT = new bnfc.abs.Absyn.LThisDC(); :}
;
QU ::= U:p_1  {: RESULT = new bnfc.abs.Absyn.U_(p_1); :} 
  | U:p_1 _SYMB_0 QU:p_3  {: RESULT = new bnfc.abs.Absyn.QU_(p_1,p_3); :}
;
QL ::= L:p_1  {: RESULT = new bnfc.abs.Absyn.L_(p_1); :} 
  | U:p_1 _SYMB_0 QL:p_3  {: RESULT = new bnfc.abs.Absyn.QL_(p_1,p_3); :}
;
QA ::= L:p_1  {: RESULT = new bnfc.abs.Absyn.LA(p_1); :} 
  | U:p_1  {: RESULT = new bnfc.abs.Absyn.UA(p_1); :}
  | U:p_1 _SYMB_0 QA:p_3  {: RESULT = new bnfc.abs.Absyn.QA_(p_1,p_3); :}
;
ListU ::= U:p_1  {: RESULT = new bnfc.abs.Absyn.ListU(); RESULT.addLast(p_1); :} 
  | U:p_1 _SYMB_1 ListU:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListQU ::= QU:p_1  {: RESULT = new bnfc.abs.Absyn.ListQU(); RESULT.addLast(p_1); :} 
  | QU:p_1 _SYMB_1 ListQU:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListQA ::= QA:p_1  {: RESULT = new bnfc.abs.Absyn.ListQA(); RESULT.addLast(p_1); :} 
  | QA:p_1 _SYMB_1 ListQA:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
T ::= QU:p_1  {: RESULT = new bnfc.abs.Absyn.TSimple(p_1); :} 
  | QU:p_1 _SYMB_2 ListT:p_3 _SYMB_3  {: RESULT = new bnfc.abs.Absyn.TPoly(p_1,p_3); :}
  | _SYMB_4  {: RESULT = new bnfc.abs.Absyn.TInfer(); :}
;
ListT ::= T:p_1  {: RESULT = new bnfc.abs.Absyn.ListT(); RESULT.addLast(p_1); :} 
  | T:p_1 _SYMB_1 ListT:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
FormalPar ::= T:p_1 L:p_2  {: RESULT = new bnfc.abs.Absyn.FormalParameter(p_1,p_2); :} 
;
ListFormalPar ::=  /* empty */  {: RESULT = new bnfc.abs.Absyn.ListFormalPar(); :} 
  | FormalPar:p_1  {: RESULT = new bnfc.abs.Absyn.ListFormalPar(); RESULT.addLast(p_1); :}
  | FormalPar:p_1 _SYMB_1 ListFormalPar:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Program ::= ListModule:p_1  {: RESULT = new bnfc.abs.Absyn.Prog(p_1); :} 
;
Module ::= _SYMB_55 QU:p_2 _SYMB_5 ListExport:p_4 ListImport:p_5 ListAnnDecl:p_6 MaybeBlock:p_7  {: RESULT = new bnfc.abs.Absyn.Mod(p_2,p_4,p_5,p_6,p_7); :} 
;
ListModule ::=  /* empty */  {: RESULT = new bnfc.abs.Absyn.ListModule(); :} 
  | ListModule:p_1 Module:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Export ::= _SYMB_42 _SYMB_6  {: RESULT = new bnfc.abs.Absyn.StarExport(); :} 
  | _SYMB_42 _SYMB_6 _SYMB_46 QU:p_4  {: RESULT = new bnfc.abs.Absyn.StarFromExport(p_4); :}
  | _SYMB_42 ListQA:p_2  {: RESULT = new bnfc.abs.Absyn.AnyExport(p_2); :}
  | _SYMB_42 ListQA:p_2 _SYMB_46 QU:p_4  {: RESULT = new bnfc.abs.Absyn.AnyFromExport(p_2,p_4); :}
;
ListExport ::=  /* empty */  {: RESULT = new bnfc.abs.Absyn.ListExport(); :} 
  | ListExport:p_1 Export:p_2 _SYMB_5  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Import ::= IsForeign:p_1 _SYMB_6 _SYMB_46 QU:p_4  {: RESULT = new bnfc.abs.Absyn.StarFromImport(p_1,p_4); :} 
  | IsForeign:p_1 ListQA:p_2  {: RESULT = new bnfc.abs.Absyn.AnyImport(p_1,p_2); :}
  | IsForeign:p_1 ListQA:p_2 _SYMB_46 QU:p_4  {: RESULT = new bnfc.abs.Absyn.AnyFromImport(p_1,p_2,p_4); :}
;
ListImport ::=  /* empty */  {: RESULT = new bnfc.abs.Absyn.ListImport(); :} 
  | ListImport:p_1 Import:p_2 _SYMB_5  {: RESULT = p_1; p_1.addLast(p_2); :}
;
IsForeign ::= _SYMB_50  {: RESULT = new bnfc.abs.Absyn.NoForeign(); :} 
  | _SYMB_44  {: RESULT = new bnfc.abs.Absyn.YesForeign(); :}
;
Decl ::= _SYMB_73 U:p_2 _SYMB_7 T:p_4 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.DType(p_2,p_4); :} 
  | _SYMB_73 U:p_2 _SYMB_2 ListU:p_4 _SYMB_3 _SYMB_7 T:p_7 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.DTypePoly(p_2,p_4,p_7); :}
  | _SYMB_37 U:p_2 _SYMB_7 ListConstrIdent:p_4 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.DData(p_2,p_4); :}
  | _SYMB_37 U:p_2 _SYMB_2 ListU:p_4 _SYMB_3 _SYMB_7 ListConstrIdent:p_7 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.DDataPoly(p_2,p_4,p_7); :}
  | _SYMB_38 T:p_2 L:p_3 _SYMB_9 ListFormalPar:p_5 _SYMB_10 _SYMB_7 FunBody:p_8 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.DFun(p_2,p_3,p_5,p_8); :}
  | _SYMB_38 T:p_2 L:p_3 _SYMB_2 ListU:p_5 _SYMB_3 _SYMB_9 ListFormalPar:p_8 _SYMB_10 _SYMB_7 FunBody:p_11 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.DFunPoly(p_2,p_3,p_5,p_8,p_11); :}
  | _SYMB_52 U:p_2 _SYMB_11 ListMethSig:p_4 _SYMB_12  {: RESULT = new bnfc.abs.Absyn.DInterf(p_2,p_4); :}
  | _SYMB_52 U:p_2 _SYMB_43 ListQU:p_4 _SYMB_11 ListMethSig:p_6 _SYMB_12  {: RESULT = new bnfc.abs.Absyn.DExtends(p_2,p_4,p_6); :}
  | _SYMB_36 U:p_2 _SYMB_11 ListClassBody:p_4 MaybeBlock:p_5 ListClassBody:p_6 _SYMB_12  {: RESULT = new bnfc.abs.Absyn.DClass(p_2,p_4,p_5,p_6); :}
  | _SYMB_36 U:p_2 _SYMB_9 ListFormalPar:p_4 _SYMB_10 _SYMB_11 ListClassBody:p_7 MaybeBlock:p_8 ListClassBody:p_9 _SYMB_12  {: RESULT = new bnfc.abs.Absyn.DClassPar(p_2,p_4,p_7,p_8,p_9); :}
  | _SYMB_36 U:p_2 _SYMB_49 ListQU:p_4 _SYMB_11 ListClassBody:p_6 MaybeBlock:p_7 ListClassBody:p_8 _SYMB_12  {: RESULT = new bnfc.abs.Absyn.DClassImplements(p_2,p_4,p_6,p_7,p_8); :}
  | _SYMB_36 U:p_2 _SYMB_9 ListFormalPar:p_4 _SYMB_10 _SYMB_49 ListQU:p_7 _SYMB_11 ListClassBody:p_9 MaybeBlock:p_10 ListClassBody:p_11 _SYMB_12  {: RESULT = new bnfc.abs.Absyn.DClassParImplements(p_2,p_4,p_7,p_9,p_10,p_11); :}
  | _SYMB_41 ConstrIdent:p_2 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.DException(p_2); :}
;
ListConstrIdent ::= ConstrIdent:p_1  {: RESULT = new bnfc.abs.Absyn.ListConstrIdent(); RESULT.addLast(p_1); :} 
  | ConstrIdent:p_1 _SYMB_8 ListConstrIdent:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ConstrIdent ::= U:p_1  {: RESULT = new bnfc.abs.Absyn.SinglConstrIdent(p_1); :} 
  | U:p_1 _SYMB_9 ListConstrType:p_3 _SYMB_10  {: RESULT = new bnfc.abs.Absyn.ParamConstrIdent(p_1,p_3); :}
;
ListConstrType ::=  /* empty */  {: RESULT = new bnfc.abs.Absyn.ListConstrType(); :} 
  | ConstrType:p_1  {: RESULT = new bnfc.abs.Absyn.ListConstrType(); RESULT.addLast(p_1); :}
  | ConstrType:p_1 _SYMB_1 ListConstrType:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ConstrType ::= T:p_1  {: RESULT = new bnfc.abs.Absyn.EmptyConstrType(p_1); :} 
  | T:p_1 L:p_2  {: RESULT = new bnfc.abs.Absyn.RecordConstrType(p_1,p_2); :}
;
FunBody ::= _SYMB_33  {: RESULT = new bnfc.abs.Absyn.BuiltinFunBody(); :} 
  | PureExp:p_1  {: RESULT = new bnfc.abs.Absyn.NormalFunBody(p_1); :}
;
ListMethSig ::=  /* empty */  {: RESULT = new bnfc.abs.Absyn.ListMethSig(); :} 
  | ListMethSig:p_1 MethSig:p_2 _SYMB_5  {: RESULT = p_1; p_1.addLast(p_2); :}
;
MethSig ::= ListAnn:p_1 T:p_2 L:p_3 _SYMB_9 ListFormalPar:p_5 _SYMB_10  {: RESULT = new bnfc.abs.Absyn.MethSignature(p_1,p_2,p_3,p_5); :} 
;
ListClassBody ::=  /* empty */  {: RESULT = new bnfc.abs.Absyn.ListClassBody(); :} 
  | ListClassBody:p_1 ClassBody:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
ClassBody ::= T:p_1 L:p_2 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.FieldClassBody(p_1,p_2); :} 
  | T:p_1 L:p_2 _SYMB_7 PureExp:p_4 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.FieldAssignClassBody(p_1,p_2,p_4); :}
  | T:p_1 L:p_2 _SYMB_9 ListFormalPar:p_4 _SYMB_10 _SYMB_11 ListAnnStm:p_7 _SYMB_12  {: RESULT = new bnfc.abs.Absyn.MethClassBody(p_1,p_2,p_4,p_7); :}
;
Stm ::= _SYMB_66 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.SSkip(); :} 
  | _SYMB_67 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.SSuspend(); :}
  | _SYMB_65 Exp:p_2 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.SReturn(p_2); :}
  | _SYMB_31 PureExp:p_2 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.SAssert(p_2); :}
  | _SYMB_32 AwaitGuard:p_2 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.SAwait(p_2); :}
  | L:p_1 _SYMB_7 Exp:p_3 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.SAss(p_1,p_3); :}
  | _SYMB_69 _SYMB_0 L:p_3 _SYMB_7 Exp:p_5 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.SFieldAss(p_3,p_5); :}
  | T:p_1 L:p_2 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.SDec(p_1,p_2); :}
  | T:p_1 L:p_2 _SYMB_7 Exp:p_4 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.SDecAss(p_1,p_2,p_4); :}
  | _SYMB_74 _SYMB_9 PureExp:p_3 _SYMB_10 AnnStm:p_5  {: RESULT = new bnfc.abs.Absyn.SWhile(p_3,p_5); :}
  | _SYMB_48 _SYMB_9 PureExp:p_3 _SYMB_10 Stm:p_5  {: RESULT = new bnfc.abs.Absyn.SIf(p_3,p_5); :}
  | _SYMB_48 _SYMB_9 PureExp:p_3 _SYMB_10 Stm:p_5 _SYMB_40 Stm:p_7  {: RESULT = new bnfc.abs.Absyn.SIfElse(p_3,p_5,p_7); :}
  | _SYMB_34 PureExp:p_2 _SYMB_11 ListSCaseBranch:p_4 _SYMB_12  {: RESULT = new bnfc.abs.Absyn.SCase(p_2,p_4); :}
  | _SYMB_11 ListAnnStm:p_2 _SYMB_12  {: RESULT = new bnfc.abs.Absyn.SBlock(p_2); :}
  | Exp:p_1 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.SExp(p_1); :}
  | _SYMB_59 PureExp:p_2 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.SPrint(p_2); :}
  | _SYMB_60 PureExp:p_2 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.SPrintln(p_2); :}
  | _SYMB_71 PureExp:p_2 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.SThrow(p_2); :}
  | _SYMB_72 AnnStm:p_2 _SYMB_35 _SYMB_11 ListSCaseBranch:p_5 _SYMB_12 MaybeFinally:p_7  {: RESULT = new bnfc.abs.Absyn.STryCatchFinally(p_2,p_5,p_7); :}
  | PureExp:p_1 _SYMB_0 _SYMB_61 _SYMB_9 PureExp:p_5 _SYMB_10 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.SGive(p_1,p_5); :}
  | _SYMB_39 _SYMB_9 PureExp:p_3 _SYMB_1 PureExp:p_5 _SYMB_10 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.SDuration(p_3,p_5); :}
;
SCaseBranch ::= Pattern:p_1 _SYMB_13 AnnStm:p_3  {: RESULT = new bnfc.abs.Absyn.SCaseB(p_1,p_3); :} 
;
ListSCaseBranch ::= SCaseBranch:p_1  {: RESULT = new bnfc.abs.Absyn.ListSCaseBranch(); RESULT.addLast(p_1); :} 
  | SCaseBranch:p_1 ListSCaseBranch:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
AwaitGuard ::= L:p_1 _SYMB_14  {: RESULT = new bnfc.abs.Absyn.GFut(p_1); :} 
  | _SYMB_69 _SYMB_0 L:p_3 _SYMB_14  {: RESULT = new bnfc.abs.Absyn.GFutField(p_3); :}
  | PureExp:p_1  {: RESULT = new bnfc.abs.Absyn.GExp(p_1); :}
  | AwaitGuard:p_1 _SYMB_15 AwaitGuard:p_3  {: RESULT = new bnfc.abs.Absyn.GAnd(p_1,p_3); :}
  | _SYMB_39 _SYMB_9 PureExp:p_3 _SYMB_1 PureExp:p_5 _SYMB_10  {: RESULT = new bnfc.abs.Absyn.GDuration(p_3,p_5); :}
;
Exp ::= PureExp:p_1  {: RESULT = new bnfc.abs.Absyn.ExpP(p_1); :} 
  | EffExp:p_1  {: RESULT = new bnfc.abs.Absyn.ExpE(p_1); :}
;
ListPureExp ::=  /* empty */  {: RESULT = new bnfc.abs.Absyn.ListPureExp(); :} 
  | PureExp:p_1  {: RESULT = new bnfc.abs.Absyn.ListPureExp(); RESULT.addLast(p_1); :}
  | PureExp:p_1 _SYMB_1 ListPureExp:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
PureExp ::= PureExp:p_1 _SYMB_16 PureExp1:p_3  {: RESULT = new bnfc.abs.Absyn.EOr(p_1,p_3); :} 
  | PureExp1:p_1  {: RESULT = p_1; :}
  | _SYMB_53 _SYMB_9 FormalPar:p_3 _SYMB_10 _SYMB_7 PureExp:p_6 _SYMB_51 PureExp:p_8  {: RESULT = new bnfc.abs.Absyn.ELet(p_3,p_6,p_8); :}
  | _SYMB_48 PureExp:p_2 _SYMB_68 PureExp:p_4 _SYMB_40 PureExp:p_6  {: RESULT = new bnfc.abs.Absyn.EIf(p_2,p_4,p_6); :}
  | _SYMB_34 PureExp:p_2 _SYMB_11 ListECaseBranch:p_4 _SYMB_12  {: RESULT = new bnfc.abs.Absyn.ECase(p_2,p_4); :}
;
PureExp1 ::= PureExp1:p_1 _SYMB_17 PureExp2:p_3  {: RESULT = new bnfc.abs.Absyn.EAnd(p_1,p_3); :} 
  | PureExp2:p_1  {: RESULT = p_1; :}
;
PureExp2 ::= PureExp2:p_1 _SYMB_18 PureExp3:p_3  {: RESULT = new bnfc.abs.Absyn.EEq(p_1,p_3); :} 
  | PureExp2:p_1 _SYMB_19 PureExp3:p_3  {: RESULT = new bnfc.abs.Absyn.ENeq(p_1,p_3); :}
  | PureExp3:p_1  {: RESULT = p_1; :}
;
PureExp3 ::= PureExp3:p_1 _SYMB_2 PureExp4:p_3  {: RESULT = new bnfc.abs.Absyn.ELt(p_1,p_3); :} 
  | PureExp3:p_1 _SYMB_20 PureExp4:p_3  {: RESULT = new bnfc.abs.Absyn.ELe(p_1,p_3); :}
  | PureExp3:p_1 _SYMB_3 PureExp4:p_3  {: RESULT = new bnfc.abs.Absyn.EGt(p_1,p_3); :}
  | PureExp3:p_1 _SYMB_21 PureExp4:p_3  {: RESULT = new bnfc.abs.Absyn.EGe(p_1,p_3); :}
  | PureExp4:p_1  {: RESULT = p_1; :}
;
PureExp4 ::= PureExp4:p_1 _SYMB_22 PureExp5:p_3  {: RESULT = new bnfc.abs.Absyn.EAdd(p_1,p_3); :} 
  | PureExp4:p_1 _SYMB_23 PureExp5:p_3  {: RESULT = new bnfc.abs.Absyn.ESub(p_1,p_3); :}
  | PureExp5:p_1  {: RESULT = p_1; :}
;
PureExp5 ::= PureExp5:p_1 _SYMB_6 PureExp6:p_3  {: RESULT = new bnfc.abs.Absyn.EMul(p_1,p_3); :} 
  | PureExp5:p_1 _SYMB_24 PureExp6:p_3  {: RESULT = new bnfc.abs.Absyn.EDiv(p_1,p_3); :}
  | PureExp5:p_1 _SYMB_25 PureExp6:p_3  {: RESULT = new bnfc.abs.Absyn.EMod(p_1,p_3); :}
  | PureExp6:p_1  {: RESULT = p_1; :}
;
PureExp6 ::= _SYMB_26 PureExp6:p_2  {: RESULT = new bnfc.abs.Absyn.ELogNeg(p_2); :} 
  | _SYMB_23 PureExp6:p_2  {: RESULT = new bnfc.abs.Absyn.EIntNeg(p_2); :}
  | PureExp7:p_1  {: RESULT = p_1; :}
;
PureExp7 ::= QL:p_1 _SYMB_9 ListPureExp:p_3 _SYMB_10  {: RESULT = new bnfc.abs.Absyn.EFunCall(p_1,p_3); :} 
  | QL:p_1 _SYMB_27 ListPureExp:p_3 _SYMB_28  {: RESULT = new bnfc.abs.Absyn.ENaryFunCall(p_1,p_3); :}
  | L:p_1  {: RESULT = new bnfc.abs.Absyn.EVar(p_1); :}
  | _SYMB_69 _SYMB_0 L:p_3  {: RESULT = new bnfc.abs.Absyn.EField(p_3); :}
  | QU:p_1  {: RESULT = new bnfc.abs.Absyn.ESinglConstr(p_1); :}
  | QU:p_1 _SYMB_9 ListPureExp:p_3 _SYMB_10  {: RESULT = new bnfc.abs.Absyn.EParamConstr(p_1,p_3); :}
  | Literal:p_1  {: RESULT = new bnfc.abs.Absyn.ELit(p_1); :}
  | _SYMB_9 PureExp:p_2 _SYMB_10  {: RESULT = p_2; :}
;
ECaseBranch ::= Pattern:p_1 _SYMB_13 PureExp:p_3  {: RESULT = new bnfc.abs.Absyn.ECaseB(p_1,p_3); :} 
;
ListECaseBranch ::= ECaseBranch:p_1 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.ListECaseBranch(); RESULT.addLast(p_1); :} 
  | ECaseBranch:p_1 _SYMB_5 ListECaseBranch:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListPattern ::=  /* empty */  {: RESULT = new bnfc.abs.Absyn.ListPattern(); :} 
  | Pattern:p_1  {: RESULT = new bnfc.abs.Absyn.ListPattern(); RESULT.addLast(p_1); :}
  | Pattern:p_1 _SYMB_1 ListPattern:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Pattern ::= Literal:p_1  {: RESULT = new bnfc.abs.Absyn.PLit(p_1); :} 
  | L:p_1  {: RESULT = new bnfc.abs.Absyn.PVar(p_1); :}
  | QU:p_1  {: RESULT = new bnfc.abs.Absyn.PSinglConstr(p_1); :}
  | QU:p_1 _SYMB_9 ListPattern:p_3 _SYMB_10  {: RESULT = new bnfc.abs.Absyn.PParamConstr(p_1,p_3); :}
  | _SYMB_4  {: RESULT = new bnfc.abs.Absyn.PWildCard(); :}
;
EffExp ::= _SYMB_56 QU:p_2 _SYMB_9 ListPureExp:p_4 _SYMB_10  {: RESULT = new bnfc.abs.Absyn.New(p_2,p_4); :} 
  | _SYMB_56 _SYMB_54 QU:p_3 _SYMB_9 ListPureExp:p_5 _SYMB_10  {: RESULT = new bnfc.abs.Absyn.NewLocal(p_3,p_5); :}
  | PureExp:p_1 _SYMB_0 L:p_3 _SYMB_9 ListPureExp:p_5 _SYMB_10  {: RESULT = new bnfc.abs.Absyn.SyncMethCall(p_1,p_3,p_5); :}
  | _SYMB_69 _SYMB_0 L:p_3 _SYMB_9 ListPureExp:p_5 _SYMB_10  {: RESULT = new bnfc.abs.Absyn.ThisSyncMethCall(p_3,p_5); :}
  | PureExp:p_1 _SYMB_29 L:p_3 _SYMB_9 ListPureExp:p_5 _SYMB_10  {: RESULT = new bnfc.abs.Absyn.AsyncMethCall(p_1,p_3,p_5); :}
  | _SYMB_32 PureExp:p_2 _SYMB_29 L:p_4 _SYMB_9 ListPureExp:p_6 _SYMB_10  {: RESULT = new bnfc.abs.Absyn.AwaitMethCall(p_2,p_4,p_6); :}
  | PureExp:p_1 _SYMB_0 _SYMB_47  {: RESULT = new bnfc.abs.Absyn.Get(p_1); :}
  | _SYMB_64 _SYMB_9 _SYMB_10 _SYMB_5  {: RESULT = new bnfc.abs.Absyn.Readln(); :}
  | _SYMB_62  {: RESULT = new bnfc.abs.Absyn.ProNew(); :}
  | PureExp:p_1 _SYMB_0 _SYMB_63  {: RESULT = new bnfc.abs.Absyn.ProTry(p_1); :}
  | _SYMB_57 _SYMB_9 _SYMB_10  {: RESULT = new bnfc.abs.Absyn.Now(); :}
;
Ann ::= _SYMB_27 Ann_:p_2 _SYMB_28  {: RESULT = new bnfc.abs.Absyn.Annotation(p_2); :} 
;
ListAnn ::=  /* empty */  {: RESULT = new bnfc.abs.Absyn.ListAnn(); :} 
  | ListAnn:p_1 Ann:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Ann_ ::= PureExp:p_1  {: RESULT = new bnfc.abs.Absyn.AnnNoType(p_1); :} 
  | T:p_1 _SYMB_30 PureExp:p_3  {: RESULT = new bnfc.abs.Absyn.AnnWithType(p_1,p_3); :}
;
AnnStm ::= ListAnn:p_1 Stm:p_2  {: RESULT = new bnfc.abs.Absyn.AnnStatement(p_1,p_2); :} 
;
ListAnnStm ::=  /* empty */  {: RESULT = new bnfc.abs.Absyn.ListAnnStm(); :} 
  | ListAnnStm:p_1 AnnStm:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
AnnDecl ::= ListAnn:p_1 Decl:p_2  {: RESULT = new bnfc.abs.Absyn.AnnDeclaration(p_1,p_2); :} 
;
ListAnnDecl ::=  /* empty */  {: RESULT = new bnfc.abs.Absyn.ListAnnDecl(); :} 
  | ListAnnDecl:p_1 AnnDecl:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
MaybeFinally ::= _SYMB_45 AnnStm:p_2  {: RESULT = new bnfc.abs.Absyn.JustFinally(p_2); :} 
  |  /* empty */  {: RESULT = new bnfc.abs.Absyn.NoFinally(); :}
;
MaybeBlock ::= _SYMB_11 ListAnnStm:p_2 _SYMB_12  {: RESULT = new bnfc.abs.Absyn.JustBlock(p_2); :} 
  |  /* empty */  {: RESULT = new bnfc.abs.Absyn.NoBlock(); :}
;

