module ABS.StdLib;
export *;
export Cost;
import Cost from ABS.DC;

data Unit = Unit;               // builtin  
data String;                    // builtin  
data Int;                       // builtin
data Rat;                       // builtin
data Bool = True | False;       // builtin
data Fut<A>;                    // builtin
data Exception;                 // builtin
data Result<A> = Value(A val)|Error(String s); // TODO: remove this
data Location;                  // (For Component model) //

// TODO: uncomment these as soon as we fix the bug that causes name collisions
// between ExceptionDecl and DataConstructor.  (This only affects StdLib.)
// See TypeCheckerHelper:checkForDuplicateDecls().

// exception DivisionByZeroException;
// exception AssertionFailException;
// exception PatternMatchFailException;
// exception NullPointerException;
// exception StackOverflowEcxeption;
// exception HeapOverflowException;
// exception KeyboardInterruptException;

def Bool and(Bool a, Bool b) = a && b;
def Bool not(Bool a) = ~a;

def A max<A>(A a, A b) = if a > b then a else b;
def A min<A>(A a, A b) = if a < b then a else b;
    
def Rat abs(Rat x) = if x > 0 then x else -x;

def Int pow(Int b, Int n) =
    if n < 0 then
        0
    else case n {
        0 => 1;
        _ => b * pow(b, n-1);
    };

/**
 * Returns a random number between 0 (inclusive) and below (exclusive).
 */
def Int random(Int below) = builtin;

/**
 * Truncates a towards zero.
 */
def Int truncate(Rat a) = builtin;


data Maybe<A> = Nothing | Just(A fromJust);

def Bool isJust<A>(Maybe<A> a) = 
    case a { Just(j) => True; Nothing => False; };

data Either<A, B> = Left(A left) | Right(B right);

def Bool isLeft<A,B>(Either<A, B> val) = 
    case val { Left(x) => True; _ => False; };
    
def Bool isRight<A,B>(Either<A, B> val) = ~isLeft(val);


data Pair<A, B> = Pair(A fst, B snd); 

data Triple<A, B, C> = Triple(A fstT, B sndT, C trd); 

// Sets

// Sets are currently implemented as sorted lists (any implementation
// must yield the same structure regardless of insertion order so that
// set equality via == is preserved).  Using the Insert_ constructor
// directly is strongly discouraged.
data Set<A> = EmptySet | Insert(A, Set<A>);

// set constructor helper
def Set<A> set<A>(List<A> l) = 
    case l { 
       Nil => EmptySet; 
       Cons(x,xs) => insertElement(set(xs), x); 
    };

/**
 * Returns True if set 'ss' contains element 'e', False otherwise.
 */
def Bool contains<A>(Set<A> ss, A e) =
  case ss {
    EmptySet => False ;
    Insert(e, _) => True;
    Insert(x, xs) => if x > e then False else contains(xs, e);
  };
  
/**
 * Returns True if set 'xs' is empty, False  otherwise.
 */
def Bool emptySet<A>(Set<A> xs) = (xs == EmptySet); 

/**
 * Returns the size of set 'xs'.
 */
def Int size<A>(Set<A> xs) = 
   case xs {
      EmptySet => 0 ; 
      Insert(s, ss) => 1 + size(ss); 
   };

/**
 * Returns the union of sets 'set1' and 'set2'.
 */
def Set<A> union<A>(Set<A> set1, Set<A> set2) =
   case set1 {
      EmptySet => set2;
      Insert(e1, ss1) =>  case set2 {
          EmptySet => set1;
          Insert(e1, ss2) => Insert(e1, union(ss1, ss2));
          Insert(e2, ss2) =>
            if e1 < e2
            then Insert(e1, union(ss1, set2))
            else Insert(e2, union(set1, ss2));
      };
   }; 

/**
 * Returns the intersection of sets 'set1' and 'set2'.
 */
def Set<A> intersection<A>(Set<A> set1, Set<A> set2) =
   case set1 {
      EmptySet => EmptySet;
      Insert(e1, ss1) =>  case set2 {
          EmptySet => EmptySet;
          Insert(e1, ss2) => Insert(e1, intersection(ss1, ss2));
          Insert(e2, ss2) =>
            if e1 < e2
            then intersection(ss1, set2)
            else intersection(set1, ss2);
      };
   };

/**
 * Returns the difference of sets 'set1' and 'set2', i.e., all
 * elements of 'set1' that are not in 'set2'.
 */
def Set<A> difference<A>(Set<A> set1, Set<A> set2) =
   case set1 {
      EmptySet => EmptySet;
      Insert(e1, ss1) =>  case set2 {
          EmptySet => set1;
          Insert(e1, ss2) => difference(ss1, ss2);
          Insert(e2, ss2) =>
            if e1 < e2
            then Insert(e1, difference(ss1, set2))
            else difference(set1, ss2);
      };
   };

/**
 * Returns a set with all elements of set 'xs' plus element 'e'.
 * Returns 'xs' if 'xs' already contains 'e'.
 */
def Set<A> insertElement<A>(Set<A> xs, A e) =
  case xs {
      EmptySet => Insert(e, EmptySet);
      Insert(e, _) => xs;
      Insert(x, ss) => if e < x then Insert(e, xs) else Insert(x, insertElement(ss, e));
  };

/**
 * Returns a set with all elements of set 'xs' except element 'e'.
 */
def Set<A> remove<A>(Set<A> xs, A e) = 
  case xs {
     EmptySet => EmptySet ;
     Insert(e, ss) => ss;
     Insert(x, ss) => if e < x then xs else Insert(x, remove(ss, e));
  };

/**
 * Returns one (arbitrary) element from a set.
 * To iterate over a set, take one element and remove it from the set.
 * Repeat until set is empty.
 */
def A take<A>(Set<A> ss) =
  case ss {
    Insert(e, _) => e;
  };

// checks whether the input set has more elements to be iterated.
def Bool hasNext<A>(Set<A> s) = ~ emptySet(s); 

// Partial function to iterate over a set.
def Pair<Set<A>,A> next<A>(Set<A> s) = 
   case s { 
      Insert(e, set2) => Pair(set2,e); 
   };

// Lists
data List<A> = Nil | Cons(A head, List<A> tail);

def List<A> list<A>(List<A> l) = l; // list constructor helper

/**
 * Returns the length of list 'list'.
 */
def Int length<A>(List<A> list) = 
   case list { 
      Nil => 0 ; 
      Cons(p, l) => 1 + length(l) ; 
   };

/**
 * Returns True if list 'list' is empty, False otherwise.
 */
def Bool isEmpty<A>(List<A> list) = list == Nil;

/**
 * Returns element 'n' of list 'list'.
 */
def A nth<A>(List<A> list, Int n) = 
  case n { 
    0 => head(list) ; 
    _ => nth(tail(list), n-1); 
  };
  
/**
 * Returns a list where all occurrences of a have been removed
 */
def List<A> without<A>(List<A> list, A a) =
  case list {
     Nil => Nil;
     Cons(a, tail) => without(tail,a);
     Cons(x, tail) => Cons(x, without(tail,a));
  };  
  
/**
 * Returns a list containing all elements of list 'list1'
 * followed by all elements of list 'list2'.
 */
def List<A> concatenate<A>(List<A> list1, List<A> list2) =
  case list1 { 
    Nil => list2 ; 
    Cons(head, tail) =>  Cons(head, concatenate(tail, list2)); 
  };
  
/**
 * Returns a list containing all elements of list 'list' followed by 'p'.
 */
def List<A> appendright<A>(List<A> list, A p) = 
    concatenate(list, Cons(p, Nil));

/**
 * Returns a list containing all elements of 'list' in reverse order.
 */
def List<A> reverse<A>(List<A> list) =
  case list { 
     Cons(hd, tl) => appendright(reverse(tl), hd); 
     Nil => Nil; 
  };
  
/**
 * Returns a list of length 'n' containing 'p' n times.
 */
def List<A> copy<A>(A p, Int n) = 
   case n { 0 => Nil; m => Cons(p,copy(p,m-1)); };




// Maps
data Map<A, B> = EmptyMap | InsertAssoc(Pair<A, B>, Map<A, B>);
 // map constructor helper (does not preserve injectivity)
def Map<A, B> map<A, B>(List<Pair<A, B>> l) =
  case l { 
     Nil => EmptyMap; 
     Cons(hd, tl) => InsertAssoc(hd, map(tl)); 
  };
  
  
def Map<A, B> removeKey<A, B>(Map<A, B> map, A key) = // remove from the map
  case map {
  	EmptyMap => map;
    InsertAssoc(Pair(key, _), m) => m;
    InsertAssoc(pair, tail) => InsertAssoc(pair, removeKey(tail, key));
  };
    

def List<B> values<A, B>(Map<A, B> map) =
  case map {
    EmptyMap => Nil ;
    InsertAssoc(Pair(_, elem), tail) => Cons(elem, values(tail)) ;
  };

/**
 * Returns a set containing all keys of map 'map'.
 */
def Set<A> keys<A, B>(Map<A, B> map) =
  case map { 
    EmptyMap => EmptySet ;
    InsertAssoc(Pair(a, _), tail) => insertElement(keys(tail), a); 
  };
    
/**
 * Returns the value associated with key 'k' in map 'ms', or 'Nothing'.
 */
def Maybe<B> lookup<A, B>(Map<A, B> ms, A k) = // retrieve from the map
  case ms {
     InsertAssoc(Pair(k, y), _) => Just(y);
     InsertAssoc(_, tm) => lookup(tm, k);
     EmptyMap => Nothing;
  };

/**
 * Compatibility stub for #342. DEPRECATED!
 */
def Maybe<B> lookupMaybe<A, B>(Map<A, B> ms, A k) = lookup(ms, k);

/**
 * Returns the value associated with key 'k' in map 'ms',
 * or fails if not present.
 */
def B lookupUnsafe<A, B>(Map<A, B> ms, A k) = // retrieve from the map
  fromJust(lookup(ms,k));
  
/**
 * Returns the value associated with key 'k' in map 'ms', or the value 'd'
 * if 'k' has no entry in 'ms'.
 */
def B lookupDefault<A, B>(Map<A, B> ms, A k, B d) = // retrieve from the map
  case ms {
     InsertAssoc(Pair(k, y), _) => y;
     InsertAssoc(_, tm) => lookupDefault(tm, k, d);
     EmptyMap => d;
  };

/**
 * Returns a map with all entries of 'map' plus an entry 'p',
 * which might override but not remove another entry with the same key.
 */
def Map<A, B> insert<A, B>(Map<A, B> map, Pair<A, B> p) = InsertAssoc(p, map);

/**
 * Returns a map with all entries of 'ms' plus an entry mapping 'k' to 'v',
 * minus the first entry already mapping 'k' to a value.
 */  
def Map<A, B> put<A, B>(Map<A, B> ms, A k, B v) =
  case ms {
    EmptyMap => InsertAssoc(Pair(k, v),EmptyMap);
    InsertAssoc(Pair(k, _), ts) => InsertAssoc(Pair(k, v), ts);
    InsertAssoc(p, ts) => InsertAssoc(p, put(ts, k, v));
  };

/**
 * Returns a string with the base-10 textual representation of 'n'.
 */
def String intToString(Int n) =
  case n < 0 {
    True => "-" + intToStringPos(-n);
    False => intToStringPos(n);
  };

def String intToStringPos(Int n) =
  let (Int div) = (n / 10) in
  let (Int res) = (n % 10) in
  case n {
    0 => "0"; 1 => "1"; 2 => "2"; 3 => "3"; 4 => "4";
    5 => "5"; 6 => "6"; 7 => "7"; 8 => "8"; 9 => "9";
    _ => intToStringPos(div) + intToStringPos(res);
  };

/**
 * Returns a substring of string str of the given length starting from start (inclusive)
 * Where the first character has index 0
 * 
 * Example:
 *    substr("abcde",1,3) => "bcd"
 *     
 */
def String substr(String str, Int start, Int length) = builtin;

/**
 * Returns the length of the given string
 */
def Int strlen(String str) = builtin;

/**
 * Returns a string representation for t.
 */
def String toString<T>(T t) = builtin;

// Time and Duration datatypes.

// Time can be an integer value or InfTime.  Duration is aways an
// integer.
// 
// Durations can be added and subtracted from Times, and compared to
// each other.  Times can be compared to each other.
data Time = Time(Rat timeValue);
def Rat currentms() = builtin;
def Time now() = Time(currentms());

// use this like so:
//   Time t = now(); await timeDifference(now(), t) > 5;
def Rat timeDifference(Time t1, Time t2) =
  abs(timeValue(t2) - timeValue(t1));
def Bool timeLessThan(Time t1, Time t2) =
  timeValue(t1) < timeValue(t2);

data Duration = Duration(Rat durationValue) | InfDuration;
def Bool isDurationInfinite(Duration d) = 
  case d { Duration(_) => False; InfDuration => True; };

def Time addDuration(Time t, Duration d) =
  Time(timeValue(t) + durationValue(d));

def Time subtractDuration(Time t, Duration d) =
  Time(timeValue(t) - durationValue(d));

def Bool durationLessThan(Duration d1, Duration d2) =
  case d1 {
      Duration(v1) => case d2 {
          Duration(v2) => v1 < v2; 
          InfDuration => False; };
      // If d1 and d2 are infinite, < is not antisymmetric ...
      InfDuration => False;
  };

// negative if no (i.e. infinite) deadline
def Rat lowlevelDeadline() = builtin;
def Duration deadline() = 
  case lowlevelDeadline() < 0 {
      True => InfDuration;
      False => Duration(lowlevelDeadline());
  };

def Duration subtractFromDuration(Duration d, Rat v) =
  case d {
      InfDuration => InfDuration;
      Duration(x) => Duration(max(x - v, 0));
  };

// Annotation data type to express deadlines:
// [Deadline: Duration(5)] o!m();
type Deadline = Duration;
type Critical = Bool;

/**
 * Annotation data type to define the type of annotations
 * currently only TypeAnnotation exists
 */
data Annotation = TypeAnnotation; 
 
[TypeAnnotation]
data LocationType = Far | Near | Somewhere | Infer;
 
/**
 * Can be used to annotated classes and to ensure that
 * classes are always instantiated in the right way.
 * I.e. classes annotated with [COG] must be created via
 * "new", class annotated with [Plain] must be created by using
 * "new local".
 */
data ClassKindAnnotation = COG | Plain;

/**
 * Declare local variables to be final
 */
data FinalAnnotation = Final;

/**
 * Declare methods to be atomic, i.e., such methods must not
 * contain scheduling code and also no .get
 */ 
data AtomicityAnnotation = Atomic;

// functional break point
def A watch<A>(A val) = builtin;
def A watchEx<A, B>(A val, B info) = builtin;

// input/output, first version
def Unit println(String s) = builtin;
def Unit print(String s) = builtin;
def String readln() = builtin;


/**
 * Custom schedulers
 */
module ABS.Scheduler;
export *;
import * from ABS.StdLib;

data Scheduler;

// The Process datatype, passed to custom schedulers.
// 
// Pid, Process have no constructor, so this datastructure can't be generated within Abs
data Pid;
data Process;

def String method(Process p) = builtin;
def Time arrival(Process p) = builtin;
def Duration cost(Process p) = builtin;
def Duration procDeadline(Process p) = builtin;
def Time start(Process p) = builtin;
def Time finish(Process p) = builtin;
def Bool crit(Process p) = builtin;
def Int value(Process p) = builtin;

def Process defaultscheduler(List<Process> queue) = head(queue);

def Process randomscheduler(List<Process> queue) = nth(queue, random(length(queue)));

/**
 * Foreign language interface (FLI) definitions
 */
module ABS.FLI;
export *;

data FLIAnnotation = Foreign;


/** 
 * Deployment components
 * Used to model aspects of hardware configurations and deployment.
 */
module ABS.DC;
// Interfaces
export DeploymentComponent, CloudProvider;
// Annotations
export DC, Cost, Size, MaxSize, CogLocation;
// Datatypes, Constructors
export Resourcetype, CPU, Bandwidth, Memory, InfRat, Fin;
// Functions
export thisDC, finvalue;
import * from ABS.StdLib;

data Resourcetype = CPU | Bandwidth | Memory ;

data InfRat = InfRat | Fin(Rat finvalue);

// Sums things up in percents (thus the * 100, which makes us not lose
// precision.)
def Rat sumDivsN(List<Int> consumeds, List<Int> totals, Int n) =
  if (n==0 || isEmpty(consumeds) || isEmpty(totals))
  then 0
  else (head(consumeds) * 100 / head(totals)) + sumDivsN(tail(consumeds), tail(totals), n-1);

def Rat averageDivsN(List<Int> consumeds, List<Int> totals, Int length) =
  let (Int mins) = min(length, min(length(consumeds), length(totals)))
  in sumDivsN(consumeds, totals, mins) / mins;

interface DeploymentComponent {
    // Return the load (0-100) for given resourcetype over the last n periods.
    // If resource is infinite, return 0.
    [Atomic] Rat load(Resourcetype rtype, Int periods);
    // Return the total available amount for given resourcetype.
    [Atomic] InfRat total(Resourcetype rtype);
    // Utility method, implemented in terms of 'decrementResources' /
    // 'incrementResources'.
    Unit transfer(DeploymentComponent target, Rat amount, Resourcetype rtype);
    // Decrement available resourcetype by given amount from the next
    // time interval onwards.
    Unit decrementResources(Rat amount, Resourcetype rtype);
    // Increment available resourcetype by given amount from the next
    // time interval onwards.
    Unit incrementResources(Rat amount, Resourcetype rtype);

    Unit setProvider(CloudProvider provider);
    CloudProvider getProvider();
    // Convenience methods for calling CloudProvider acquireInstance,
    // releaseInstance.  If no cloud provider is set, return True.
    Bool acquire();
    Bool release();
    // Return True if we match needed resources according to description.  For
    // different resource types this might mean different things (e.g.,
    // available not total memory must match vs. total CPU speed must match).
    [Atomic] Bool matchesDescription(Map<Resourcetype, Rat> description);
}

interface CloudProvider {
    // (pre)launchInstance might have a delay, the others are instantaneous.
    // launchInstance might hand out an already-running instance if it has
    // been released; in this case there will be no delay.
    DeploymentComponent prelaunchInstance(Map<Resourcetype, Rat> d);
    DeploymentComponent launchInstance(Map<Resourcetype, Rat> description);
    // acquireInstance, releaseInstance are called from deployment components.
    // launchInstance does the equivalent of acquireInstance.
    Bool acquireInstance(DeploymentComponent instance);
    Bool releaseInstance(DeploymentComponent instance);
    Bool killInstance(DeploymentComponent instance);

    Rat getAccumulatedCost();
}

class CloudProvider(String name) implements CloudProvider {
    // Preliminary version - mind the FIXMEs!
    Set<DeploymentComponent> launchedInstances = set[];
    Set<DeploymentComponent> acquiredInstances = set[];
    Set<DeploymentComponent> killedInstances = set[];
    Int instanceCounter = 0;

    Unit run() {
        // TODO: loop with "await duration(1, 1)", sum up costs of deployment
        // components in launchedInstances, launchedInstancesNonEx,
        // acquiredInstances that have crossed their accounting period
        skip;
    }

    DeploymentComponent prelaunchInstance(Map<Resourcetype, Rat> d) {
        // Until we have a way of actually removing DCs, might as well re-use
        // them
        DeploymentComponent result = this.findMatchingInstance(killedInstances, d);
        if (result != null) {
            killedInstances = remove(killedInstances, result);
            launchedInstances = insertElement(launchedInstances, result);
        } else {
            result = new DeploymentComponent(name + "-"
                + toString(instanceCounter), d);
            instanceCounter = instanceCounter + 1;
            launchedInstances = insertElement(launchedInstances, result);
            // TODO: await for startup time here (and only here)
            result!setProvider(this);
        }
        return result;
    }

    DeploymentComponent launchInstance(Map<Resourcetype, Rat> d) {
        DeploymentComponent result = this.prelaunchInstance(d);
        acquiredInstances = insertElement(acquiredInstances, result);
        return result;
    }

    Bool acquireInstance(DeploymentComponent instance) {
        Bool result = True;
        if (contains(acquiredInstances, instance)) {
            result = False;
        } else {
            acquiredInstances = insertElement(acquiredInstances, instance);
        }
        return result;
    }
    Bool releaseInstance(DeploymentComponent instance) {
        // FIXME: Currently we do not protect against double-release and always
        // return True.  Once we have means of testing whether there is still
        // activity on a deployment component, we could refuse to release it in
        // that case and return False.
        if (contains(acquiredInstances, instance)) {
            acquiredInstances = remove(acquiredInstances, instance);
        }
        return True;
    }

    Bool killInstance(DeploymentComponent instance) {
        // Refuse to kill an acquired instance.
        // FIXME: is this the right thing?
        Bool result = ~(contains(acquiredInstances, instance));
        if (result) {
            launchedInstances = remove(launchedInstances, instance);
            killedInstances = insertElement(killedInstances, instance);
        }
        return result;
    }

    Rat getAccumulatedCost() {
        // TODO: implement
        return -1;
    }

    DeploymentComponent findMatchingInstance(Set<DeploymentComponent> instances,
        Map<Resourcetype, Rat> description)
        {
            DeploymentComponent result = null;
            while (~emptySet(instances) && result == null) {
                DeploymentComponent instance = take(instances);
                instances = remove(instances, instance);
                Bool matches = await instance!matchesDescription(description);
                if (matches) {
                    result = instance;
                }
            }
            return result;
        }
    }



class DeploymentComponent (String description, Map<Resourcetype, Rat> initconfig)
implements DeploymentComponent {
    // This class has fields that reflect execution state and resource
    // consumption; they are changed by the underlying runtime system.
    Time creationTime = now();
    // Histories are updated by the backend.  totalhistories stay empty in
    // case the DC has an infinite amount of resources for that type.
    List<Rat> cpuhistory = Nil;
    List<Rat> cpuhistorytotal = Nil;
    List<Rat> bwhistory = Nil;
    List<Rat> bwhistorytotal = Nil;
    List<Rat> memoryhistory = Nil;
    List<Rat> memoryhistorytotal = Nil;
    // Counters of consumed resources in current time unit.  Modified by the
    // backend where appropriate (CPU, bandwidth self-refresh; memory doesn't.)
    Rat cpuconsumed = 0;
    Rat bwconsumed = 0;
    Rat memoryconsumed = 0;
    // Initialized flag read by the backend to avoid premature execution
    Bool initialized = False;
    // Total amount of resources in current and next time interval.
    InfRat cpu = case lookup(initconfig, CPU) {
      Nothing => InfRat; Just(v) => Fin(v); };
    InfRat cpunext = cpu;
    InfRat bw = case lookup(initconfig, Bandwidth) {
      Nothing => InfRat; Just(v) => Fin(v); };
    InfRat bwnext = bw;
    InfRat memory = case lookup(initconfig, Memory) {
      Nothing => InfRat; Just(m) => Fin(m); };
    InfRat memorynext = memory;

    CloudProvider cloudprovider = null;
    {
        this.initialized = True;
    }
    [Atomic] Rat load(Resourcetype rtype, Int periods) {
        Rat result = 0;
        case (rtype) {
            CPU => {
                if (cpu != InfRat) {
                    result = averageDivsN(cpuhistory, cpuhistorytotal, periods);
                }
            }
            Bandwidth => {
                if (bw != InfRat) {
                    result = averageDivsN(bwhistory, bwhistorytotal, periods);
                }
            }
            Memory => {
                if (memory != InfRat) {
                    result = averageDivsN(memoryhistory, memoryhistorytotal, periods);
                }
            }
        }
        return result;
    }
    [Atomic] InfRat total(Resourcetype rtype) {
        InfRat result = InfRat;
        case (rtype) {
            CPU => result = cpu;
            Bandwidth => result = bw;
            Memory => result = memory;
        }
        return result;
    }
    
    // Transfer resources between deployment components.
    // FIXME: load calculation will be invalid if resource totals have
    // been changed in the specified interval.
    Unit transfer(DeploymentComponent target, Rat amount, Resourcetype rtype) {
        this.decrementResources(amount, rtype);
        target!incrementResources(amount, rtype);
    }

    Unit decrementResources(Rat amount, Resourcetype rtype) {
        case (rtype) {
            CPU => {
                if (cpunext != InfRat) {
                    assert (finvalue(cpunext) >= amount);
                    cpunext = Fin(finvalue(cpunext) - amount);
                }
            }
            Bandwidth => if (bwnext != InfRat) {
                assert (finvalue(bwnext) >= amount);
                bwnext = Fin(finvalue(bwnext) - amount);
            }
            Memory => if (memorynext != InfRat) {
                assert (finvalue(memorynext) >= amount);
                memorynext = Fin(finvalue(memorynext) - amount);
            }
        }
    }
    Unit incrementResources(Rat amount, Resourcetype rtype) {
        case (rtype) {
            CPU => {
                if (cpunext != InfRat) {
                    cpunext = Fin(finvalue(cpunext) + amount);
                }
            }
            Bandwidth => if (bwnext != InfRat) {
                bwnext = Fin(finvalue(bwnext) + amount);
            }
            Memory => if (memorynext != InfRat) {
                memorynext = Fin(finvalue(memorynext) + amount);
            }
        }
    }
    Unit setProvider(CloudProvider provider) {
        this.cloudprovider = provider;
    }
    CloudProvider getProvider() { return cloudprovider; }
    Bool acquire() {
        Bool result = True;
        if (cloudprovider != null) {
            result = await cloudprovider!acquireInstance(this);
        }
        return result;
    }
    Bool release() {
        Bool result = True;
        if (cloudprovider != null) {
            result = await cloudprovider!releaseInstance(this);
        }
        return result;
    }
    [Atomic]
    Bool matchesDescription(Map<Resourcetype, Rat> description) {
        Bool result = True;
        Set<Resourcetype> keys = keys(description);
        while (result == True && ~(emptySet(keys))) {
            Resourcetype key = take(keys);
            keys = remove(keys, key);
            Rat value = lookupUnsafe(description, key);
            case (key) {
            CPU => {
                if (cpu != InfRat && finvalue(cpu) < value) result = False;
            }
            Bandwidth => {
                if (bw != InfRat && finvalue(bw) < value) result = False;
            }
            Memory => {
                if (memory != InfRat && finvalue(memory) - memoryconsumed < value)
                    // Memory has different semantics - we ask for _free_
                    // memory, not total memory
                    result = False;
                }
            }
        }
        return result;
    }
}

// abbreviation for [DC: foo] annotations
type DC = DeploymentComponent;

def DeploymentComponent thisDC() = builtin;

// Annotation for method definitions: runtime cost specification
type Cost = Duration;

// Annotation for async method calls: size of sent data
type Size = Rat;

// Annotation for classes: memory size of resulting cog
type MaxSize = Rat;

// Distributed execution (eg the Scala backend): where the cog will be created
type CogLocation = String;

/**
 * Reflective, mirror-based interface for ABS
 */
module ABS.Meta;
export *;
// these three used to reside in ABS.Meta; re-export for backward compatibility
export print, println, readln from ABS.StdLib;
import * from ABS.StdLib;
import * from ABS.Scheduler;

def ObjectMirror reflect<A>(A a) = builtin;
def ProductLine getProductLine() = builtin;

// OO wrapper for above functions
interface Runtime {
    ProductLine getProductLine();   
    // No generic methods in ABS:
    // ObjectMirror reflect(Any object);
}
class Runtime implements Runtime {
    ProductLine getProductLine() { return getProductLine(); }
    // No generic methods in ABS:
    //ObjectMirror reflect(Any object) { return reflect(object); }
}

interface Object {}

interface ObjectMirror {
    String getClassName();
    Class getClass();
    Unit setClass(Class c);
    
    Object getFieldValue();
    Unit setFieldValue(Object val);
    [Atomic] Cog getCog();
    Unit setCog(Cog c);
    
    Bool respondsTo(String name);
//    Object send(Method m, List<T>);
}

interface Cog {
    [Atomic] Unit setScheduler(ProcessScheduler sched);
    Unit info();
}

interface ProcessScheduler {
    Process schedule(List<Process> queue);
}

interface Class {
    String getName();
    Method getMethod(String mName);
    Unit addMethod(String mName, Method m);
    Unit removeMethod(String mName);
}

interface Method {
    //Object exec(Object receiver, List<Object> params);
}

interface ProductLine {
    Product getCurrentProduct();
    Product getProduct(String s);
    Unit reconfigure(Product p);
    Unit addProduct(Product p);
    Unit removeProduct(Product p);
    Unit addReconfiguration(Reconfiguration r);   
    Unit removeReconfiguration(Reconfiguration r);   
}

interface Product {
    String getName();
    Set<String> getFeatures();
    Set<Product> getConfigurableProducts();
    Reconfiguration getReconfiguration(Product p);
    Unit reconfigure(Product p);
}

interface Reconfiguration {
    String getName();
    Product getCurrentProduct();
    Product getProduct(String s);
    Unit setCurrentProduct(Product p);
    Product getTargetProduct();
    Unit setTargetProduct(Product p);
    List<Delta> getDeltas();
    Unit setDeltas(List<Delta> deltas);
    StateUpdate getStateUpdate();
    Unit setStateUpdate(StateUpdate u);
}

interface Delta {
    String getName();
    Unit apply();
}

interface StateUpdate {
    String getName();
    Unit apply();
}

interface Feature {
    String getName();
}


/**
 * Feature reflection for ABS.
 *
 * The empty definitions in this module are rewritten by the frontend according to
 * the definitions of the productline and current product.  Note that the names of
 * all features will be exported as constructors for the Feature datatype.
 */

module ABS.Productline;
export *;
import List, Nil, String from ABS.StdLib;

data Feature;

def String product_name() = "";
def List<Feature> product_features() = Nil;

