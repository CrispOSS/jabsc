
-- IDENTIFIER TOKENS
--------------------
position token U (upper (letter | digit | '_')*) ;
position token L (lower (letter | digit | '_')*) ;

comment "//" ;
comment "/*" "*/" ;
 
-- Identifiers (variables and types)
AnyIden. AnyIdent ::= L ;
AnyTyIden. AnyIdent ::= U ;
separator nonempty AnyIdent "," ;

-- MAYBE-QUALIFIED IDENTIFIERS
------------------------------

-- upper
U_. QU ::= U ;
QU_. QU ::= U "." QU ;
-- lower
L_. QL ::= L ;
QL_. QL ::= U "." QL ;
-- any
LA. QA ::= L ;
UA. QA ::= U ;
QA_. QA ::= U "." QA;

separator nonempty U "," ; -- for <Typevar1,..>
separator nonempty QU "," ; -- for list of types/constructors 
separator nonempty QA "," ; -- for imports/exports


entrypoints Program ;
Prog. Program  ::= [Module]; -- a Program is a list of modules definitions
separator Module "";

-- Modules
Modul. Module ::= "module" QType ";" [Export] [Import] [Decl] MaybeBlock ;

-- Exports
AnyExport. Export ::= "export" [AnyIdent] ;
AnyFromExport. Export ::= "export" [AnyIdent] "from" QType ;
StarExport. Export ::= "export" "*" ;
StarFromExport. Export ::= "export" "*" "from" QType ;
terminator Export ";" ;

-- Imports
AnyImport. Import ::= ImportType TType AnyIdent  ; -- maybe ambiguous, but no such claim by bnfc
AnyFromImport. Import ::= ImportType [AnyIdent] "from" QType ;
StarFromImport. Import ::= ImportType "*" "from" QType ;
terminator Import ";" ;
ForeignImport. ImportType ::= "fimport";
NormalImport.     ImportType ::= "import";

-- Type valid names
TUnderscore. Type ::= "_";  -- for type inference
TSimple. Type ::= QType;
TGen. Type ::= QType "<" [Type] ">" ;
separator nonempty Type "," ;
separator nonempty QType ",";

-- list wrapper to TypeIndent to separate with dots "."
QTyp. QType ::= [QTypeSegment];
QTypeSegmen. QTypeSegment ::= U ;
separator nonempty QTypeSegment "." ;

-- list wrapper to TypeIndent to separate with dots "."
TTyp. TType ::= [TTypeSegment];
TTypeSegmen. TTypeSegment ::= U ;
terminator nonempty TTypeSegment "." ;

-- Declarations (ADT)
terminator Decl "" ;
TypeDecl. Decl ::= "type" U "=" Type ";" ;
TypeParDecl. Decl ::= "type" U "<" [U] ">" "=" Type ";" ;
ExceptionDecl. Decl ::= "exception" ConstrIdent ";" ; -- single constructor
DataDecl. Decl ::= "data" U "=" [ConstrIdent] ";" ;
DataParDecl. Decl ::= "data" U "<" [U] ">" "=" [ConstrIdent] ";" ;
SinglConstrIdent. ConstrIdent ::= U ;
ParamConstrIdent. ConstrIdent ::= U "(" [ConstrType] ")" ;
EmptyConstrType. ConstrType ::= Type ;
RecordConstrType. ConstrType ::= Type L ;
separator ConstrType "," ;
separator nonempty U "," ;
separator nonempty ConstrIdent "|" ;

-- Declarations (Functions)
FunDecl.  Decl ::= "def" Type L "(" [Param] ")" "=" FunBody ";" ;
FunParDecl. Decl ::= "def" Type L "<" [U] ">" "(" [Param] ")" "=" FunBody ";" ;
BuiltinFunBody. FunBody ::= "builtin" ;
NormalFunBody. FunBody ::= PureExp ;

-- Declarations (Interface)
InterfDecl. Decl ::= Ann "interface" U "{" [MethSignat] "}" ;
ExtendsDecl. Decl ::= Ann "interface" U "extends" [QType] "{" [MethSignat] "}" ;
MethSig. MethSignat ::= Type L "(" [Param] ")" ;
terminator MethSignat ";" ;

-- Declarations (Class)
ClassDecl. Decl ::= Ann "class" U "{" [ClassBody] MaybeBlock [ClassBody] "}" ;
ClassParamDecl. Decl ::= Ann "class" U "(" [Param] ")" "{" [ClassBody] MaybeBlock [ClassBody]  "}" ;
ClassImplements. Decl ::= Ann "class" U "implements" [QType] "{" [ClassBody] MaybeBlock [ClassBody]  "}" ;
ClassParamImplements. Decl ::= Ann "class" U "(" [Param] ")" "implements" [QType]  "{" [ClassBody] MaybeBlock [ClassBody]  "}" ;
FieldClassBody. ClassBody ::= Type L ";" ;
FieldAssignClassBody. ClassBody ::= Type L "=" PureExp ";" ;
MethClassBody. ClassBody ::= Type L "(" [Param] ")" Block ;
separator ClassBody "" ;

-- Blocks
Bloc. Block ::= "{" [Stm] "}" ;
JustBlock. MaybeBlock ::= Block ;
NoBlock.   MaybeBlock ::=  ;

-- Formal parameters to function/interface/method declarations
separator Param "," ;
Par. Param ::= Type L;

-- Statements
terminator Stm "" ;
SExp.    Stm ::= Exp ";" ;
SBlock.  Stm ::= "{" [Stm] "}" ;
SWhile.  Stm ::= "while" "(" PureExp ")" Stm ;
SReturn. Stm ::= "return" Exp  ";" ;
SAss.    Stm ::= L "=" Exp ";" ;
SFieldAss. Stm ::= "this" "." L "=" Exp ";" ;
SDec.    Stm ::= Type L ";" ;
SDecAss. Stm ::= Type L "=" Exp ";" ;
SIf.     Stm ::= "if" "(" PureExp ")" Stm ;
SIfElse. Stm ::= "if" "(" PureExp ")" Stm "else" Stm ;
SSuspend. Stm ::= "suspend" ";" ;
SSkip. Stm ::= "skip" ";" ;
SAssert. Stm ::= "assert" PureExp ";" ;
SAwait.  Stm ::= "await" Guard ";" ;
SThrow. Stm ::= "throw" PureExp ";" ;
STryCatchFinally. Stm ::= "try" Stm "catch" "{" [CatchBranch] "}" MaybeFinally ;
CatchBranc. CatchBranch ::= Pattern "=>" Stm ;
terminator CatchBranch "" ; -- can be empty, and does not have to be terminated by ";"
JustFinally. MaybeFinally ::= "finally" Stm ;
NoFinally. MaybeFinally ::= ;
SPrint. Stm ::= "println" PureExp ";" ;

-- Await Guards
VarGuard. Guard ::= L "?" ;
FieldGuard. Guard ::= "this" "." L "?" ;
ExpGuard. Guard ::= PureExp ; -- this should be disabled, because it has ABS semantics/pragmatic problems.
AndGuard. Guard ::= Guard "&" Guard ;

-- Expressions
ExpP. Exp ::= PureExp ;
ExpE. Exp ::= EffExp ;

-- Pure Expressions
separator PureExp "," ;  -- for passing arguments to function/method calls
EOr.      PureExp ::= PureExp "||" PureExp1 ;
EAnd.     PureExp1 ::= PureExp1 "&&" PureExp2 ;
EEq.     PureExp2 ::= PureExp2 "==" PureExp3 ;
ENeq.    PureExp2 ::= PureExp2 "!=" PureExp3 ;
ELt.     PureExp3 ::= PureExp3 "<" PureExp4 ;
ELe.     PureExp3 ::= PureExp3 "<=" PureExp4 ;
EGt.     PureExp3 ::= PureExp3 ">" PureExp4 ;
EGe.     PureExp3 ::= PureExp3 ">=" PureExp4 ;
EAdd.    PureExp4 ::= PureExp4 "+" PureExp5 ;
ESub.    PureExp4 ::= PureExp4 "-" PureExp5 ;
EMul.    PureExp5 ::= PureExp5 "*" PureExp6 ;
EDiv.    PureExp5 ::= PureExp5 "/" PureExp6 ;
EMod.    PureExp5 ::= PureExp5 "%" PureExp6 ;
ELogNeg. PureExp6 ::= "~" PureExp6 ;
EIntNeg. PureExp6 ::= "-" PureExp6 ;
EFunCall.    PureExp7 ::= L "(" [PureExp] ")" ;
EQualFunCall. PureExp7 ::= TType L "(" [PureExp] ")" ; -- maybe ambiguous, but no such claim by bnfc
ENaryFunCall. PureExp7 ::= L "[" [PureExp] "]" ;
ENaryQualFunCall. PureExp7 ::= TType L "[" [PureExp] "]" ; -- maybe ambiguous, but no such claim by bnfc
EVar.    PureExp7 ::= L ;
EThis.   PureExp7 ::= "this" "." L ; 
EQualVar. PureExp7 ::= TType L ;
ESinglConstr.   PureExp7 ::= QType ;
EParamConstr. PureExp7 ::= QType "(" [PureExp] ")" ;
ELit.    PureExp7 ::= Literal ;
coercions PureExp 7 ;

Let. PureExp ::= "let" "(" Param ")" "=" PureExp "in" PureExp ;
If. PureExp ::= "if" PureExp "then" PureExp "else" PureExp ;
Case. PureExp ::= "case" PureExp "{" [CaseBranch] "}" ;
CaseBranc. CaseBranch ::= Pattern "=>" PureExp ;
terminator nonempty CaseBranch ";" ;


-- Pattern Matching
separator Pattern "," ;
PIdent. Pattern ::= L ;
PLit. Pattern ::= Literal ;
PSinglConstr. Pattern ::= U ;
PParamConstr. Pattern ::= U "(" [Pattern] ")" ;
PUnderscore. Pattern ::= "_" ;

-- LITERALS
-----------
LNull.   Literal ::= "null" ;
LThis.   Literal ::= "this" ;
LStr.    Literal ::= String ;
LInt.    Literal ::= Integer ;
LFloat.  Literal ::= Double ;

-- Effectful Expressions
New. EffExp ::= "new" Type "(" [PureExp] ")" ;
NewLocal. EffExp ::= "new" "local" Type "(" [PureExp] ")" ;
SyncMethCall. EffExp ::= PureExp "." L "(" [PureExp] ")" ;
ThisSyncMethCall. EffExp ::= "this" "." L "(" [PureExp] ")" ;
AsyncMethCall. EffExp ::= PureExp "!" L "(" [PureExp] ")" ;
ThisAsyncMethCall. EffExp ::= "this" "!" L "(" [PureExp] ")" ;
Get. EffExp ::= PureExp "." "get" ;
Spawns. EffExp ::= PureExp "spawns" Type "(" [PureExp] ")" ;

--Annotations (turned off because we don't make use of them)
NoAnn. Ann ::= ;
SimpleAnn. Ann ::= "[" PureExp "]";
MappedAnn. Ann ::= "[" Literal ":" Literal "]";
separator Ann "" ;
AnnDec. AnnDecl ::= [Ann] Decl;
terminator AnnDecl "" ;
AnnTyp. AnnType ::= [Ann] Type;
separator AnnType "," ;



-- there are more places where annotations can be put

--TODO: Deltas