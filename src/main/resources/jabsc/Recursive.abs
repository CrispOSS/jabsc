module Recursive;
import * from Absstdlib;
import Functions from Absstdlib;

interface Ainterface {
	Int recursive_m(Int i, Int id);
}
	
interface Binterface{
	Int  compute( );
}
	
class A() implements Ainterface{
	Int result=0;
	
	Int recursive_m(Int i, Int id){
	   if (i>0){
	   		Int r = 0;
	   		r=this.recursive_m(i - 1,id);
	   		//r=this!recursive_m(i-1,id);
	   		//println("Start "+ toString(id)+ " "+ toString(i));
	   		//this.result=this.recursive_m(i - 1,id);
			//println(toString(i)+" "+ toString(id)+" =========="); 
			//i=i+1;
			//id=id+1;
				
		}
		else{
			//B computation = new B ( );
			Fut<Int> f = this ! compute( );
			//println("==========");
			await f ?;
		}
		//println(toString(id)+" **********");
		return 1;
	}

	Int compute( ){
		result = result + 1;
		/*do some work */
		return result;
	}
	
}
	
{ // Main block:
	Int i = 0;
	A master = new A ( );
	List<Fut<Int>> futures = Nil;
	
	while(i<5){
		Fut<Int> f = master ! recursive_m (5, i);
		futures = Cons( f, futures );
		i = i + 1 ;
	}
	while ( size(futures) > 0 ){
	
		Fut<Int> f1 = head(futures);
		futures = tail(futures);
		Int r = f1.get;
	}
}